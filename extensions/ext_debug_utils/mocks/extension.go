// Code generated by MockGen. DO NOT EDIT.
// Source: extension.go

// Package mock_debugutils is a generated GoMock package.
package mock_debugutils

import (
	reflect "reflect"

	common "github.com/CannibalVox/VKng/core/common"
	core1_0 "github.com/CannibalVox/VKng/core/core1_0"
	driver "github.com/CannibalVox/VKng/core/driver"
	ext_debug_utils "github.com/CannibalVox/VKng/extensions/ext_debug_utils"
	gomock "github.com/golang/mock/gomock"
)

// MockExtension is a mock of Extension interface.
type MockExtension struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionMockRecorder
}

// MockExtensionMockRecorder is the mock recorder for MockExtension.
type MockExtensionMockRecorder struct {
	mock *MockExtension
}

// NewMockExtension creates a new mock instance.
func NewMockExtension(ctrl *gomock.Controller) *MockExtension {
	mock := &MockExtension{ctrl: ctrl}
	mock.recorder = &MockExtensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtension) EXPECT() *MockExtensionMockRecorder {
	return m.recorder
}

// CmdBeginLabel dummies base method.
func (m *MockExtension) CmdBeginLabel(commandBuffer core1_0.CommandBuffer, label ext_debug_utils.LabelOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBeginLabel", commandBuffer, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBeginLabel indicates an expected call of CmdBeginLabel.
func (mr *MockExtensionMockRecorder) CmdBeginLabel(commandBuffer, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBeginLabel", reflect.TypeOf((*MockExtension)(nil).CmdBeginLabel), commandBuffer, label)
}

// CmdEndLabel dummies base method.
func (m *MockExtension) CmdEndLabel(commandBuffer core1_0.CommandBuffer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdEndLabel", commandBuffer)
}

// CmdEndLabel indicates an expected call of CmdEndLabel.
func (mr *MockExtensionMockRecorder) CmdEndLabel(commandBuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdEndLabel", reflect.TypeOf((*MockExtension)(nil).CmdEndLabel), commandBuffer)
}

// CmdInsertLabel dummies base method.
func (m *MockExtension) CmdInsertLabel(commandBuffer core1_0.CommandBuffer, label ext_debug_utils.LabelOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdInsertLabel", commandBuffer, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdInsertLabel indicates an expected call of CmdInsertLabel.
func (mr *MockExtensionMockRecorder) CmdInsertLabel(commandBuffer, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdInsertLabel", reflect.TypeOf((*MockExtension)(nil).CmdInsertLabel), commandBuffer, label)
}

// CreateMessenger dummies base method.
func (m *MockExtension) CreateMessenger(instance core1_0.Instance, allocation *driver.AllocationCallbacks, o ext_debug_utils.CreateOptions) (ext_debug_utils.Messenger, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessenger", instance, allocation, o)
	ret0, _ := ret[0].(ext_debug_utils.Messenger)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMessenger indicates an expected call of CreateMessenger.
func (mr *MockExtensionMockRecorder) CreateMessenger(instance, allocation, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessenger", reflect.TypeOf((*MockExtension)(nil).CreateMessenger), instance, allocation, o)
}

// QueueBeginLabel dummies base method.
func (m *MockExtension) QueueBeginLabel(queue core1_0.Queue, label ext_debug_utils.LabelOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueBeginLabel", queue, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueBeginLabel indicates an expected call of QueueBeginLabel.
func (mr *MockExtensionMockRecorder) QueueBeginLabel(queue, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueBeginLabel", reflect.TypeOf((*MockExtension)(nil).QueueBeginLabel), queue, label)
}

// QueueEndLabel dummies base method.
func (m *MockExtension) QueueEndLabel(queue core1_0.Queue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueueEndLabel", queue)
}

// QueueEndLabel indicates an expected call of QueueEndLabel.
func (mr *MockExtensionMockRecorder) QueueEndLabel(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueEndLabel", reflect.TypeOf((*MockExtension)(nil).QueueEndLabel), queue)
}

// QueueInsertLabel dummies base method.
func (m *MockExtension) QueueInsertLabel(queue core1_0.Queue, label ext_debug_utils.LabelOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueInsertLabel", queue, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueInsertLabel indicates an expected call of QueueInsertLabel.
func (mr *MockExtensionMockRecorder) QueueInsertLabel(queue, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueInsertLabel", reflect.TypeOf((*MockExtension)(nil).QueueInsertLabel), queue, label)
}

// SetObjectName dummies base method.
func (m *MockExtension) SetObjectName(instance core1_0.Device, name ext_debug_utils.ObjectNameOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetObjectName", instance, name)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetObjectName indicates an expected call of SetObjectName.
func (mr *MockExtensionMockRecorder) SetObjectName(instance, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectName", reflect.TypeOf((*MockExtension)(nil).SetObjectName), instance, name)
}

// SetObjectTag dummies base method.
func (m *MockExtension) SetObjectTag(instance core1_0.Device, tag ext_debug_utils.ObjectTagOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetObjectTag", instance, tag)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetObjectTag indicates an expected call of SetObjectTag.
func (mr *MockExtensionMockRecorder) SetObjectTag(instance, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetObjectTag", reflect.TypeOf((*MockExtension)(nil).SetObjectTag), instance, tag)
}

// SubmitMessage dummies base method.
func (m *MockExtension) SubmitMessage(instance core1_0.Instance, severity ext_debug_utils.MessageSeverities, types ext_debug_utils.MessageTypes, data ext_debug_utils.CallbackDataOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitMessage", instance, severity, types, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitMessage indicates an expected call of SubmitMessage.
func (mr *MockExtensionMockRecorder) SubmitMessage(instance, severity, types, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitMessage", reflect.TypeOf((*MockExtension)(nil).SubmitMessage), instance, severity, types, data)
}
