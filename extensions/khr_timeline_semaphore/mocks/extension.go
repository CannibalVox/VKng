// Code generated by MockGen. DO NOT EDIT.
// Source: extiface.go

// Package mock_timeline_semaphore is a generated GoMock package.
package mock_timeline_semaphore

import (
	reflect "reflect"
	time "time"

	common "github.com/CannibalVox/VKng/core/common"
	core1_0 "github.com/CannibalVox/VKng/core/core1_0"
	khr_timeline_semaphore "github.com/CannibalVox/VKng/extensions/khr_timeline_semaphore"
	gomock "github.com/golang/mock/gomock"
)

// MockExtension is a mock of Extension interface.
type MockExtension struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionMockRecorder
}

// MockExtensionMockRecorder is the mock recorder for MockExtension.
type MockExtensionMockRecorder struct {
	mock *MockExtension
}

// NewMockExtension creates a new mock instance.
func NewMockExtension(ctrl *gomock.Controller) *MockExtension {
	mock := &MockExtension{ctrl: ctrl}
	mock.recorder = &MockExtensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtension) EXPECT() *MockExtensionMockRecorder {
	return m.recorder
}

// SemaphoreCounterValue mocks base method.
func (m *MockExtension) SemaphoreCounterValue(device core1_0.Device, semaphore core1_0.Semaphore) (uint64, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CounterValue", device, semaphore)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SemaphoreCounterValue indicates an expected call of SemaphoreCounterValue.
func (mr *MockExtensionMockRecorder) SemaphoreCounterValue(device, semaphore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterValue", reflect.TypeOf((*MockExtension)(nil).SemaphoreCounterValue), device, semaphore)
}

// SignalSemaphore mocks base method.
func (m *MockExtension) SignalSemaphore(device core1_0.Device, o khr_timeline_semaphore.SemaphoreSignalOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalSemaphore", device, o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignalSemaphore indicates an expected call of SignalSemaphore.
func (mr *MockExtensionMockRecorder) SignalSemaphore(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalSemaphore", reflect.TypeOf((*MockExtension)(nil).SignalSemaphore), device, o)
}

// WaitSemaphores mocks base method.
func (m *MockExtension) WaitSemaphores(device core1_0.Device, timeout time.Duration, o khr_timeline_semaphore.SemaphoreWaitOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitSemaphores", device, timeout, o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitSemaphores indicates an expected call of WaitSemaphores.
func (mr *MockExtensionMockRecorder) WaitSemaphores(device, timeout, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitSemaphores", reflect.TypeOf((*MockExtension)(nil).WaitSemaphores), device, timeout, o)
}
