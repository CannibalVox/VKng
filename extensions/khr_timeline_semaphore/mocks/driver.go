// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go

// Package mock_timeline_semaphore is a generated GoMock package.
package mock_timeline_semaphore

import (
	reflect "reflect"

	common "github.com/CannibalVox/VKng/core/common"
	driver "github.com/CannibalVox/VKng/core/driver"
	khr_timeline_semaphore_driver "github.com/CannibalVox/VKng/extensions/khr_timeline_semaphore/driver"
	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// VkGetSemaphoreCounterValueKHR mocks base method.
func (m *MockDriver) VkGetSemaphoreCounterValueKHR(device driver.VkDevice, semaphore driver.VkSemaphore, pValue *driver.Uint64) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetSemaphoreCounterValueKHR", device, semaphore, pValue)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetSemaphoreCounterValueKHR indicates an expected call of VkGetSemaphoreCounterValueKHR.
func (mr *MockDriverMockRecorder) VkGetSemaphoreCounterValueKHR(device, semaphore, pValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetSemaphoreCounterValueKHR", reflect.TypeOf((*MockDriver)(nil).VkGetSemaphoreCounterValueKHR), device, semaphore, pValue)
}

// VkSignalSemaphoreKHR mocks base method.
func (m *MockDriver) VkSignalSemaphoreKHR(device driver.VkDevice, pSignalInfo *khr_timeline_semaphore_driver.VkSemaphoreSignalInfoKHR) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkSignalSemaphoreKHR", device, pSignalInfo)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkSignalSemaphoreKHR indicates an expected call of VkSignalSemaphoreKHR.
func (mr *MockDriverMockRecorder) VkSignalSemaphoreKHR(device, pSignalInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkSignalSemaphoreKHR", reflect.TypeOf((*MockDriver)(nil).VkSignalSemaphoreKHR), device, pSignalInfo)
}

// VkWaitSemaphoresKHR mocks base method.
func (m *MockDriver) VkWaitSemaphoresKHR(device driver.VkDevice, pWaitInfo *khr_timeline_semaphore_driver.VkSemaphoreWaitInfoKHR, timeout driver.Uint64) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkWaitSemaphoresKHR", device, pWaitInfo, timeout)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkWaitSemaphoresKHR indicates an expected call of VkWaitSemaphoresKHR.
func (mr *MockDriverMockRecorder) VkWaitSemaphoresKHR(device, pWaitInfo, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkWaitSemaphoresKHR", reflect.TypeOf((*MockDriver)(nil).VkWaitSemaphoresKHR), device, pWaitInfo, timeout)
}
