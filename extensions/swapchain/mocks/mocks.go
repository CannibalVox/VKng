// Code generated by MockGen. DO NOT EDIT.
// Source: extension.go

// Package mock_swapchain is a generated GoMock package.
package mock_swapchain

import (
	reflect "reflect"
	time "time"

	loader "github.com/CannibalVox/VKng/core/loader"
	resource "github.com/CannibalVox/VKng/core/resources"
	ext_swapchain "github.com/CannibalVox/VKng/extensions/swapchain"
	cgoalloc "github.com/CannibalVox/cgoalloc"
	gomock "github.com/golang/mock/gomock"
)

// MockSwapchain is a mock of Swapchain interface.
type MockSwapchain struct {
	ctrl     *gomock.Controller
	recorder *MockSwapchainMockRecorder
}

// MockSwapchainMockRecorder is the mock recorder for MockSwapchain.
type MockSwapchainMockRecorder struct {
	mock *MockSwapchain
}

// NewMockSwapchain creates a new mock instance.
func NewMockSwapchain(ctrl *gomock.Controller) *MockSwapchain {
	mock := &MockSwapchain{ctrl: ctrl}
	mock.recorder = &MockSwapchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwapchain) EXPECT() *MockSwapchainMockRecorder {
	return m.recorder
}

// AcquireNextImage mocks base method.
func (m *MockSwapchain) AcquireNextImage(timeout time.Duration, semaphore resource.Semaphore, fence resource.Fence) (int, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireNextImage", timeout, semaphore, fence)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AcquireNextImage indicates an expected call of AcquireNextImage.
func (mr *MockSwapchainMockRecorder) AcquireNextImage(timeout, semaphore, fence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireNextImage", reflect.TypeOf((*MockSwapchain)(nil).AcquireNextImage), timeout, semaphore, fence)
}

// Destroy mocks base method.
func (m *MockSwapchain) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSwapchainMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSwapchain)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockSwapchain) Handle() ext_swapchain.SwapchainHandle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(ext_swapchain.SwapchainHandle)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockSwapchainMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockSwapchain)(nil).Handle))
}

// Images mocks base method.
func (m *MockSwapchain) Images(allocator cgoalloc.Allocator) ([]resource.Image, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Images", allocator)
	ret0, _ := ret[0].([]resource.Image)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Images indicates an expected call of Images.
func (mr *MockSwapchainMockRecorder) Images(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Images", reflect.TypeOf((*MockSwapchain)(nil).Images), allocator)
}

// PresentToQueue mocks base method.
func (m *MockSwapchain) PresentToQueue(allocator cgoalloc.Allocator, queue resource.Queue, o *ext_swapchain.PresentOptions) ([]loader.VkResult, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentToQueue", allocator, queue, o)
	ret0, _ := ret[0].([]loader.VkResult)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PresentToQueue indicates an expected call of PresentToQueue.
func (mr *MockSwapchainMockRecorder) PresentToQueue(allocator, queue, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentToQueue", reflect.TypeOf((*MockSwapchain)(nil).PresentToQueue), allocator, queue, o)
}
