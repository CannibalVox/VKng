// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go

// Package mock_descriptor_update_template is a generated GoMock package.
package mock_descriptor_update_template

import (
	reflect "reflect"
	unsafe "unsafe"

	common "github.com/CannibalVox/VKng/core/common"
	driver "github.com/CannibalVox/VKng/core/driver"
	khr_descriptor_update_template_driver "github.com/CannibalVox/VKng/extensions/khr_descriptor_update_template/driver"
	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// VkCmdPushDescriptorSetWithTemplateKHR dummies base method.
func (m *MockDriver) VkCmdPushDescriptorSetWithTemplateKHR(commandBuffer driver.VkCommandBuffer, descriptorUpdateTemplate khr_descriptor_update_template_driver.VkDescriptorUpdateTemplateKHR, layout driver.VkPipelineLayout, set driver.Uint32, pData unsafe.Pointer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VkCmdPushDescriptorSetWithTemplateKHR", commandBuffer, descriptorUpdateTemplate, layout, set, pData)
}

// VkCmdPushDescriptorSetWithTemplateKHR indicates an expected call of VkCmdPushDescriptorSetWithTemplateKHR.
func (mr *MockDriverMockRecorder) VkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdPushDescriptorSetWithTemplateKHR", reflect.TypeOf((*MockDriver)(nil).VkCmdPushDescriptorSetWithTemplateKHR), commandBuffer, descriptorUpdateTemplate, layout, set, pData)
}

// VkCreateDescriptorUpdateTemplateKHR dummies base method.
func (m *MockDriver) VkCreateDescriptorUpdateTemplateKHR(device driver.VkDevice, pCreateInfo *khr_descriptor_update_template_driver.VkDescriptorUpdateTemplateCreateInfoKHR, pAllocator *driver.VkAllocationCallbacks, pDescriptorUpdateTemplate *khr_descriptor_update_template_driver.VkDescriptorUpdateTemplateKHR) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateDescriptorUpdateTemplateKHR", device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateDescriptorUpdateTemplateKHR indicates an expected call of VkCreateDescriptorUpdateTemplateKHR.
func (mr *MockDriverMockRecorder) VkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateDescriptorUpdateTemplateKHR", reflect.TypeOf((*MockDriver)(nil).VkCreateDescriptorUpdateTemplateKHR), device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate)
}

// VkDestroyDescriptorUpdateTemplateKHR dummies base method.
func (m *MockDriver) VkDestroyDescriptorUpdateTemplateKHR(device driver.VkDevice, descriptorUpdateTemplate khr_descriptor_update_template_driver.VkDescriptorUpdateTemplateKHR, pAllocator *driver.VkAllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VkDestroyDescriptorUpdateTemplateKHR", device, descriptorUpdateTemplate, pAllocator)
}

// VkDestroyDescriptorUpdateTemplateKHR indicates an expected call of VkDestroyDescriptorUpdateTemplateKHR.
func (mr *MockDriverMockRecorder) VkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyDescriptorUpdateTemplateKHR", reflect.TypeOf((*MockDriver)(nil).VkDestroyDescriptorUpdateTemplateKHR), device, descriptorUpdateTemplate, pAllocator)
}

// VkUpdateDescriptorSetWithTemplateKHR dummies base method.
func (m *MockDriver) VkUpdateDescriptorSetWithTemplateKHR(device driver.VkDevice, descriptorSet driver.VkDescriptorSet, descriptorUpdateTemplate khr_descriptor_update_template_driver.VkDescriptorUpdateTemplateKHR, pData unsafe.Pointer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VkUpdateDescriptorSetWithTemplateKHR", device, descriptorSet, descriptorUpdateTemplate, pData)
}

// VkUpdateDescriptorSetWithTemplateKHR indicates an expected call of VkUpdateDescriptorSetWithTemplateKHR.
func (mr *MockDriverMockRecorder) VkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkUpdateDescriptorSetWithTemplateKHR", reflect.TypeOf((*MockDriver)(nil).VkUpdateDescriptorSetWithTemplateKHR), device, descriptorSet, descriptorUpdateTemplate, pData)
}
