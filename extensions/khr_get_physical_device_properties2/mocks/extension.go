// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go

// Package mock_get_physical_device_properties2 is a generated GoMock package.
package mock_get_physical_device_properties2

import (
	reflect "reflect"

	common "github.com/CannibalVox/VKng/core/common"
	core1_0 "github.com/CannibalVox/VKng/core/core1_0"
	khr_get_physical_device_properties2 "github.com/CannibalVox/VKng/extensions/khr_get_physical_device_properties2"
	gomock "github.com/golang/mock/gomock"
)

// MockExtension is a mock of Extension interface.
type MockExtension struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionMockRecorder
}

// MockExtensionMockRecorder is the mock recorder for MockExtension.
type MockExtensionMockRecorder struct {
	mock *MockExtension
}

// NewMockExtension creates a new mock instance.
func NewMockExtension(ctrl *gomock.Controller) *MockExtension {
	mock := &MockExtension{ctrl: ctrl}
	mock.recorder = &MockExtensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtension) EXPECT() *MockExtensionMockRecorder {
	return m.recorder
}

// PhysicalDeviceFeatures mocks base method.
func (m *MockExtension) PhysicalDeviceFeatures(physicalDevice core1_0.PhysicalDevice, out *khr_get_physical_device_properties2.DeviceFeaturesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDeviceFeatures", physicalDevice, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// PhysicalDeviceFeatures indicates an expected call of PhysicalDeviceFeatures.
func (mr *MockExtensionMockRecorder) PhysicalDeviceFeatures(physicalDevice, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDeviceFeatures", reflect.TypeOf((*MockExtension)(nil).PhysicalDeviceFeatures), physicalDevice, out)
}

// PhysicalDeviceFormatProperties mocks base method.
func (m *MockExtension) PhysicalDeviceFormatProperties(physicalDevice core1_0.PhysicalDevice, format common.DataFormat, out *khr_get_physical_device_properties2.FormatPropertiesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDeviceFormatProperties", physicalDevice, format, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// PhysicalDeviceFormatProperties indicates an expected call of PhysicalDeviceFormatProperties.
func (mr *MockExtensionMockRecorder) PhysicalDeviceFormatProperties(physicalDevice, format, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDeviceFormatProperties", reflect.TypeOf((*MockExtension)(nil).PhysicalDeviceFormatProperties), physicalDevice, format, out)
}

// PhysicalDeviceImageFormatProperties mocks base method.
func (m *MockExtension) PhysicalDeviceImageFormatProperties(physicalDevice core1_0.PhysicalDevice, options khr_get_physical_device_properties2.ImageFormatOptions, out *khr_get_physical_device_properties2.ImageFormatOutData) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDeviceImageFormatProperties", physicalDevice, options, out)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PhysicalDeviceImageFormatProperties indicates an expected call of PhysicalDeviceImageFormatProperties.
func (mr *MockExtensionMockRecorder) PhysicalDeviceImageFormatProperties(physicalDevice, options, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDeviceImageFormatProperties", reflect.TypeOf((*MockExtension)(nil).PhysicalDeviceImageFormatProperties), physicalDevice, options, out)
}

// PhysicalDeviceMemoryProperties mocks base method.
func (m *MockExtension) PhysicalDeviceMemoryProperties(physicalDevice core1_0.PhysicalDevice, out *khr_get_physical_device_properties2.MemoryPropertiesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDeviceMemoryProperties", physicalDevice, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// PhysicalDeviceMemoryProperties indicates an expected call of PhysicalDeviceMemoryProperties.
func (mr *MockExtensionMockRecorder) PhysicalDeviceMemoryProperties(physicalDevice, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDeviceMemoryProperties", reflect.TypeOf((*MockExtension)(nil).PhysicalDeviceMemoryProperties), physicalDevice, out)
}

// PhysicalDeviceProperties mocks base method.
func (m *MockExtension) PhysicalDeviceProperties(physicalDevice core1_0.PhysicalDevice, out *khr_get_physical_device_properties2.DevicePropertiesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDeviceProperties", physicalDevice, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// PhysicalDeviceProperties indicates an expected call of PhysicalDeviceProperties.
func (mr *MockExtensionMockRecorder) PhysicalDeviceProperties(physicalDevice, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDeviceProperties", reflect.TypeOf((*MockExtension)(nil).PhysicalDeviceProperties), physicalDevice, out)
}

// PhysicalDeviceQueueFamilyProperties mocks base method.
func (m *MockExtension) PhysicalDeviceQueueFamilyProperties(physicalDevice core1_0.PhysicalDevice, outDataFactory func() *khr_get_physical_device_properties2.QueueFamilyOutData) ([]*khr_get_physical_device_properties2.QueueFamilyOutData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDeviceQueueFamilyProperties", physicalDevice, outDataFactory)
	ret0, _ := ret[0].([]*khr_get_physical_device_properties2.QueueFamilyOutData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PhysicalDeviceQueueFamilyProperties indicates an expected call of PhysicalDeviceQueueFamilyProperties.
func (mr *MockExtensionMockRecorder) PhysicalDeviceQueueFamilyProperties(physicalDevice, outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDeviceQueueFamilyProperties", reflect.TypeOf((*MockExtension)(nil).PhysicalDeviceQueueFamilyProperties), physicalDevice, outDataFactory)
}

// PhysicalDeviceSparseImageFormatProperties mocks base method.
func (m *MockExtension) PhysicalDeviceSparseImageFormatProperties(physicalDevice core1_0.PhysicalDevice, options khr_get_physical_device_properties2.SparseImageFormatOptions, outDataFactory func() *khr_get_physical_device_properties2.SparseImageFormatPropertiesOutData) ([]*khr_get_physical_device_properties2.SparseImageFormatPropertiesOutData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDeviceSparseImageFormatProperties", physicalDevice, options, outDataFactory)
	ret0, _ := ret[0].([]*khr_get_physical_device_properties2.SparseImageFormatPropertiesOutData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PhysicalDeviceSparseImageFormatProperties indicates an expected call of PhysicalDeviceSparseImageFormatProperties.
func (mr *MockExtensionMockRecorder) PhysicalDeviceSparseImageFormatProperties(physicalDevice, options, outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDeviceSparseImageFormatProperties", reflect.TypeOf((*MockExtension)(nil).PhysicalDeviceSparseImageFormatProperties), physicalDevice, options, outDataFactory)
}
