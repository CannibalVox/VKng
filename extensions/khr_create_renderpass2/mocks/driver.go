// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go

// Package mock_create_renderpass2 is a generated GoMock package.
package mock_create_renderpass2

import (
	reflect "reflect"

	common "github.com/CannibalVox/VKng/core/common"
	driver "github.com/CannibalVox/VKng/core/driver"
	khr_create_renderpass2_driver "github.com/CannibalVox/VKng/extensions/khr_create_renderpass2/driver"
	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// VKCmdEndRenderPass2KHR mocks base method.
func (m *MockDriver) VKCmdEndRenderPass2KHR(commandBuffer driver.VkCommandBuffer, pSubpassEndInfo *khr_create_renderpass2_driver.VkSubpassEndInfoKHR) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VKCmdEndRenderPass2KHR", commandBuffer, pSubpassEndInfo)
}

// VKCmdEndRenderPass2KHR indicates an expected call of VKCmdEndRenderPass2KHR.
func (mr *MockDriverMockRecorder) VKCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VKCmdEndRenderPass2KHR", reflect.TypeOf((*MockDriver)(nil).VKCmdEndRenderPass2KHR), commandBuffer, pSubpassEndInfo)
}

// VkCmdBeginRenderPass2KHR mocks base method.
func (m *MockDriver) VkCmdBeginRenderPass2KHR(commandBuffer driver.VkCommandBuffer, pRenderPassBegin *driver.VkRenderPassBeginInfo, pSubpassBeginInfo *khr_create_renderpass2_driver.VkSubpassBeginInfoKHR) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VkCmdBeginRenderPass2KHR", commandBuffer, pRenderPassBegin, pSubpassBeginInfo)
}

// VkCmdBeginRenderPass2KHR indicates an expected call of VkCmdBeginRenderPass2KHR.
func (mr *MockDriverMockRecorder) VkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBeginRenderPass2KHR", reflect.TypeOf((*MockDriver)(nil).VkCmdBeginRenderPass2KHR), commandBuffer, pRenderPassBegin, pSubpassBeginInfo)
}

// VkCmdNextSubpass2KHR mocks base method.
func (m *MockDriver) VkCmdNextSubpass2KHR(commandBuffer driver.VkCommandBuffer, pSubpassBeginInfo *khr_create_renderpass2_driver.VkSubpassBeginInfoKHR, pSubpassEndInfo *khr_create_renderpass2_driver.VkSubpassEndInfoKHR) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VkCmdNextSubpass2KHR", commandBuffer, pSubpassBeginInfo, pSubpassEndInfo)
}

// VkCmdNextSubpass2KHR indicates an expected call of VkCmdNextSubpass2KHR.
func (mr *MockDriverMockRecorder) VkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdNextSubpass2KHR", reflect.TypeOf((*MockDriver)(nil).VkCmdNextSubpass2KHR), commandBuffer, pSubpassBeginInfo, pSubpassEndInfo)
}

// VkCreateRenderPass2KHR mocks base method.
func (m *MockDriver) VkCreateRenderPass2KHR(device driver.VkDevice, pCreateInfo *khr_create_renderpass2_driver.VkRenderPassCreateInfo2KHR, pAllocator *driver.VkAllocationCallbacks, pRenderPass *driver.VkRenderPass) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateRenderPass2KHR", device, pCreateInfo, pAllocator, pRenderPass)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateRenderPass2KHR indicates an expected call of VkCreateRenderPass2KHR.
func (mr *MockDriverMockRecorder) VkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateRenderPass2KHR", reflect.TypeOf((*MockDriver)(nil).VkCreateRenderPass2KHR), device, pCreateInfo, pAllocator, pRenderPass)
}
