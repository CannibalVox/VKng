// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go

// Package mock_sampler_ycbcr_conversion is a generated GoMock package.
package mock_sampler_ycbcr_conversion

import (
	reflect "reflect"

	common "github.com/CannibalVox/VKng/core/common"
	driver "github.com/CannibalVox/VKng/core/driver"
	khr_sampler_ycbcr_conversion_driver "github.com/CannibalVox/VKng/extensions/khr_sampler_ycbcr_conversion/driver"
	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// VkCreateSamplerYcbcrConversionKHR mocks base method.
func (m *MockDriver) VkCreateSamplerYcbcrConversionKHR(device driver.VkDevice, pCreateInfo *khr_sampler_ycbcr_conversion_driver.VkSamplerYcbcrConversionCreateInfoKHR, pAllocator *driver.VkAllocationCallbacks, pYcbcrConversion *khr_sampler_ycbcr_conversion_driver.VkSamplerYcbcrConversionKHR) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateSamplerYcbcrConversionKHR", device, pCreateInfo, pAllocator, pYcbcrConversion)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateSamplerYcbcrConversionKHR indicates an expected call of VkCreateSamplerYcbcrConversionKHR.
func (mr *MockDriverMockRecorder) VkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateSamplerYcbcrConversionKHR", reflect.TypeOf((*MockDriver)(nil).VkCreateSamplerYcbcrConversionKHR), device, pCreateInfo, pAllocator, pYcbcrConversion)
}

// VkDestroySamplerYcbcrConversionKHR mocks base method.
func (m *MockDriver) VkDestroySamplerYcbcrConversionKHR(device driver.VkDevice, ycbcrConversion khr_sampler_ycbcr_conversion_driver.VkSamplerYcbcrConversionKHR, pAllocator *driver.VkAllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VkDestroySamplerYcbcrConversionKHR", device, ycbcrConversion, pAllocator)
}

// VkDestroySamplerYcbcrConversionKHR indicates an expected call of VkDestroySamplerYcbcrConversionKHR.
func (mr *MockDriverMockRecorder) VkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroySamplerYcbcrConversionKHR", reflect.TypeOf((*MockDriver)(nil).VkDestroySamplerYcbcrConversionKHR), device, ycbcrConversion, pAllocator)
}
