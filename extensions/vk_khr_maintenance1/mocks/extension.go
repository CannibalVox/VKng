// Code generated by MockGen. DO NOT EDIT.
// Source: extension.go

// Package mock_maintenance1 is a generated GoMock package.
package mock_maintenance1

import (
	reflect "reflect"

	core1_0 "github.com/CannibalVox/VKng/core/core1_0"
	vk_khr_maintenance1 "github.com/CannibalVox/VKng/extensions/vk_khr_maintenance1"
	gomock "github.com/golang/mock/gomock"
)

// MockExtension is a mock of Extension interface.
type MockExtension struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionMockRecorder
}

// MockExtensionMockRecorder is the mock recorder for MockExtension.
type MockExtensionMockRecorder struct {
	mock *MockExtension
}

// NewMockExtension creates a new mock instance.
func NewMockExtension(ctrl *gomock.Controller) *MockExtension {
	mock := &MockExtension{ctrl: ctrl}
	mock.recorder = &MockExtensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtension) EXPECT() *MockExtensionMockRecorder {
	return m.recorder
}

// TrimCommandPool mocks base method.
func (m *MockExtension) TrimCommandPool(commandPool core1_0.CommandPool, flags vk_khr_maintenance1.CommandPoolTrimFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrimCommandPool", commandPool, flags)
}

// TrimCommandPool indicates an expected call of TrimCommandPool.
func (mr *MockExtensionMockRecorder) TrimCommandPool(commandPool, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrimCommandPool", reflect.TypeOf((*MockExtension)(nil).TrimCommandPool), commandPool, flags)
}
