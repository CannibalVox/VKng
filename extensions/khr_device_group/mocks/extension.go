// Code generated by MockGen. DO NOT EDIT.
// Source: extiface.go

// Package mock_device_group is a generated GoMock package.
package mock_device_group

import (
	reflect "reflect"

	common "github.com/CannibalVox/VKng/core/common"
	core1_0 "github.com/CannibalVox/VKng/core/core1_0"
	khr_device_group "github.com/CannibalVox/VKng/extensions/khr_device_group"
	khr_surface "github.com/CannibalVox/VKng/extensions/khr_surface"
	gomock "github.com/golang/mock/gomock"
)

// MockExtension is a mock of Extension interface.
type MockExtension struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionMockRecorder
}

// MockExtensionMockRecorder is the mock recorder for MockExtension.
type MockExtensionMockRecorder struct {
	mock *MockExtension
}

// NewMockExtension creates a new mock instance.
func NewMockExtension(ctrl *gomock.Controller) *MockExtension {
	mock := &MockExtension{ctrl: ctrl}
	mock.recorder = &MockExtensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtension) EXPECT() *MockExtensionMockRecorder {
	return m.recorder
}

// CmdDispatchBase mocks base method.
func (m *MockExtension) CmdDispatchBase(commandBuffer core1_0.CommandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDispatchBase", commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
}

// CmdDispatchBase indicates an expected call of CmdDispatchBase.
func (mr *MockExtensionMockRecorder) CmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDispatchBase", reflect.TypeOf((*MockExtension)(nil).CmdDispatchBase), commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
}

// CmdSetDeviceMask mocks base method.
func (m *MockExtension) CmdSetDeviceMask(commandBuffer core1_0.CommandBuffer, deviceMask uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetDeviceMask", commandBuffer, deviceMask)
}

// CmdSetDeviceMask indicates an expected call of CmdSetDeviceMask.
func (mr *MockExtensionMockRecorder) CmdSetDeviceMask(commandBuffer, deviceMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetDeviceMask", reflect.TypeOf((*MockExtension)(nil).CmdSetDeviceMask), commandBuffer, deviceMask)
}

// DeviceGroupPeerMemoryFeatures mocks base method.
func (m *MockExtension) DeviceGroupPeerMemoryFeatures(device core1_0.Device, heapIndex, localDeviceIndex, remoteDeviceIndex int) khr_device_group.PeerMemoryFeatures {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGroupPeerMemoryFeatures", device, heapIndex, localDeviceIndex, remoteDeviceIndex)
	ret0, _ := ret[0].(khr_device_group.PeerMemoryFeatures)
	return ret0
}

// DeviceGroupPeerMemoryFeatures indicates an expected call of DeviceGroupPeerMemoryFeatures.
func (mr *MockExtensionMockRecorder) DeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGroupPeerMemoryFeatures", reflect.TypeOf((*MockExtension)(nil).DeviceGroupPeerMemoryFeatures), device, heapIndex, localDeviceIndex, remoteDeviceIndex)
}

// WithKHRSurface mocks base method.
func (m *MockExtension) WithKHRSurface() khr_device_group.ExtensionWithKHRSurface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithKHRSurface")
	ret0, _ := ret[0].(khr_device_group.ExtensionWithKHRSurface)
	return ret0
}

// WithKHRSurface indicates an expected call of WithKHRSurface.
func (mr *MockExtensionMockRecorder) WithKHRSurface() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithKHRSurface", reflect.TypeOf((*MockExtension)(nil).WithKHRSurface))
}

// WithKHRSwapchain mocks base method.
func (m *MockExtension) WithKHRSwapchain() khr_device_group.ExtensionWithKHRSwapchain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithKHRSwapchain")
	ret0, _ := ret[0].(khr_device_group.ExtensionWithKHRSwapchain)
	return ret0
}

// WithKHRSwapchain indicates an expected call of WithKHRSwapchain.
func (mr *MockExtensionMockRecorder) WithKHRSwapchain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithKHRSwapchain", reflect.TypeOf((*MockExtension)(nil).WithKHRSwapchain))
}

// MockExtensionWithKHRSurface is a mock of ExtensionWithKHRSurface interface.
type MockExtensionWithKHRSurface struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionWithKHRSurfaceMockRecorder
}

// MockExtensionWithKHRSurfaceMockRecorder is the mock recorder for MockExtensionWithKHRSurface.
type MockExtensionWithKHRSurfaceMockRecorder struct {
	mock *MockExtensionWithKHRSurface
}

// NewMockExtensionWithKHRSurface creates a new mock instance.
func NewMockExtensionWithKHRSurface(ctrl *gomock.Controller) *MockExtensionWithKHRSurface {
	mock := &MockExtensionWithKHRSurface{ctrl: ctrl}
	mock.recorder = &MockExtensionWithKHRSurfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtensionWithKHRSurface) EXPECT() *MockExtensionWithKHRSurfaceMockRecorder {
	return m.recorder
}

// DeviceGroupPresentCapabilities mocks base method.
func (m *MockExtensionWithKHRSurface) DeviceGroupPresentCapabilities(device core1_0.Device, outData *khr_device_group.DeviceGroupPresentCapabilitiesOutData) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGroupPresentCapabilities", device, outData)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceGroupPresentCapabilities indicates an expected call of DeviceGroupPresentCapabilities.
func (mr *MockExtensionWithKHRSurfaceMockRecorder) DeviceGroupPresentCapabilities(device, outData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGroupPresentCapabilities", reflect.TypeOf((*MockExtensionWithKHRSurface)(nil).DeviceGroupPresentCapabilities), device, outData)
}

// DeviceGroupSurfacePresentModes mocks base method.
func (m *MockExtensionWithKHRSurface) DeviceGroupSurfacePresentModes(device core1_0.Device, surface khr_surface.Surface) (khr_device_group.DeviceGroupPresentModeFlags, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGroupSurfacePresentModes", device, surface)
	ret0, _ := ret[0].(khr_device_group.DeviceGroupPresentModeFlags)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeviceGroupSurfacePresentModes indicates an expected call of DeviceGroupSurfacePresentModes.
func (mr *MockExtensionWithKHRSurfaceMockRecorder) DeviceGroupSurfacePresentModes(device, surface interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGroupSurfacePresentModes", reflect.TypeOf((*MockExtensionWithKHRSurface)(nil).DeviceGroupSurfacePresentModes), device, surface)
}

// PhysicalDevicePresentRectangles mocks base method.
func (m *MockExtensionWithKHRSurface) PhysicalDevicePresentRectangles(physicalDevice core1_0.PhysicalDevice, surface khr_surface.Surface) ([]common.Rect2D, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDevicePresentRectangles", physicalDevice, surface)
	ret0, _ := ret[0].([]common.Rect2D)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PhysicalDevicePresentRectangles indicates an expected call of PhysicalDevicePresentRectangles.
func (mr *MockExtensionWithKHRSurfaceMockRecorder) PhysicalDevicePresentRectangles(physicalDevice, surface interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDevicePresentRectangles", reflect.TypeOf((*MockExtensionWithKHRSurface)(nil).PhysicalDevicePresentRectangles), physicalDevice, surface)
}

// MockExtensionWithKHRSwapchain is a mock of ExtensionWithKHRSwapchain interface.
type MockExtensionWithKHRSwapchain struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionWithKHRSwapchainMockRecorder
}

// MockExtensionWithKHRSwapchainMockRecorder is the mock recorder for MockExtensionWithKHRSwapchain.
type MockExtensionWithKHRSwapchainMockRecorder struct {
	mock *MockExtensionWithKHRSwapchain
}

// NewMockExtensionWithKHRSwapchain creates a new mock instance.
func NewMockExtensionWithKHRSwapchain(ctrl *gomock.Controller) *MockExtensionWithKHRSwapchain {
	mock := &MockExtensionWithKHRSwapchain{ctrl: ctrl}
	mock.recorder = &MockExtensionWithKHRSwapchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtensionWithKHRSwapchain) EXPECT() *MockExtensionWithKHRSwapchainMockRecorder {
	return m.recorder
}

// AcquireNextImage mocks base method.
func (m *MockExtensionWithKHRSwapchain) AcquireNextImage(device core1_0.Device, o khr_device_group.AcquireNextImageOptions) (int, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireNextImage", device, o)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AcquireNextImage indicates an expected call of AcquireNextImage.
func (mr *MockExtensionWithKHRSwapchainMockRecorder) AcquireNextImage(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireNextImage", reflect.TypeOf((*MockExtensionWithKHRSwapchain)(nil).AcquireNextImage), device, o)
}
