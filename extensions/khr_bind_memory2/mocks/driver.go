// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go

// Package mock_bind_memory2 is a generated GoMock package.
package mock_bind_memory2

import (
	reflect "reflect"

	common "github.com/CannibalVox/VKng/core/common"
	driver "github.com/CannibalVox/VKng/core/driver"
	khr_bind_memory2_driver "github.com/CannibalVox/VKng/extensions/khr_bind_memory2/driver"
	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// VkBindBufferMemory2KHR mocks base method.
func (m *MockDriver) VkBindBufferMemory2KHR(device driver.VkDevice, bindInfoCount driver.Uint32, pBindInfos *khr_bind_memory2_driver.VkBindBufferMemoryInfoKHR) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkBindBufferMemory2KHR", device, bindInfoCount, pBindInfos)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkBindBufferMemory2KHR indicates an expected call of VkBindBufferMemory2KHR.
func (mr *MockDriverMockRecorder) VkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkBindBufferMemory2KHR", reflect.TypeOf((*MockDriver)(nil).VkBindBufferMemory2KHR), device, bindInfoCount, pBindInfos)
}

// VkBindImageMemory2KHR mocks base method.
func (m *MockDriver) VkBindImageMemory2KHR(device driver.VkDevice, bindInfoCount driver.Uint32, pBindInfos *khr_bind_memory2_driver.VkBindImageMemoryInfoKHR) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkBindImageMemory2KHR", device, bindInfoCount, pBindInfos)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkBindImageMemory2KHR indicates an expected call of VkBindImageMemory2KHR.
func (mr *MockDriverMockRecorder) VkBindImageMemory2KHR(device, bindInfoCount, pBindInfos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkBindImageMemory2KHR", reflect.TypeOf((*MockDriver)(nil).VkBindImageMemory2KHR), device, bindInfoCount, pBindInfos)
}
