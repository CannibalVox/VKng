// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	loader "github.com/CannibalVox/VKng/core/loader"
	gomock "github.com/golang/mock/gomock"
)

// MockPipeline is a mock of Pipeline interface.
type MockPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineMockRecorder
}

// MockPipelineMockRecorder is the mock recorder for MockPipeline.
type MockPipelineMockRecorder struct {
	mock *MockPipeline
}

// NewMockPipeline creates a new mock instance.
func NewMockPipeline(ctrl *gomock.Controller) *MockPipeline {
	mock := &MockPipeline{ctrl: ctrl}
	mock.recorder = &MockPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeline) EXPECT() *MockPipelineMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockPipeline) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPipelineMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPipeline)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockPipeline) Handle() loader.VkPipeline {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkPipeline)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockPipelineMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPipeline)(nil).Handle))
}

// MockPipelineLayout is a mock of PipelineLayout interface.
type MockPipelineLayout struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineLayoutMockRecorder
}

// MockPipelineLayoutMockRecorder is the mock recorder for MockPipelineLayout.
type MockPipelineLayoutMockRecorder struct {
	mock *MockPipelineLayout
}

// NewMockPipelineLayout creates a new mock instance.
func NewMockPipelineLayout(ctrl *gomock.Controller) *MockPipelineLayout {
	mock := &MockPipelineLayout{ctrl: ctrl}
	mock.recorder = &MockPipelineLayoutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineLayout) EXPECT() *MockPipelineLayoutMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockPipelineLayout) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPipelineLayoutMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPipelineLayout)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockPipelineLayout) Handle() loader.VkPipelineLayout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkPipelineLayout)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockPipelineLayoutMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPipelineLayout)(nil).Handle))
}
