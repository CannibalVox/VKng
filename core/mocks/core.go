// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	unsafe "unsafe"

	core "github.com/CannibalVox/VKng/core"
	common "github.com/CannibalVox/VKng/core/common"
	gomock "github.com/golang/mock/gomock"
)

// MockBuffer is a mock of Buffer interface.
type MockBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockBufferMockRecorder
}

// MockBufferMockRecorder is the mock recorder for MockBuffer.
type MockBufferMockRecorder struct {
	mock *MockBuffer
}

// NewMockBuffer creates a new mock instance.
func NewMockBuffer(ctrl *gomock.Controller) *MockBuffer {
	mock := &MockBuffer{ctrl: ctrl}
	mock.recorder = &MockBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuffer) EXPECT() *MockBufferMockRecorder {
	return m.recorder
}

// BindBufferMemory mocks base method.
func (m *MockBuffer) BindBufferMemory(memory core.DeviceMemory, offset int) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindBufferMemory", memory, offset)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindBufferMemory indicates an expected call of BindBufferMemory.
func (mr *MockBufferMockRecorder) BindBufferMemory(memory, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindBufferMemory", reflect.TypeOf((*MockBuffer)(nil).BindBufferMemory), memory, offset)
}

// Destroy mocks base method.
func (m *MockBuffer) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockBufferMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockBuffer)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockBuffer) Handle() core.VkBuffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkBuffer)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockBufferMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockBuffer)(nil).Handle))
}

// MemoryRequirements mocks base method.
func (m *MockBuffer) MemoryRequirements() *common.MemoryRequirements {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryRequirements")
	ret0, _ := ret[0].(*common.MemoryRequirements)
	return ret0
}

// MemoryRequirements indicates an expected call of MemoryRequirements.
func (mr *MockBufferMockRecorder) MemoryRequirements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRequirements", reflect.TypeOf((*MockBuffer)(nil).MemoryRequirements))
}

// MockBufferView is a mock of BufferView interface.
type MockBufferView struct {
	ctrl     *gomock.Controller
	recorder *MockBufferViewMockRecorder
}

// MockBufferViewMockRecorder is the mock recorder for MockBufferView.
type MockBufferViewMockRecorder struct {
	mock *MockBufferView
}

// NewMockBufferView creates a new mock instance.
func NewMockBufferView(ctrl *gomock.Controller) *MockBufferView {
	mock := &MockBufferView{ctrl: ctrl}
	mock.recorder = &MockBufferViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBufferView) EXPECT() *MockBufferViewMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockBufferView) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockBufferViewMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockBufferView)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockBufferView) Handle() core.VkBufferView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkBufferView)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockBufferViewMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockBufferView)(nil).Handle))
}

// MockCommandBuffer is a mock of CommandBuffer interface.
type MockCommandBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBufferMockRecorder
}

// MockCommandBufferMockRecorder is the mock recorder for MockCommandBuffer.
type MockCommandBufferMockRecorder struct {
	mock *MockCommandBuffer
}

// NewMockCommandBuffer creates a new mock instance.
func NewMockCommandBuffer(ctrl *gomock.Controller) *MockCommandBuffer {
	mock := &MockCommandBuffer{ctrl: ctrl}
	mock.recorder = &MockCommandBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandBuffer) EXPECT() *MockCommandBufferMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockCommandBuffer) Begin(o *core.BeginOptions) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", o)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockCommandBufferMockRecorder) Begin(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockCommandBuffer)(nil).Begin), o)
}

// CmdBeginQuery mocks base method.
func (m *MockCommandBuffer) CmdBeginQuery(queryPool core.QueryPool, query int, flags common.QueryControlFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdBeginQuery", queryPool, query, flags)
}

// CmdBeginQuery indicates an expected call of CmdBeginQuery.
func (mr *MockCommandBufferMockRecorder) CmdBeginQuery(queryPool, query, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBeginQuery", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBeginQuery), queryPool, query, flags)
}

// CmdBeginRenderPass mocks base method.
func (m *MockCommandBuffer) CmdBeginRenderPass(contents core.SubpassContents, o *core.RenderPassBeginOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBeginRenderPass", contents, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBeginRenderPass indicates an expected call of CmdBeginRenderPass.
func (mr *MockCommandBufferMockRecorder) CmdBeginRenderPass(contents, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBeginRenderPass", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBeginRenderPass), contents, o)
}

// CmdBindDescriptorSets mocks base method.
func (m *MockCommandBuffer) CmdBindDescriptorSets(bindPoint common.PipelineBindPoint, layout core.PipelineLayout, sets []core.DescriptorSet, dynamicOffsets []int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdBindDescriptorSets", bindPoint, layout, sets, dynamicOffsets)
}

// CmdBindDescriptorSets indicates an expected call of CmdBindDescriptorSets.
func (mr *MockCommandBufferMockRecorder) CmdBindDescriptorSets(bindPoint, layout, sets, dynamicOffsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindDescriptorSets", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBindDescriptorSets), bindPoint, layout, sets, dynamicOffsets)
}

// CmdBindIndexBuffer mocks base method.
func (m *MockCommandBuffer) CmdBindIndexBuffer(buffer core.Buffer, offset int, indexType common.IndexType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdBindIndexBuffer", buffer, offset, indexType)
}

// CmdBindIndexBuffer indicates an expected call of CmdBindIndexBuffer.
func (mr *MockCommandBufferMockRecorder) CmdBindIndexBuffer(buffer, offset, indexType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindIndexBuffer", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBindIndexBuffer), buffer, offset, indexType)
}

// CmdBindPipeline mocks base method.
func (m *MockCommandBuffer) CmdBindPipeline(bindPoint common.PipelineBindPoint, pipeline core.Pipeline) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdBindPipeline", bindPoint, pipeline)
}

// CmdBindPipeline indicates an expected call of CmdBindPipeline.
func (mr *MockCommandBufferMockRecorder) CmdBindPipeline(bindPoint, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindPipeline", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBindPipeline), bindPoint, pipeline)
}

// CmdBindVertexBuffers mocks base method.
func (m *MockCommandBuffer) CmdBindVertexBuffers(buffers []core.Buffer, bufferOffsets []int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdBindVertexBuffers", buffers, bufferOffsets)
}

// CmdBindVertexBuffers indicates an expected call of CmdBindVertexBuffers.
func (mr *MockCommandBufferMockRecorder) CmdBindVertexBuffers(buffers, bufferOffsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindVertexBuffers", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBindVertexBuffers), buffers, bufferOffsets)
}

// CmdBlitImage mocks base method.
func (m *MockCommandBuffer) CmdBlitImage(sourceImage core.Image, sourceImageLayout common.ImageLayout, destinationImage core.Image, destinationImageLayout common.ImageLayout, regions []*core.ImageBlit, filter common.Filter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBlitImage", sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regions, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBlitImage indicates an expected call of CmdBlitImage.
func (mr *MockCommandBufferMockRecorder) CmdBlitImage(sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regions, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBlitImage", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBlitImage), sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regions, filter)
}

// CmdClearAttachments mocks base method.
func (m *MockCommandBuffer) CmdClearAttachments(attachments []core.ClearAttachment, rects []core.ClearRect) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdClearAttachments", attachments, rects)
}

// CmdClearAttachments indicates an expected call of CmdClearAttachments.
func (mr *MockCommandBufferMockRecorder) CmdClearAttachments(attachments, rects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdClearAttachments", reflect.TypeOf((*MockCommandBuffer)(nil).CmdClearAttachments), attachments, rects)
}

// CmdClearColorImage mocks base method.
func (m *MockCommandBuffer) CmdClearColorImage(image core.Image, imageLayout common.ImageLayout, color core.ClearColorValue, ranges []common.ImageSubresourceRange) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdClearColorImage", image, imageLayout, color, ranges)
}

// CmdClearColorImage indicates an expected call of CmdClearColorImage.
func (mr *MockCommandBufferMockRecorder) CmdClearColorImage(image, imageLayout, color, ranges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdClearColorImage", reflect.TypeOf((*MockCommandBuffer)(nil).CmdClearColorImage), image, imageLayout, color, ranges)
}

// CmdClearDepthStencilImage mocks base method.
func (m *MockCommandBuffer) CmdClearDepthStencilImage(image core.Image, imageLayout common.ImageLayout, depthStencil *core.ClearValueDepthStencil, ranges []common.ImageSubresourceRange) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdClearDepthStencilImage", image, imageLayout, depthStencil, ranges)
}

// CmdClearDepthStencilImage indicates an expected call of CmdClearDepthStencilImage.
func (mr *MockCommandBufferMockRecorder) CmdClearDepthStencilImage(image, imageLayout, depthStencil, ranges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdClearDepthStencilImage", reflect.TypeOf((*MockCommandBuffer)(nil).CmdClearDepthStencilImage), image, imageLayout, depthStencil, ranges)
}

// CmdCopyBuffer mocks base method.
func (m *MockCommandBuffer) CmdCopyBuffer(srcBuffer, dstBuffer core.Buffer, copyRegions []core.BufferCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdCopyBuffer", srcBuffer, dstBuffer, copyRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdCopyBuffer indicates an expected call of CmdCopyBuffer.
func (mr *MockCommandBufferMockRecorder) CmdCopyBuffer(srcBuffer, dstBuffer, copyRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdCopyBuffer", reflect.TypeOf((*MockCommandBuffer)(nil).CmdCopyBuffer), srcBuffer, dstBuffer, copyRegions)
}

// CmdCopyBufferToImage mocks base method.
func (m *MockCommandBuffer) CmdCopyBufferToImage(buffer core.Buffer, image core.Image, layout common.ImageLayout, regions []*core.BufferImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdCopyBufferToImage", buffer, image, layout, regions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdCopyBufferToImage indicates an expected call of CmdCopyBufferToImage.
func (mr *MockCommandBufferMockRecorder) CmdCopyBufferToImage(buffer, image, layout, regions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdCopyBufferToImage", reflect.TypeOf((*MockCommandBuffer)(nil).CmdCopyBufferToImage), buffer, image, layout, regions)
}

// CmdCopyImage mocks base method.
func (m *MockCommandBuffer) CmdCopyImage(srcImage core.Image, srcImageLayout common.ImageLayout, dstImage core.Image, dstImageLayout common.ImageLayout, regions []core.ImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdCopyImage", srcImage, srcImageLayout, dstImage, dstImageLayout, regions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdCopyImage indicates an expected call of CmdCopyImage.
func (mr *MockCommandBufferMockRecorder) CmdCopyImage(srcImage, srcImageLayout, dstImage, dstImageLayout, regions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdCopyImage", reflect.TypeOf((*MockCommandBuffer)(nil).CmdCopyImage), srcImage, srcImageLayout, dstImage, dstImageLayout, regions)
}

// CmdCopyImageToBuffer mocks base method.
func (m *MockCommandBuffer) CmdCopyImageToBuffer(srcImage core.Image, srcImageLayout common.ImageLayout, dstBuffer core.Buffer, regions []core.BufferImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdCopyImageToBuffer", srcImage, srcImageLayout, dstBuffer, regions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdCopyImageToBuffer indicates an expected call of CmdCopyImageToBuffer.
func (mr *MockCommandBufferMockRecorder) CmdCopyImageToBuffer(srcImage, srcImageLayout, dstBuffer, regions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdCopyImageToBuffer", reflect.TypeOf((*MockCommandBuffer)(nil).CmdCopyImageToBuffer), srcImage, srcImageLayout, dstBuffer, regions)
}

// CmdCopyQueryPoolResults mocks base method.
func (m *MockCommandBuffer) CmdCopyQueryPoolResults(queryPool core.QueryPool, firstQuery, queryCount int, dstBuffer core.Buffer, dstOffset, stride int, flags common.QueryResultFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdCopyQueryPoolResults", queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags)
}

// CmdCopyQueryPoolResults indicates an expected call of CmdCopyQueryPoolResults.
func (mr *MockCommandBufferMockRecorder) CmdCopyQueryPoolResults(queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdCopyQueryPoolResults", reflect.TypeOf((*MockCommandBuffer)(nil).CmdCopyQueryPoolResults), queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags)
}

// CmdDispatch mocks base method.
func (m *MockCommandBuffer) CmdDispatch(groupCountX, groupCountY, groupCountZ int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDispatch", groupCountX, groupCountY, groupCountZ)
}

// CmdDispatch indicates an expected call of CmdDispatch.
func (mr *MockCommandBufferMockRecorder) CmdDispatch(groupCountX, groupCountY, groupCountZ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDispatch", reflect.TypeOf((*MockCommandBuffer)(nil).CmdDispatch), groupCountX, groupCountY, groupCountZ)
}

// CmdDispatchIndirect mocks base method.
func (m *MockCommandBuffer) CmdDispatchIndirect(buffer core.Buffer, offset int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDispatchIndirect", buffer, offset)
}

// CmdDispatchIndirect indicates an expected call of CmdDispatchIndirect.
func (mr *MockCommandBufferMockRecorder) CmdDispatchIndirect(buffer, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDispatchIndirect", reflect.TypeOf((*MockCommandBuffer)(nil).CmdDispatchIndirect), buffer, offset)
}

// CmdDraw mocks base method.
func (m *MockCommandBuffer) CmdDraw(vertexCount, instanceCount int, firstVertex, firstInstance uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDraw", vertexCount, instanceCount, firstVertex, firstInstance)
}

// CmdDraw indicates an expected call of CmdDraw.
func (mr *MockCommandBufferMockRecorder) CmdDraw(vertexCount, instanceCount, firstVertex, firstInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDraw", reflect.TypeOf((*MockCommandBuffer)(nil).CmdDraw), vertexCount, instanceCount, firstVertex, firstInstance)
}

// CmdDrawIndexed mocks base method.
func (m *MockCommandBuffer) CmdDrawIndexed(indexCount, instanceCount int, firstIndex uint32, vertexOffset int, firstInstance uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDrawIndexed", indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)
}

// CmdDrawIndexed indicates an expected call of CmdDrawIndexed.
func (mr *MockCommandBufferMockRecorder) CmdDrawIndexed(indexCount, instanceCount, firstIndex, vertexOffset, firstInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDrawIndexed", reflect.TypeOf((*MockCommandBuffer)(nil).CmdDrawIndexed), indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)
}

// CmdDrawIndexedIndirect mocks base method.
func (m *MockCommandBuffer) CmdDrawIndexedIndirect(buffer core.Buffer, offset, drawCount, stride int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDrawIndexedIndirect", buffer, offset, drawCount, stride)
}

// CmdDrawIndexedIndirect indicates an expected call of CmdDrawIndexedIndirect.
func (mr *MockCommandBufferMockRecorder) CmdDrawIndexedIndirect(buffer, offset, drawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDrawIndexedIndirect", reflect.TypeOf((*MockCommandBuffer)(nil).CmdDrawIndexedIndirect), buffer, offset, drawCount, stride)
}

// CmdDrawIndirect mocks base method.
func (m *MockCommandBuffer) CmdDrawIndirect(buffer core.Buffer, offset, drawCount, stride int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDrawIndirect", buffer, offset, drawCount, stride)
}

// CmdDrawIndirect indicates an expected call of CmdDrawIndirect.
func (mr *MockCommandBufferMockRecorder) CmdDrawIndirect(buffer, offset, drawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDrawIndirect", reflect.TypeOf((*MockCommandBuffer)(nil).CmdDrawIndirect), buffer, offset, drawCount, stride)
}

// CmdEndQuery mocks base method.
func (m *MockCommandBuffer) CmdEndQuery(queryPool core.QueryPool, query int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdEndQuery", queryPool, query)
}

// CmdEndQuery indicates an expected call of CmdEndQuery.
func (mr *MockCommandBufferMockRecorder) CmdEndQuery(queryPool, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdEndQuery", reflect.TypeOf((*MockCommandBuffer)(nil).CmdEndQuery), queryPool, query)
}

// CmdEndRenderPass mocks base method.
func (m *MockCommandBuffer) CmdEndRenderPass() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdEndRenderPass")
}

// CmdEndRenderPass indicates an expected call of CmdEndRenderPass.
func (mr *MockCommandBufferMockRecorder) CmdEndRenderPass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdEndRenderPass", reflect.TypeOf((*MockCommandBuffer)(nil).CmdEndRenderPass))
}

// CmdExecuteCommands mocks base method.
func (m *MockCommandBuffer) CmdExecuteCommands(commandBuffers []core.CommandBuffer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdExecuteCommands", commandBuffers)
}

// CmdExecuteCommands indicates an expected call of CmdExecuteCommands.
func (mr *MockCommandBufferMockRecorder) CmdExecuteCommands(commandBuffers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdExecuteCommands", reflect.TypeOf((*MockCommandBuffer)(nil).CmdExecuteCommands), commandBuffers)
}

// CmdFillBuffer mocks base method.
func (m *MockCommandBuffer) CmdFillBuffer(dstBuffer core.Buffer, dstOffset, size int, data uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdFillBuffer", dstBuffer, dstOffset, size, data)
}

// CmdFillBuffer indicates an expected call of CmdFillBuffer.
func (mr *MockCommandBufferMockRecorder) CmdFillBuffer(dstBuffer, dstOffset, size, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdFillBuffer", reflect.TypeOf((*MockCommandBuffer)(nil).CmdFillBuffer), dstBuffer, dstOffset, size, data)
}

// CmdNextSubpass mocks base method.
func (m *MockCommandBuffer) CmdNextSubpass(contents core.SubpassContents) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdNextSubpass", contents)
}

// CmdNextSubpass indicates an expected call of CmdNextSubpass.
func (mr *MockCommandBufferMockRecorder) CmdNextSubpass(contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdNextSubpass", reflect.TypeOf((*MockCommandBuffer)(nil).CmdNextSubpass), contents)
}

// CmdPipelineBarrier mocks base method.
func (m *MockCommandBuffer) CmdPipelineBarrier(srcStageMask, dstStageMask common.PipelineStages, dependencies common.DependencyFlags, memoryBarriers []*core.MemoryBarrierOptions, bufferMemoryBarriers []*core.BufferMemoryBarrierOptions, imageMemoryBarriers []*core.ImageMemoryBarrierOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdPipelineBarrier", srcStageMask, dstStageMask, dependencies, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdPipelineBarrier indicates an expected call of CmdPipelineBarrier.
func (mr *MockCommandBufferMockRecorder) CmdPipelineBarrier(srcStageMask, dstStageMask, dependencies, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdPipelineBarrier", reflect.TypeOf((*MockCommandBuffer)(nil).CmdPipelineBarrier), srcStageMask, dstStageMask, dependencies, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers)
}

// CmdPushConstants mocks base method.
func (m *MockCommandBuffer) CmdPushConstants(layout core.PipelineLayout, stageFlags common.ShaderStages, offset int, valueBytes []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdPushConstants", layout, stageFlags, offset, valueBytes)
}

// CmdPushConstants indicates an expected call of CmdPushConstants.
func (mr *MockCommandBufferMockRecorder) CmdPushConstants(layout, stageFlags, offset, valueBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdPushConstants", reflect.TypeOf((*MockCommandBuffer)(nil).CmdPushConstants), layout, stageFlags, offset, valueBytes)
}

// CmdResetEvent mocks base method.
func (m *MockCommandBuffer) CmdResetEvent(event core.Event, stageMask common.PipelineStages) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdResetEvent", event, stageMask)
}

// CmdResetEvent indicates an expected call of CmdResetEvent.
func (mr *MockCommandBufferMockRecorder) CmdResetEvent(event, stageMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdResetEvent", reflect.TypeOf((*MockCommandBuffer)(nil).CmdResetEvent), event, stageMask)
}

// CmdResetQueryPool mocks base method.
func (m *MockCommandBuffer) CmdResetQueryPool(queryPool core.QueryPool, startQuery, queryCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdResetQueryPool", queryPool, startQuery, queryCount)
}

// CmdResetQueryPool indicates an expected call of CmdResetQueryPool.
func (mr *MockCommandBufferMockRecorder) CmdResetQueryPool(queryPool, startQuery, queryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdResetQueryPool", reflect.TypeOf((*MockCommandBuffer)(nil).CmdResetQueryPool), queryPool, startQuery, queryCount)
}

// CmdResolveImage mocks base method.
func (m *MockCommandBuffer) CmdResolveImage(srcImage core.Image, srcImageLayout common.ImageLayout, dstImage core.Image, dstImageLayout common.ImageLayout, regions []core.ImageResolve) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdResolveImage", srcImage, srcImageLayout, dstImage, dstImageLayout, regions)
}

// CmdResolveImage indicates an expected call of CmdResolveImage.
func (mr *MockCommandBufferMockRecorder) CmdResolveImage(srcImage, srcImageLayout, dstImage, dstImageLayout, regions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdResolveImage", reflect.TypeOf((*MockCommandBuffer)(nil).CmdResolveImage), srcImage, srcImageLayout, dstImage, dstImageLayout, regions)
}

// CmdSetBlendConstants mocks base method.
func (m *MockCommandBuffer) CmdSetBlendConstants(blendConstants [4]float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetBlendConstants", blendConstants)
}

// CmdSetBlendConstants indicates an expected call of CmdSetBlendConstants.
func (mr *MockCommandBufferMockRecorder) CmdSetBlendConstants(blendConstants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetBlendConstants", reflect.TypeOf((*MockCommandBuffer)(nil).CmdSetBlendConstants), blendConstants)
}

// CmdSetDepthBias mocks base method.
func (m *MockCommandBuffer) CmdSetDepthBias(depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetDepthBias", depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor)
}

// CmdSetDepthBias indicates an expected call of CmdSetDepthBias.
func (mr *MockCommandBufferMockRecorder) CmdSetDepthBias(depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetDepthBias", reflect.TypeOf((*MockCommandBuffer)(nil).CmdSetDepthBias), depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor)
}

// CmdSetDepthBounds mocks base method.
func (m *MockCommandBuffer) CmdSetDepthBounds(min, max float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetDepthBounds", min, max)
}

// CmdSetDepthBounds indicates an expected call of CmdSetDepthBounds.
func (mr *MockCommandBufferMockRecorder) CmdSetDepthBounds(min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetDepthBounds", reflect.TypeOf((*MockCommandBuffer)(nil).CmdSetDepthBounds), min, max)
}

// CmdSetEvent mocks base method.
func (m *MockCommandBuffer) CmdSetEvent(event core.Event, stageMask common.PipelineStages) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetEvent", event, stageMask)
}

// CmdSetEvent indicates an expected call of CmdSetEvent.
func (mr *MockCommandBufferMockRecorder) CmdSetEvent(event, stageMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetEvent", reflect.TypeOf((*MockCommandBuffer)(nil).CmdSetEvent), event, stageMask)
}

// CmdSetLineWidth mocks base method.
func (m *MockCommandBuffer) CmdSetLineWidth(lineWidth float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetLineWidth", lineWidth)
}

// CmdSetLineWidth indicates an expected call of CmdSetLineWidth.
func (mr *MockCommandBufferMockRecorder) CmdSetLineWidth(lineWidth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetLineWidth", reflect.TypeOf((*MockCommandBuffer)(nil).CmdSetLineWidth), lineWidth)
}

// CmdSetScissor mocks base method.
func (m *MockCommandBuffer) CmdSetScissor(scissors []common.Rect2D) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetScissor", scissors)
}

// CmdSetScissor indicates an expected call of CmdSetScissor.
func (mr *MockCommandBufferMockRecorder) CmdSetScissor(scissors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetScissor", reflect.TypeOf((*MockCommandBuffer)(nil).CmdSetScissor), scissors)
}

// CmdSetStencilCompareMask mocks base method.
func (m *MockCommandBuffer) CmdSetStencilCompareMask(faceMask common.StencilFaces, compareMask uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetStencilCompareMask", faceMask, compareMask)
}

// CmdSetStencilCompareMask indicates an expected call of CmdSetStencilCompareMask.
func (mr *MockCommandBufferMockRecorder) CmdSetStencilCompareMask(faceMask, compareMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetStencilCompareMask", reflect.TypeOf((*MockCommandBuffer)(nil).CmdSetStencilCompareMask), faceMask, compareMask)
}

// CmdSetStencilReference mocks base method.
func (m *MockCommandBuffer) CmdSetStencilReference(faceMask common.StencilFaces, reference uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetStencilReference", faceMask, reference)
}

// CmdSetStencilReference indicates an expected call of CmdSetStencilReference.
func (mr *MockCommandBufferMockRecorder) CmdSetStencilReference(faceMask, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetStencilReference", reflect.TypeOf((*MockCommandBuffer)(nil).CmdSetStencilReference), faceMask, reference)
}

// CmdSetStencilWriteMask mocks base method.
func (m *MockCommandBuffer) CmdSetStencilWriteMask(faceMask common.StencilFaces, writeMask uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetStencilWriteMask", faceMask, writeMask)
}

// CmdSetStencilWriteMask indicates an expected call of CmdSetStencilWriteMask.
func (mr *MockCommandBufferMockRecorder) CmdSetStencilWriteMask(faceMask, writeMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetStencilWriteMask", reflect.TypeOf((*MockCommandBuffer)(nil).CmdSetStencilWriteMask), faceMask, writeMask)
}

// CmdSetViewport mocks base method.
func (m *MockCommandBuffer) CmdSetViewport(viewports []common.Viewport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetViewport", viewports)
}

// CmdSetViewport indicates an expected call of CmdSetViewport.
func (mr *MockCommandBufferMockRecorder) CmdSetViewport(viewports interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetViewport", reflect.TypeOf((*MockCommandBuffer)(nil).CmdSetViewport), viewports)
}

// CmdUpdateBuffer mocks base method.
func (m *MockCommandBuffer) CmdUpdateBuffer(dstBuffer core.Buffer, dstOffset, dataSize int, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdUpdateBuffer", dstBuffer, dstOffset, dataSize, data)
}

// CmdUpdateBuffer indicates an expected call of CmdUpdateBuffer.
func (mr *MockCommandBufferMockRecorder) CmdUpdateBuffer(dstBuffer, dstOffset, dataSize, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdUpdateBuffer", reflect.TypeOf((*MockCommandBuffer)(nil).CmdUpdateBuffer), dstBuffer, dstOffset, dataSize, data)
}

// CmdWaitEvents mocks base method.
func (m *MockCommandBuffer) CmdWaitEvents(events []core.Event, srcStageMask, dstStageMask common.PipelineStages, memoryBarriers []*core.MemoryBarrierOptions, bufferMemoryBarriers []*core.BufferMemoryBarrierOptions, imageMemoryBarriers []*core.ImageMemoryBarrierOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdWaitEvents", events, srcStageMask, dstStageMask, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdWaitEvents indicates an expected call of CmdWaitEvents.
func (mr *MockCommandBufferMockRecorder) CmdWaitEvents(events, srcStageMask, dstStageMask, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdWaitEvents", reflect.TypeOf((*MockCommandBuffer)(nil).CmdWaitEvents), events, srcStageMask, dstStageMask, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers)
}

// CmdWriteTimestamp mocks base method.
func (m *MockCommandBuffer) CmdWriteTimestamp(pipelineStage common.PipelineStages, queryPool core.QueryPool, query int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdWriteTimestamp", pipelineStage, queryPool, query)
}

// CmdWriteTimestamp indicates an expected call of CmdWriteTimestamp.
func (mr *MockCommandBufferMockRecorder) CmdWriteTimestamp(pipelineStage, queryPool, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdWriteTimestamp", reflect.TypeOf((*MockCommandBuffer)(nil).CmdWriteTimestamp), pipelineStage, queryPool, query)
}

// End mocks base method.
func (m *MockCommandBuffer) End() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "End")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// End indicates an expected call of End.
func (mr *MockCommandBufferMockRecorder) End() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockCommandBuffer)(nil).End))
}

// Handle mocks base method.
func (m *MockCommandBuffer) Handle() core.VkCommandBuffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkCommandBuffer)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockCommandBufferMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCommandBuffer)(nil).Handle))
}

// Reset mocks base method.
func (m *MockCommandBuffer) Reset(flags core.CommandBufferResetFlags) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", flags)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *MockCommandBufferMockRecorder) Reset(flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockCommandBuffer)(nil).Reset), flags)
}

// MockCommandPool is a mock of CommandPool interface.
type MockCommandPool struct {
	ctrl     *gomock.Controller
	recorder *MockCommandPoolMockRecorder
}

// MockCommandPoolMockRecorder is the mock recorder for MockCommandPool.
type MockCommandPoolMockRecorder struct {
	mock *MockCommandPool
}

// NewMockCommandPool creates a new mock instance.
func NewMockCommandPool(ctrl *gomock.Controller) *MockCommandPool {
	mock := &MockCommandPool{ctrl: ctrl}
	mock.recorder = &MockCommandPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandPool) EXPECT() *MockCommandPoolMockRecorder {
	return m.recorder
}

// AllocateCommandBuffers mocks base method.
func (m *MockCommandPool) AllocateCommandBuffers(o *core.CommandBufferOptions) ([]core.CommandBuffer, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateCommandBuffers", o)
	ret0, _ := ret[0].([]core.CommandBuffer)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateCommandBuffers indicates an expected call of AllocateCommandBuffers.
func (mr *MockCommandPoolMockRecorder) AllocateCommandBuffers(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateCommandBuffers", reflect.TypeOf((*MockCommandPool)(nil).AllocateCommandBuffers), o)
}

// Destroy mocks base method.
func (m *MockCommandPool) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockCommandPoolMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockCommandPool)(nil).Destroy))
}

// FreeCommandBuffers mocks base method.
func (m *MockCommandPool) FreeCommandBuffers(buffers []core.CommandBuffer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FreeCommandBuffers", buffers)
}

// FreeCommandBuffers indicates an expected call of FreeCommandBuffers.
func (mr *MockCommandPoolMockRecorder) FreeCommandBuffers(buffers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeCommandBuffers", reflect.TypeOf((*MockCommandPool)(nil).FreeCommandBuffers), buffers)
}

// Handle mocks base method.
func (m *MockCommandPool) Handle() core.VkCommandPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkCommandPool)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockCommandPoolMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCommandPool)(nil).Handle))
}

// Reset mocks base method.
func (m *MockCommandPool) Reset(flags core.CommandPoolResetFlags) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", flags)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *MockCommandPoolMockRecorder) Reset(flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockCommandPool)(nil).Reset), flags)
}

// MockDescriptorPool is a mock of DescriptorPool interface.
type MockDescriptorPool struct {
	ctrl     *gomock.Controller
	recorder *MockDescriptorPoolMockRecorder
}

// MockDescriptorPoolMockRecorder is the mock recorder for MockDescriptorPool.
type MockDescriptorPoolMockRecorder struct {
	mock *MockDescriptorPool
}

// NewMockDescriptorPool creates a new mock instance.
func NewMockDescriptorPool(ctrl *gomock.Controller) *MockDescriptorPool {
	mock := &MockDescriptorPool{ctrl: ctrl}
	mock.recorder = &MockDescriptorPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriptorPool) EXPECT() *MockDescriptorPoolMockRecorder {
	return m.recorder
}

// AllocateDescriptorSets mocks base method.
func (m *MockDescriptorPool) AllocateDescriptorSets(o *core.DescriptorSetOptions) ([]core.DescriptorSet, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateDescriptorSets", o)
	ret0, _ := ret[0].([]core.DescriptorSet)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateDescriptorSets indicates an expected call of AllocateDescriptorSets.
func (mr *MockDescriptorPoolMockRecorder) AllocateDescriptorSets(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateDescriptorSets", reflect.TypeOf((*MockDescriptorPool)(nil).AllocateDescriptorSets), o)
}

// Destroy mocks base method.
func (m *MockDescriptorPool) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDescriptorPoolMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDescriptorPool)(nil).Destroy))
}

// FreeDescriptorSets mocks base method.
func (m *MockDescriptorPool) FreeDescriptorSets(sets []core.DescriptorSet) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeDescriptorSets", sets)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FreeDescriptorSets indicates an expected call of FreeDescriptorSets.
func (mr *MockDescriptorPoolMockRecorder) FreeDescriptorSets(sets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeDescriptorSets", reflect.TypeOf((*MockDescriptorPool)(nil).FreeDescriptorSets), sets)
}

// Handle mocks base method.
func (m *MockDescriptorPool) Handle() core.VkDescriptorPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkDescriptorPool)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDescriptorPoolMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDescriptorPool)(nil).Handle))
}

// Reset mocks base method.
func (m *MockDescriptorPool) Reset(flags core.DescriptorPoolResetFlags) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", flags)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *MockDescriptorPoolMockRecorder) Reset(flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockDescriptorPool)(nil).Reset), flags)
}

// MockDescriptorSet is a mock of DescriptorSet interface.
type MockDescriptorSet struct {
	ctrl     *gomock.Controller
	recorder *MockDescriptorSetMockRecorder
}

// MockDescriptorSetMockRecorder is the mock recorder for MockDescriptorSet.
type MockDescriptorSetMockRecorder struct {
	mock *MockDescriptorSet
}

// NewMockDescriptorSet creates a new mock instance.
func NewMockDescriptorSet(ctrl *gomock.Controller) *MockDescriptorSet {
	mock := &MockDescriptorSet{ctrl: ctrl}
	mock.recorder = &MockDescriptorSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriptorSet) EXPECT() *MockDescriptorSetMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockDescriptorSet) Handle() core.VkDescriptorSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkDescriptorSet)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDescriptorSetMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDescriptorSet)(nil).Handle))
}

// MockDescriptorSetLayout is a mock of DescriptorSetLayout interface.
type MockDescriptorSetLayout struct {
	ctrl     *gomock.Controller
	recorder *MockDescriptorSetLayoutMockRecorder
}

// MockDescriptorSetLayoutMockRecorder is the mock recorder for MockDescriptorSetLayout.
type MockDescriptorSetLayoutMockRecorder struct {
	mock *MockDescriptorSetLayout
}

// NewMockDescriptorSetLayout creates a new mock instance.
func NewMockDescriptorSetLayout(ctrl *gomock.Controller) *MockDescriptorSetLayout {
	mock := &MockDescriptorSetLayout{ctrl: ctrl}
	mock.recorder = &MockDescriptorSetLayoutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriptorSetLayout) EXPECT() *MockDescriptorSetLayoutMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockDescriptorSetLayout) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDescriptorSetLayoutMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDescriptorSetLayout)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockDescriptorSetLayout) Handle() core.VkDescriptorSetLayout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkDescriptorSetLayout)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDescriptorSetLayoutMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDescriptorSetLayout)(nil).Handle))
}

// MockDeviceMemory is a mock of DeviceMemory interface.
type MockDeviceMemory struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMemoryMockRecorder
}

// MockDeviceMemoryMockRecorder is the mock recorder for MockDeviceMemory.
type MockDeviceMemoryMockRecorder struct {
	mock *MockDeviceMemory
}

// NewMockDeviceMemory creates a new mock instance.
func NewMockDeviceMemory(ctrl *gomock.Controller) *MockDeviceMemory {
	mock := &MockDeviceMemory{ctrl: ctrl}
	mock.recorder = &MockDeviceMemoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceMemory) EXPECT() *MockDeviceMemoryMockRecorder {
	return m.recorder
}

// Commitment mocks base method.
func (m *MockDeviceMemory) Commitment() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commitment")
	ret0, _ := ret[0].(int)
	return ret0
}

// Commitment indicates an expected call of Commitment.
func (mr *MockDeviceMemoryMockRecorder) Commitment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commitment", reflect.TypeOf((*MockDeviceMemory)(nil).Commitment))
}

// Flush mocks base method.
func (m *MockDeviceMemory) Flush() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Flush indicates an expected call of Flush.
func (mr *MockDeviceMemoryMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockDeviceMemory)(nil).Flush))
}

// Handle mocks base method.
func (m *MockDeviceMemory) Handle() core.VkDeviceMemory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkDeviceMemory)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDeviceMemoryMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDeviceMemory)(nil).Handle))
}

// Invalidate mocks base method.
func (m *MockDeviceMemory) Invalidate() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invalidate")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockDeviceMemoryMockRecorder) Invalidate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockDeviceMemory)(nil).Invalidate))
}

// MapMemory mocks base method.
func (m *MockDeviceMemory) MapMemory(offset, size int, flags core.MemoryMapFlags) (unsafe.Pointer, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapMemory", offset, size, flags)
	ret0, _ := ret[0].(unsafe.Pointer)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MapMemory indicates an expected call of MapMemory.
func (mr *MockDeviceMemoryMockRecorder) MapMemory(offset, size, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapMemory", reflect.TypeOf((*MockDeviceMemory)(nil).MapMemory), offset, size, flags)
}

// UnmapMemory mocks base method.
func (m *MockDeviceMemory) UnmapMemory() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnmapMemory")
}

// UnmapMemory indicates an expected call of UnmapMemory.
func (mr *MockDeviceMemoryMockRecorder) UnmapMemory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmapMemory", reflect.TypeOf((*MockDeviceMemory)(nil).UnmapMemory))
}

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// AllocateMemory mocks base method.
func (m *MockDevice) AllocateMemory(allocationCallbacks *core.AllocationCallbacks, o *core.DeviceMemoryOptions) (core.DeviceMemory, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateMemory", allocationCallbacks, o)
	ret0, _ := ret[0].(core.DeviceMemory)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateMemory indicates an expected call of AllocateMemory.
func (mr *MockDeviceMockRecorder) AllocateMemory(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateMemory", reflect.TypeOf((*MockDevice)(nil).AllocateMemory), allocationCallbacks, o)
}

// Destroy mocks base method.
func (m *MockDevice) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDeviceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDevice)(nil).Destroy))
}

// Driver mocks base method.
func (m *MockDevice) Driver() core.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(core.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockDeviceMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockDevice)(nil).Driver))
}

// FlushMappedMemoryRanges mocks base method.
func (m *MockDevice) FlushMappedMemoryRanges(ranges []*core.MappedMemoryRange) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushMappedMemoryRanges", ranges)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushMappedMemoryRanges indicates an expected call of FlushMappedMemoryRanges.
func (mr *MockDeviceMockRecorder) FlushMappedMemoryRanges(ranges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushMappedMemoryRanges", reflect.TypeOf((*MockDevice)(nil).FlushMappedMemoryRanges), ranges)
}

// FreeMemory mocks base method.
func (m *MockDevice) FreeMemory(memory core.DeviceMemory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FreeMemory", memory)
}

// FreeMemory indicates an expected call of FreeMemory.
func (mr *MockDeviceMockRecorder) FreeMemory(memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeMemory", reflect.TypeOf((*MockDevice)(nil).FreeMemory), memory)
}

// GetQueue mocks base method.
func (m *MockDevice) GetQueue(queueFamilyIndex, queueIndex int) core.Queue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueue", queueFamilyIndex, queueIndex)
	ret0, _ := ret[0].(core.Queue)
	return ret0
}

// GetQueue indicates an expected call of GetQueue.
func (mr *MockDeviceMockRecorder) GetQueue(queueFamilyIndex, queueIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue", reflect.TypeOf((*MockDevice)(nil).GetQueue), queueFamilyIndex, queueIndex)
}

// Handle mocks base method.
func (m *MockDevice) Handle() core.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkDevice)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDeviceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDevice)(nil).Handle))
}

// InvalidateMappedMemoryRanges mocks base method.
func (m *MockDevice) InvalidateMappedMemoryRanges(ranges []*core.MappedMemoryRange) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateMappedMemoryRanges", ranges)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateMappedMemoryRanges indicates an expected call of InvalidateMappedMemoryRanges.
func (mr *MockDeviceMockRecorder) InvalidateMappedMemoryRanges(ranges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateMappedMemoryRanges", reflect.TypeOf((*MockDevice)(nil).InvalidateMappedMemoryRanges), ranges)
}

// ResetFences mocks base method.
func (m *MockDevice) ResetFences(fences []core.Fence) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetFences", fences)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetFences indicates an expected call of ResetFences.
func (mr *MockDeviceMockRecorder) ResetFences(fences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFences", reflect.TypeOf((*MockDevice)(nil).ResetFences), fences)
}

// UpdateDescriptorSets mocks base method.
func (m *MockDevice) UpdateDescriptorSets(writes []core.WriteDescriptorSetOptions, copies []core.CopyDescriptorSetOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDescriptorSets", writes, copies)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDescriptorSets indicates an expected call of UpdateDescriptorSets.
func (mr *MockDeviceMockRecorder) UpdateDescriptorSets(writes, copies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescriptorSets", reflect.TypeOf((*MockDevice)(nil).UpdateDescriptorSets), writes, copies)
}

// WaitForFences mocks base method.
func (m *MockDevice) WaitForFences(waitForAll bool, timeout time.Duration, fences []core.Fence) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForFences", waitForAll, timeout, fences)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForFences indicates an expected call of WaitForFences.
func (mr *MockDeviceMockRecorder) WaitForFences(waitForAll, timeout, fences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForFences", reflect.TypeOf((*MockDevice)(nil).WaitForFences), waitForAll, timeout, fences)
}

// WaitForIdle mocks base method.
func (m *MockDevice) WaitForIdle() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForIdle")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForIdle indicates an expected call of WaitForIdle.
func (mr *MockDeviceMockRecorder) WaitForIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForIdle", reflect.TypeOf((*MockDevice)(nil).WaitForIdle))
}

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockEvent) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockEventMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockEvent)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockEvent) Handle() core.VkEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkEvent)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockEventMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockEvent)(nil).Handle))
}

// Reset mocks base method.
func (m *MockEvent) Reset() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *MockEventMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockEvent)(nil).Reset))
}

// Set mocks base method.
func (m *MockEvent) Set() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockEventMockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockEvent)(nil).Set))
}

// Status mocks base method.
func (m *MockEvent) Status() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockEventMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockEvent)(nil).Status))
}

// MockFence is a mock of Fence interface.
type MockFence struct {
	ctrl     *gomock.Controller
	recorder *MockFenceMockRecorder
}

// MockFenceMockRecorder is the mock recorder for MockFence.
type MockFenceMockRecorder struct {
	mock *MockFence
}

// NewMockFence creates a new mock instance.
func NewMockFence(ctrl *gomock.Controller) *MockFence {
	mock := &MockFence{ctrl: ctrl}
	mock.recorder = &MockFenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFence) EXPECT() *MockFenceMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockFence) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockFenceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockFence)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockFence) Handle() core.VkFence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkFence)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockFenceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockFence)(nil).Handle))
}

// Reset mocks base method.
func (m *MockFence) Reset() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *MockFenceMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockFence)(nil).Reset))
}

// Status mocks base method.
func (m *MockFence) Status() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockFenceMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockFence)(nil).Status))
}

// Wait mocks base method.
func (m *MockFence) Wait(timeout time.Duration) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", timeout)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockFenceMockRecorder) Wait(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockFence)(nil).Wait), timeout)
}

// MockFramebuffer is a mock of Framebuffer interface.
type MockFramebuffer struct {
	ctrl     *gomock.Controller
	recorder *MockFramebufferMockRecorder
}

// MockFramebufferMockRecorder is the mock recorder for MockFramebuffer.
type MockFramebufferMockRecorder struct {
	mock *MockFramebuffer
}

// NewMockFramebuffer creates a new mock instance.
func NewMockFramebuffer(ctrl *gomock.Controller) *MockFramebuffer {
	mock := &MockFramebuffer{ctrl: ctrl}
	mock.recorder = &MockFramebufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFramebuffer) EXPECT() *MockFramebufferMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockFramebuffer) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockFramebufferMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockFramebuffer)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockFramebuffer) Handle() core.VkFramebuffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkFramebuffer)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockFramebufferMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockFramebuffer)(nil).Handle))
}

// MockImage is a mock of Image interface.
type MockImage struct {
	ctrl     *gomock.Controller
	recorder *MockImageMockRecorder
}

// MockImageMockRecorder is the mock recorder for MockImage.
type MockImageMockRecorder struct {
	mock *MockImage
}

// NewMockImage creates a new mock instance.
func NewMockImage(ctrl *gomock.Controller) *MockImage {
	mock := &MockImage{ctrl: ctrl}
	mock.recorder = &MockImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImage) EXPECT() *MockImageMockRecorder {
	return m.recorder
}

// BindImageMemory mocks base method.
func (m *MockImage) BindImageMemory(memory core.DeviceMemory, offset int) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindImageMemory", memory, offset)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindImageMemory indicates an expected call of BindImageMemory.
func (mr *MockImageMockRecorder) BindImageMemory(memory, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindImageMemory", reflect.TypeOf((*MockImage)(nil).BindImageMemory), memory, offset)
}

// Destroy mocks base method.
func (m *MockImage) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockImageMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockImage)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockImage) Handle() core.VkImage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkImage)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockImageMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockImage)(nil).Handle))
}

// MemoryRequirements mocks base method.
func (m *MockImage) MemoryRequirements() *common.MemoryRequirements {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryRequirements")
	ret0, _ := ret[0].(*common.MemoryRequirements)
	return ret0
}

// MemoryRequirements indicates an expected call of MemoryRequirements.
func (mr *MockImageMockRecorder) MemoryRequirements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRequirements", reflect.TypeOf((*MockImage)(nil).MemoryRequirements))
}

// SparseMemoryRequirements mocks base method.
func (m *MockImage) SparseMemoryRequirements() []core.SparseImageMemoryRequirements {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SparseMemoryRequirements")
	ret0, _ := ret[0].([]core.SparseImageMemoryRequirements)
	return ret0
}

// SparseMemoryRequirements indicates an expected call of SparseMemoryRequirements.
func (mr *MockImageMockRecorder) SparseMemoryRequirements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SparseMemoryRequirements", reflect.TypeOf((*MockImage)(nil).SparseMemoryRequirements))
}

// SubresourceLayout mocks base method.
func (m *MockImage) SubresourceLayout(subresource *common.ImageSubresource) *common.SubresourceLayout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubresourceLayout", subresource)
	ret0, _ := ret[0].(*common.SubresourceLayout)
	return ret0
}

// SubresourceLayout indicates an expected call of SubresourceLayout.
func (mr *MockImageMockRecorder) SubresourceLayout(subresource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubresourceLayout", reflect.TypeOf((*MockImage)(nil).SubresourceLayout), subresource)
}

// MockImageView is a mock of ImageView interface.
type MockImageView struct {
	ctrl     *gomock.Controller
	recorder *MockImageViewMockRecorder
}

// MockImageViewMockRecorder is the mock recorder for MockImageView.
type MockImageViewMockRecorder struct {
	mock *MockImageView
}

// NewMockImageView creates a new mock instance.
func NewMockImageView(ctrl *gomock.Controller) *MockImageView {
	mock := &MockImageView{ctrl: ctrl}
	mock.recorder = &MockImageViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageView) EXPECT() *MockImageViewMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockImageView) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockImageViewMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockImageView)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockImageView) Handle() core.VkImageView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkImageView)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockImageViewMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockImageView)(nil).Handle))
}

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockInstance) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockInstanceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockInstance)(nil).Destroy))
}

// Driver mocks base method.
func (m *MockInstance) Driver() core.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(core.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockInstanceMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockInstance)(nil).Driver))
}

// Handle mocks base method.
func (m *MockInstance) Handle() core.VkInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkInstance)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockInstanceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockInstance)(nil).Handle))
}

// PhysicalDevices mocks base method.
func (m *MockInstance) PhysicalDevices() ([]core.PhysicalDevice, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDevices")
	ret0, _ := ret[0].([]core.PhysicalDevice)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PhysicalDevices indicates an expected call of PhysicalDevices.
func (mr *MockInstanceMockRecorder) PhysicalDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDevices", reflect.TypeOf((*MockInstance)(nil).PhysicalDevices))
}

// MockLoader1_0 is a mock of Loader1_0 interface.
type MockLoader1_0 struct {
	ctrl     *gomock.Controller
	recorder *MockLoader1_0MockRecorder
}

// MockLoader1_0MockRecorder is the mock recorder for MockLoader1_0.
type MockLoader1_0MockRecorder struct {
	mock *MockLoader1_0
}

// NewMockLoader1_0 creates a new mock instance.
func NewMockLoader1_0(ctrl *gomock.Controller) *MockLoader1_0 {
	mock := &MockLoader1_0{ctrl: ctrl}
	mock.recorder = &MockLoader1_0MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader1_0) EXPECT() *MockLoader1_0MockRecorder {
	return m.recorder
}

// AvailableExtensions mocks base method.
func (m *MockLoader1_0) AvailableExtensions() (map[string]*common.ExtensionProperties, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableExtensions")
	ret0, _ := ret[0].(map[string]*common.ExtensionProperties)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableExtensions indicates an expected call of AvailableExtensions.
func (mr *MockLoader1_0MockRecorder) AvailableExtensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableExtensions", reflect.TypeOf((*MockLoader1_0)(nil).AvailableExtensions))
}

// AvailableExtensionsForLayer mocks base method.
func (m *MockLoader1_0) AvailableExtensionsForLayer(layerName string) (map[string]*common.ExtensionProperties, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableExtensionsForLayer", layerName)
	ret0, _ := ret[0].(map[string]*common.ExtensionProperties)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableExtensionsForLayer indicates an expected call of AvailableExtensionsForLayer.
func (mr *MockLoader1_0MockRecorder) AvailableExtensionsForLayer(layerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableExtensionsForLayer", reflect.TypeOf((*MockLoader1_0)(nil).AvailableExtensionsForLayer), layerName)
}

// AvailableLayers mocks base method.
func (m *MockLoader1_0) AvailableLayers() (map[string]*common.LayerProperties, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableLayers")
	ret0, _ := ret[0].(map[string]*common.LayerProperties)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableLayers indicates an expected call of AvailableLayers.
func (mr *MockLoader1_0MockRecorder) AvailableLayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableLayers", reflect.TypeOf((*MockLoader1_0)(nil).AvailableLayers))
}

// CreateAllocationCallbacks mocks base method.
func (m *MockLoader1_0) CreateAllocationCallbacks(allocation core.AllocationFunction, reallocation core.ReallocationFunction, free core.FreeFunction, internalAllocation core.InternalAllocationNotification, internalFree core.InternalFreeNotification, userData interface{}) *core.AllocationCallbacks {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAllocationCallbacks", allocation, reallocation, free, internalAllocation, internalFree, userData)
	ret0, _ := ret[0].(*core.AllocationCallbacks)
	return ret0
}

// CreateAllocationCallbacks indicates an expected call of CreateAllocationCallbacks.
func (mr *MockLoader1_0MockRecorder) CreateAllocationCallbacks(allocation, reallocation, free, internalAllocation, internalFree, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAllocationCallbacks", reflect.TypeOf((*MockLoader1_0)(nil).CreateAllocationCallbacks), allocation, reallocation, free, internalAllocation, internalFree, userData)
}

// CreateBuffer mocks base method.
func (m *MockLoader1_0) CreateBuffer(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.BufferOptions) (core.Buffer, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuffer", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.Buffer)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBuffer indicates an expected call of CreateBuffer.
func (mr *MockLoader1_0MockRecorder) CreateBuffer(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuffer", reflect.TypeOf((*MockLoader1_0)(nil).CreateBuffer), device, allocationCallbacks, o)
}

// CreateBufferView mocks base method.
func (m *MockLoader1_0) CreateBufferView(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.BufferViewOptions) (core.BufferView, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBufferView", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.BufferView)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBufferView indicates an expected call of CreateBufferView.
func (mr *MockLoader1_0MockRecorder) CreateBufferView(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBufferView", reflect.TypeOf((*MockLoader1_0)(nil).CreateBufferView), device, allocationCallbacks, o)
}

// CreateCommandPool mocks base method.
func (m *MockLoader1_0) CreateCommandPool(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.CommandPoolOptions) (core.CommandPool, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommandPool", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.CommandPool)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommandPool indicates an expected call of CreateCommandPool.
func (mr *MockLoader1_0MockRecorder) CreateCommandPool(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommandPool", reflect.TypeOf((*MockLoader1_0)(nil).CreateCommandPool), device, allocationCallbacks, o)
}

// CreateComputePipelines mocks base method.
func (m *MockLoader1_0) CreateComputePipelines(device core.Device, pipelineCache core.PipelineCache, allocationCallbacks *core.AllocationCallbacks, o []*core.ComputePipelineOptions) ([]core.Pipeline, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComputePipelines", device, pipelineCache, allocationCallbacks, o)
	ret0, _ := ret[0].([]core.Pipeline)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComputePipelines indicates an expected call of CreateComputePipelines.
func (mr *MockLoader1_0MockRecorder) CreateComputePipelines(device, pipelineCache, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComputePipelines", reflect.TypeOf((*MockLoader1_0)(nil).CreateComputePipelines), device, pipelineCache, allocationCallbacks, o)
}

// CreateDescriptorPool mocks base method.
func (m *MockLoader1_0) CreateDescriptorPool(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.DescriptorPoolOptions) (core.DescriptorPool, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDescriptorPool", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.DescriptorPool)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDescriptorPool indicates an expected call of CreateDescriptorPool.
func (mr *MockLoader1_0MockRecorder) CreateDescriptorPool(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDescriptorPool", reflect.TypeOf((*MockLoader1_0)(nil).CreateDescriptorPool), device, allocationCallbacks, o)
}

// CreateDescriptorSetLayout mocks base method.
func (m *MockLoader1_0) CreateDescriptorSetLayout(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.DescriptorSetLayoutOptions) (core.DescriptorSetLayout, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDescriptorSetLayout", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.DescriptorSetLayout)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDescriptorSetLayout indicates an expected call of CreateDescriptorSetLayout.
func (mr *MockLoader1_0MockRecorder) CreateDescriptorSetLayout(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDescriptorSetLayout", reflect.TypeOf((*MockLoader1_0)(nil).CreateDescriptorSetLayout), device, allocationCallbacks, o)
}

// CreateDevice mocks base method.
func (m *MockLoader1_0) CreateDevice(physicalDevice core.PhysicalDevice, allocationCallbacks *core.AllocationCallbacks, options *core.DeviceOptions) (core.Device, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", physicalDevice, allocationCallbacks, options)
	ret0, _ := ret[0].(core.Device)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockLoader1_0MockRecorder) CreateDevice(physicalDevice, allocationCallbacks, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockLoader1_0)(nil).CreateDevice), physicalDevice, allocationCallbacks, options)
}

// CreateEvent mocks base method.
func (m *MockLoader1_0) CreateEvent(device core.Device, allocationCallbacks *core.AllocationCallbacks, options *core.EventOptions) (core.Event, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", device, allocationCallbacks, options)
	ret0, _ := ret[0].(core.Event)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockLoader1_0MockRecorder) CreateEvent(device, allocationCallbacks, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockLoader1_0)(nil).CreateEvent), device, allocationCallbacks, options)
}

// CreateFence mocks base method.
func (m *MockLoader1_0) CreateFence(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.FenceOptions) (core.Fence, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFence", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.Fence)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFence indicates an expected call of CreateFence.
func (mr *MockLoader1_0MockRecorder) CreateFence(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFence", reflect.TypeOf((*MockLoader1_0)(nil).CreateFence), device, allocationCallbacks, o)
}

// CreateFrameBuffer mocks base method.
func (m *MockLoader1_0) CreateFrameBuffer(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.FramebufferOptions) (core.Framebuffer, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFrameBuffer", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.Framebuffer)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFrameBuffer indicates an expected call of CreateFrameBuffer.
func (mr *MockLoader1_0MockRecorder) CreateFrameBuffer(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFrameBuffer", reflect.TypeOf((*MockLoader1_0)(nil).CreateFrameBuffer), device, allocationCallbacks, o)
}

// CreateGraphicsPipelines mocks base method.
func (m *MockLoader1_0) CreateGraphicsPipelines(device core.Device, pipelineCache core.PipelineCache, allocationCallbacks *core.AllocationCallbacks, o []*core.GraphicsPipelineOptions) ([]core.Pipeline, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphicsPipelines", device, pipelineCache, allocationCallbacks, o)
	ret0, _ := ret[0].([]core.Pipeline)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGraphicsPipelines indicates an expected call of CreateGraphicsPipelines.
func (mr *MockLoader1_0MockRecorder) CreateGraphicsPipelines(device, pipelineCache, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphicsPipelines", reflect.TypeOf((*MockLoader1_0)(nil).CreateGraphicsPipelines), device, pipelineCache, allocationCallbacks, o)
}

// CreateImage mocks base method.
func (m *MockLoader1_0) CreateImage(device core.Device, allocationCallbacks *core.AllocationCallbacks, options *core.ImageOptions) (core.Image, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", device, allocationCallbacks, options)
	ret0, _ := ret[0].(core.Image)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockLoader1_0MockRecorder) CreateImage(device, allocationCallbacks, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockLoader1_0)(nil).CreateImage), device, allocationCallbacks, options)
}

// CreateImageView mocks base method.
func (m *MockLoader1_0) CreateImageView(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.ImageViewOptions) (core.ImageView, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageView", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.ImageView)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateImageView indicates an expected call of CreateImageView.
func (mr *MockLoader1_0MockRecorder) CreateImageView(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageView", reflect.TypeOf((*MockLoader1_0)(nil).CreateImageView), device, allocationCallbacks, o)
}

// CreateInstance mocks base method.
func (m *MockLoader1_0) CreateInstance(allocationCallbacks *core.AllocationCallbacks, options *core.InstanceOptions) (core.Instance, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", allocationCallbacks, options)
	ret0, _ := ret[0].(core.Instance)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockLoader1_0MockRecorder) CreateInstance(allocationCallbacks, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockLoader1_0)(nil).CreateInstance), allocationCallbacks, options)
}

// CreatePipelineCache mocks base method.
func (m *MockLoader1_0) CreatePipelineCache(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.PipelineCacheOptions) (core.PipelineCache, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipelineCache", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.PipelineCache)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePipelineCache indicates an expected call of CreatePipelineCache.
func (mr *MockLoader1_0MockRecorder) CreatePipelineCache(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineCache", reflect.TypeOf((*MockLoader1_0)(nil).CreatePipelineCache), device, allocationCallbacks, o)
}

// CreatePipelineLayout mocks base method.
func (m *MockLoader1_0) CreatePipelineLayout(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.PipelineLayoutOptions) (core.PipelineLayout, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipelineLayout", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.PipelineLayout)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePipelineLayout indicates an expected call of CreatePipelineLayout.
func (mr *MockLoader1_0MockRecorder) CreatePipelineLayout(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineLayout", reflect.TypeOf((*MockLoader1_0)(nil).CreatePipelineLayout), device, allocationCallbacks, o)
}

// CreateQueryPool mocks base method.
func (m *MockLoader1_0) CreateQueryPool(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.QueryPoolOptions) (core.QueryPool, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueryPool", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.QueryPool)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateQueryPool indicates an expected call of CreateQueryPool.
func (mr *MockLoader1_0MockRecorder) CreateQueryPool(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueryPool", reflect.TypeOf((*MockLoader1_0)(nil).CreateQueryPool), device, allocationCallbacks, o)
}

// CreateRenderPass mocks base method.
func (m *MockLoader1_0) CreateRenderPass(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.RenderPassOptions) (core.RenderPass, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRenderPass", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.RenderPass)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRenderPass indicates an expected call of CreateRenderPass.
func (mr *MockLoader1_0MockRecorder) CreateRenderPass(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRenderPass", reflect.TypeOf((*MockLoader1_0)(nil).CreateRenderPass), device, allocationCallbacks, o)
}

// CreateSampler mocks base method.
func (m *MockLoader1_0) CreateSampler(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.SamplerOptions) (core.Sampler, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSampler", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.Sampler)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSampler indicates an expected call of CreateSampler.
func (mr *MockLoader1_0MockRecorder) CreateSampler(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSampler", reflect.TypeOf((*MockLoader1_0)(nil).CreateSampler), device, allocationCallbacks, o)
}

// CreateSemaphore mocks base method.
func (m *MockLoader1_0) CreateSemaphore(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.SemaphoreOptions) (core.Semaphore, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSemaphore", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.Semaphore)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSemaphore indicates an expected call of CreateSemaphore.
func (mr *MockLoader1_0MockRecorder) CreateSemaphore(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSemaphore", reflect.TypeOf((*MockLoader1_0)(nil).CreateSemaphore), device, allocationCallbacks, o)
}

// CreateShaderModule mocks base method.
func (m *MockLoader1_0) CreateShaderModule(device core.Device, allocationCallbacks *core.AllocationCallbacks, o *core.ShaderModuleOptions) (core.ShaderModule, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShaderModule", device, allocationCallbacks, o)
	ret0, _ := ret[0].(core.ShaderModule)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateShaderModule indicates an expected call of CreateShaderModule.
func (mr *MockLoader1_0MockRecorder) CreateShaderModule(device, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShaderModule", reflect.TypeOf((*MockLoader1_0)(nil).CreateShaderModule), device, allocationCallbacks, o)
}

// Driver mocks base method.
func (m *MockLoader1_0) Driver() core.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(core.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockLoader1_0MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockLoader1_0)(nil).Driver))
}

// Version mocks base method.
func (m *MockLoader1_0) Version() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockLoader1_0MockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockLoader1_0)(nil).Version))
}

// MockPhysicalDevice is a mock of PhysicalDevice interface.
type MockPhysicalDevice struct {
	ctrl     *gomock.Controller
	recorder *MockPhysicalDeviceMockRecorder
}

// MockPhysicalDeviceMockRecorder is the mock recorder for MockPhysicalDevice.
type MockPhysicalDeviceMockRecorder struct {
	mock *MockPhysicalDevice
}

// NewMockPhysicalDevice creates a new mock instance.
func NewMockPhysicalDevice(ctrl *gomock.Controller) *MockPhysicalDevice {
	mock := &MockPhysicalDevice{ctrl: ctrl}
	mock.recorder = &MockPhysicalDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhysicalDevice) EXPECT() *MockPhysicalDeviceMockRecorder {
	return m.recorder
}

// AvailableExtensions mocks base method.
func (m *MockPhysicalDevice) AvailableExtensions() (map[string]*common.ExtensionProperties, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableExtensions")
	ret0, _ := ret[0].(map[string]*common.ExtensionProperties)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableExtensions indicates an expected call of AvailableExtensions.
func (mr *MockPhysicalDeviceMockRecorder) AvailableExtensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableExtensions", reflect.TypeOf((*MockPhysicalDevice)(nil).AvailableExtensions))
}

// AvailableExtensionsForLayer mocks base method.
func (m *MockPhysicalDevice) AvailableExtensionsForLayer(layerName string) (map[string]*common.ExtensionProperties, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableExtensionsForLayer", layerName)
	ret0, _ := ret[0].(map[string]*common.ExtensionProperties)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableExtensionsForLayer indicates an expected call of AvailableExtensionsForLayer.
func (mr *MockPhysicalDeviceMockRecorder) AvailableExtensionsForLayer(layerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableExtensionsForLayer", reflect.TypeOf((*MockPhysicalDevice)(nil).AvailableExtensionsForLayer), layerName)
}

// AvailableLayers mocks base method.
func (m *MockPhysicalDevice) AvailableLayers() (map[string]*common.LayerProperties, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableLayers")
	ret0, _ := ret[0].(map[string]*common.LayerProperties)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableLayers indicates an expected call of AvailableLayers.
func (mr *MockPhysicalDeviceMockRecorder) AvailableLayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableLayers", reflect.TypeOf((*MockPhysicalDevice)(nil).AvailableLayers))
}

// Driver mocks base method.
func (m *MockPhysicalDevice) Driver() core.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(core.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockPhysicalDeviceMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockPhysicalDevice)(nil).Driver))
}

// Features mocks base method.
func (m *MockPhysicalDevice) Features() *common.PhysicalDeviceFeatures {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].(*common.PhysicalDeviceFeatures)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *MockPhysicalDeviceMockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockPhysicalDevice)(nil).Features))
}

// FormatProperties mocks base method.
func (m *MockPhysicalDevice) FormatProperties(format common.DataFormat) *common.FormatProperties {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatProperties", format)
	ret0, _ := ret[0].(*common.FormatProperties)
	return ret0
}

// FormatProperties indicates an expected call of FormatProperties.
func (mr *MockPhysicalDeviceMockRecorder) FormatProperties(format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatProperties", reflect.TypeOf((*MockPhysicalDevice)(nil).FormatProperties), format)
}

// Handle mocks base method.
func (m *MockPhysicalDevice) Handle() core.VkPhysicalDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkPhysicalDevice)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockPhysicalDeviceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPhysicalDevice)(nil).Handle))
}

// ImageFormatProperties mocks base method.
func (m *MockPhysicalDevice) ImageFormatProperties(format common.DataFormat, imageType common.ImageType, tiling common.ImageTiling, usages common.ImageUsages, flags core.ImageFlags) (*common.ImageFormatProperties, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageFormatProperties", format, imageType, tiling, usages, flags)
	ret0, _ := ret[0].(*common.ImageFormatProperties)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImageFormatProperties indicates an expected call of ImageFormatProperties.
func (mr *MockPhysicalDeviceMockRecorder) ImageFormatProperties(format, imageType, tiling, usages, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageFormatProperties", reflect.TypeOf((*MockPhysicalDevice)(nil).ImageFormatProperties), format, imageType, tiling, usages, flags)
}

// MemoryProperties mocks base method.
func (m *MockPhysicalDevice) MemoryProperties() *core.PhysicalDeviceMemoryProperties {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryProperties")
	ret0, _ := ret[0].(*core.PhysicalDeviceMemoryProperties)
	return ret0
}

// MemoryProperties indicates an expected call of MemoryProperties.
func (mr *MockPhysicalDeviceMockRecorder) MemoryProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryProperties", reflect.TypeOf((*MockPhysicalDevice)(nil).MemoryProperties))
}

// Properties mocks base method.
func (m *MockPhysicalDevice) Properties() *common.PhysicalDeviceProperties {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties")
	ret0, _ := ret[0].(*common.PhysicalDeviceProperties)
	return ret0
}

// Properties indicates an expected call of Properties.
func (mr *MockPhysicalDeviceMockRecorder) Properties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties", reflect.TypeOf((*MockPhysicalDevice)(nil).Properties))
}

// QueueFamilyProperties mocks base method.
func (m *MockPhysicalDevice) QueueFamilyProperties() []*common.QueueFamily {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueFamilyProperties")
	ret0, _ := ret[0].([]*common.QueueFamily)
	return ret0
}

// QueueFamilyProperties indicates an expected call of QueueFamilyProperties.
func (mr *MockPhysicalDeviceMockRecorder) QueueFamilyProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueFamilyProperties", reflect.TypeOf((*MockPhysicalDevice)(nil).QueueFamilyProperties))
}

// MockPipeline is a mock of Pipeline interface.
type MockPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineMockRecorder
}

// MockPipelineMockRecorder is the mock recorder for MockPipeline.
type MockPipelineMockRecorder struct {
	mock *MockPipeline
}

// NewMockPipeline creates a new mock instance.
func NewMockPipeline(ctrl *gomock.Controller) *MockPipeline {
	mock := &MockPipeline{ctrl: ctrl}
	mock.recorder = &MockPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeline) EXPECT() *MockPipelineMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockPipeline) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPipelineMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPipeline)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockPipeline) Handle() core.VkPipeline {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkPipeline)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockPipelineMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPipeline)(nil).Handle))
}

// MockPipelineCache is a mock of PipelineCache interface.
type MockPipelineCache struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineCacheMockRecorder
}

// MockPipelineCacheMockRecorder is the mock recorder for MockPipelineCache.
type MockPipelineCacheMockRecorder struct {
	mock *MockPipelineCache
}

// NewMockPipelineCache creates a new mock instance.
func NewMockPipelineCache(ctrl *gomock.Controller) *MockPipelineCache {
	mock := &MockPipelineCache{ctrl: ctrl}
	mock.recorder = &MockPipelineCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineCache) EXPECT() *MockPipelineCacheMockRecorder {
	return m.recorder
}

// CacheData mocks base method.
func (m *MockPipelineCache) CacheData() ([]byte, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheData")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CacheData indicates an expected call of CacheData.
func (mr *MockPipelineCacheMockRecorder) CacheData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheData", reflect.TypeOf((*MockPipelineCache)(nil).CacheData))
}

// Destroy mocks base method.
func (m *MockPipelineCache) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPipelineCacheMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPipelineCache)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockPipelineCache) Handle() core.VkPipelineCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkPipelineCache)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockPipelineCacheMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPipelineCache)(nil).Handle))
}

// MergePipelineCaches mocks base method.
func (m *MockPipelineCache) MergePipelineCaches(srcCaches []core.PipelineCache) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePipelineCaches", srcCaches)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergePipelineCaches indicates an expected call of MergePipelineCaches.
func (mr *MockPipelineCacheMockRecorder) MergePipelineCaches(srcCaches interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePipelineCaches", reflect.TypeOf((*MockPipelineCache)(nil).MergePipelineCaches), srcCaches)
}

// MockPipelineLayout is a mock of PipelineLayout interface.
type MockPipelineLayout struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineLayoutMockRecorder
}

// MockPipelineLayoutMockRecorder is the mock recorder for MockPipelineLayout.
type MockPipelineLayoutMockRecorder struct {
	mock *MockPipelineLayout
}

// NewMockPipelineLayout creates a new mock instance.
func NewMockPipelineLayout(ctrl *gomock.Controller) *MockPipelineLayout {
	mock := &MockPipelineLayout{ctrl: ctrl}
	mock.recorder = &MockPipelineLayoutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineLayout) EXPECT() *MockPipelineLayoutMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockPipelineLayout) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPipelineLayoutMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPipelineLayout)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockPipelineLayout) Handle() core.VkPipelineLayout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkPipelineLayout)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockPipelineLayoutMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPipelineLayout)(nil).Handle))
}

// MockQueryPool is a mock of QueryPool interface.
type MockQueryPool struct {
	ctrl     *gomock.Controller
	recorder *MockQueryPoolMockRecorder
}

// MockQueryPoolMockRecorder is the mock recorder for MockQueryPool.
type MockQueryPoolMockRecorder struct {
	mock *MockQueryPool
}

// NewMockQueryPool creates a new mock instance.
func NewMockQueryPool(ctrl *gomock.Controller) *MockQueryPool {
	mock := &MockQueryPool{ctrl: ctrl}
	mock.recorder = &MockQueryPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryPool) EXPECT() *MockQueryPoolMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockQueryPool) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockQueryPoolMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockQueryPool)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockQueryPool) Handle() core.VkQueryPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkQueryPool)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockQueryPoolMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockQueryPool)(nil).Handle))
}

// PopulateResults mocks base method.
func (m *MockQueryPool) PopulateResults(firstQuery, queryCount, resultSize, resultStride int, flags common.QueryResultFlags) ([]byte, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateResults", firstQuery, queryCount, resultSize, resultStride, flags)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PopulateResults indicates an expected call of PopulateResults.
func (mr *MockQueryPoolMockRecorder) PopulateResults(firstQuery, queryCount, resultSize, resultStride, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateResults", reflect.TypeOf((*MockQueryPool)(nil).PopulateResults), firstQuery, queryCount, resultSize, resultStride, flags)
}

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// BindSparse mocks base method.
func (m *MockQueue) BindSparse(fence core.Fence, bindInfos []*core.BindSparseOptions) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindSparse", fence, bindInfos)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindSparse indicates an expected call of BindSparse.
func (mr *MockQueueMockRecorder) BindSparse(fence, bindInfos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSparse", reflect.TypeOf((*MockQueue)(nil).BindSparse), fence, bindInfos)
}

// Driver mocks base method.
func (m *MockQueue) Driver() core.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(core.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockQueueMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockQueue)(nil).Driver))
}

// Handle mocks base method.
func (m *MockQueue) Handle() core.VkQueue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkQueue)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockQueueMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockQueue)(nil).Handle))
}

// SubmitToQueue mocks base method.
func (m *MockQueue) SubmitToQueue(fence core.Fence, o []*core.SubmitOptions) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitToQueue", fence, o)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitToQueue indicates an expected call of SubmitToQueue.
func (mr *MockQueueMockRecorder) SubmitToQueue(fence, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitToQueue", reflect.TypeOf((*MockQueue)(nil).SubmitToQueue), fence, o)
}

// WaitForIdle mocks base method.
func (m *MockQueue) WaitForIdle() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForIdle")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForIdle indicates an expected call of WaitForIdle.
func (mr *MockQueueMockRecorder) WaitForIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForIdle", reflect.TypeOf((*MockQueue)(nil).WaitForIdle))
}

// MockRenderPass is a mock of RenderPass interface.
type MockRenderPass struct {
	ctrl     *gomock.Controller
	recorder *MockRenderPassMockRecorder
}

// MockRenderPassMockRecorder is the mock recorder for MockRenderPass.
type MockRenderPassMockRecorder struct {
	mock *MockRenderPass
}

// NewMockRenderPass creates a new mock instance.
func NewMockRenderPass(ctrl *gomock.Controller) *MockRenderPass {
	mock := &MockRenderPass{ctrl: ctrl}
	mock.recorder = &MockRenderPassMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderPass) EXPECT() *MockRenderPassMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockRenderPass) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockRenderPassMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockRenderPass)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockRenderPass) Handle() core.VkRenderPass {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkRenderPass)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockRenderPassMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockRenderPass)(nil).Handle))
}

// RenderAreaGranularity mocks base method.
func (m *MockRenderPass) RenderAreaGranularity() common.Extent2D {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderAreaGranularity")
	ret0, _ := ret[0].(common.Extent2D)
	return ret0
}

// RenderAreaGranularity indicates an expected call of RenderAreaGranularity.
func (mr *MockRenderPassMockRecorder) RenderAreaGranularity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderAreaGranularity", reflect.TypeOf((*MockRenderPass)(nil).RenderAreaGranularity))
}

// MockSemaphore is a mock of Semaphore interface.
type MockSemaphore struct {
	ctrl     *gomock.Controller
	recorder *MockSemaphoreMockRecorder
}

// MockSemaphoreMockRecorder is the mock recorder for MockSemaphore.
type MockSemaphoreMockRecorder struct {
	mock *MockSemaphore
}

// NewMockSemaphore creates a new mock instance.
func NewMockSemaphore(ctrl *gomock.Controller) *MockSemaphore {
	mock := &MockSemaphore{ctrl: ctrl}
	mock.recorder = &MockSemaphoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSemaphore) EXPECT() *MockSemaphoreMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockSemaphore) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSemaphoreMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSemaphore)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockSemaphore) Handle() core.VkSemaphore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkSemaphore)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockSemaphoreMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockSemaphore)(nil).Handle))
}

// MockShaderModule is a mock of ShaderModule interface.
type MockShaderModule struct {
	ctrl     *gomock.Controller
	recorder *MockShaderModuleMockRecorder
}

// MockShaderModuleMockRecorder is the mock recorder for MockShaderModule.
type MockShaderModuleMockRecorder struct {
	mock *MockShaderModule
}

// NewMockShaderModule creates a new mock instance.
func NewMockShaderModule(ctrl *gomock.Controller) *MockShaderModule {
	mock := &MockShaderModule{ctrl: ctrl}
	mock.recorder = &MockShaderModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShaderModule) EXPECT() *MockShaderModuleMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockShaderModule) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockShaderModuleMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockShaderModule)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockShaderModule) Handle() core.VkShaderModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkShaderModule)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockShaderModuleMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockShaderModule)(nil).Handle))
}

// MockSampler is a mock of Sampler interface.
type MockSampler struct {
	ctrl     *gomock.Controller
	recorder *MockSamplerMockRecorder
}

// MockSamplerMockRecorder is the mock recorder for MockSampler.
type MockSamplerMockRecorder struct {
	mock *MockSampler
}

// NewMockSampler creates a new mock instance.
func NewMockSampler(ctrl *gomock.Controller) *MockSampler {
	mock := &MockSampler{ctrl: ctrl}
	mock.recorder = &MockSamplerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSampler) EXPECT() *MockSamplerMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockSampler) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSamplerMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSampler)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockSampler) Handle() core.VkSampler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkSampler)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockSamplerMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockSampler)(nil).Handle))
}
