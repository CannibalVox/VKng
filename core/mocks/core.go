// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	unsafe "unsafe"

	core "github.com/CannibalVox/VKng/core"
	common "github.com/CannibalVox/VKng/core/common"
	gomock "github.com/golang/mock/gomock"
)

// MockBuffer is a mock of Buffer interface.
type MockBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockBufferMockRecorder
}

// MockBufferMockRecorder is the mock recorder for MockBuffer.
type MockBufferMockRecorder struct {
	mock *MockBuffer
}

// NewMockBuffer creates a new mock instance.
func NewMockBuffer(ctrl *gomock.Controller) *MockBuffer {
	mock := &MockBuffer{ctrl: ctrl}
	mock.recorder = &MockBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuffer) EXPECT() *MockBufferMockRecorder {
	return m.recorder
}

// BindBufferMemory mocks base method.
func (m *MockBuffer) BindBufferMemory(memory core.DeviceMemory, offset int) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindBufferMemory", memory, offset)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindBufferMemory indicates an expected call of BindBufferMemory.
func (mr *MockBufferMockRecorder) BindBufferMemory(memory, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindBufferMemory", reflect.TypeOf((*MockBuffer)(nil).BindBufferMemory), memory, offset)
}

// Destroy mocks base method.
func (m *MockBuffer) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockBufferMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockBuffer)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockBuffer) Handle() core.VkBuffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkBuffer)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockBufferMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockBuffer)(nil).Handle))
}

// MemoryRequirements mocks base method.
func (m *MockBuffer) MemoryRequirements() (*common.MemoryRequirements, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryRequirements")
	ret0, _ := ret[0].(*common.MemoryRequirements)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryRequirements indicates an expected call of MemoryRequirements.
func (mr *MockBufferMockRecorder) MemoryRequirements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRequirements", reflect.TypeOf((*MockBuffer)(nil).MemoryRequirements))
}

// MockBufferView is a mock of BufferView interface.
type MockBufferView struct {
	ctrl     *gomock.Controller
	recorder *MockBufferViewMockRecorder
}

// MockBufferViewMockRecorder is the mock recorder for MockBufferView.
type MockBufferViewMockRecorder struct {
	mock *MockBufferView
}

// NewMockBufferView creates a new mock instance.
func NewMockBufferView(ctrl *gomock.Controller) *MockBufferView {
	mock := &MockBufferView{ctrl: ctrl}
	mock.recorder = &MockBufferViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBufferView) EXPECT() *MockBufferViewMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockBufferView) Handle() core.VkBufferView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkBufferView)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockBufferViewMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockBufferView)(nil).Handle))
}

// MockCommandBuffer is a mock of CommandBuffer interface.
type MockCommandBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBufferMockRecorder
}

// MockCommandBufferMockRecorder is the mock recorder for MockCommandBuffer.
type MockCommandBufferMockRecorder struct {
	mock *MockCommandBuffer
}

// NewMockCommandBuffer creates a new mock instance.
func NewMockCommandBuffer(ctrl *gomock.Controller) *MockCommandBuffer {
	mock := &MockCommandBuffer{ctrl: ctrl}
	mock.recorder = &MockCommandBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandBuffer) EXPECT() *MockCommandBufferMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockCommandBuffer) Begin(o *core.BeginOptions) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", o)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockCommandBufferMockRecorder) Begin(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockCommandBuffer)(nil).Begin), o)
}

// CmdBeginRenderPass mocks base method.
func (m *MockCommandBuffer) CmdBeginRenderPass(contents core.SubpassContents, o *core.RenderPassBeginOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBeginRenderPass", contents, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBeginRenderPass indicates an expected call of CmdBeginRenderPass.
func (mr *MockCommandBufferMockRecorder) CmdBeginRenderPass(contents, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBeginRenderPass", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBeginRenderPass), contents, o)
}

// CmdBindDescriptorSets mocks base method.
func (m *MockCommandBuffer) CmdBindDescriptorSets(bindPoint common.PipelineBindPoint, layout core.PipelineLayout, firstSet int, sets []core.DescriptorSet, dynamicOffsets []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBindDescriptorSets", bindPoint, layout, firstSet, sets, dynamicOffsets)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBindDescriptorSets indicates an expected call of CmdBindDescriptorSets.
func (mr *MockCommandBufferMockRecorder) CmdBindDescriptorSets(bindPoint, layout, firstSet, sets, dynamicOffsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindDescriptorSets", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBindDescriptorSets), bindPoint, layout, firstSet, sets, dynamicOffsets)
}

// CmdBindIndexBuffer mocks base method.
func (m *MockCommandBuffer) CmdBindIndexBuffer(buffer core.Buffer, offset int, indexType common.IndexType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBindIndexBuffer", buffer, offset, indexType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBindIndexBuffer indicates an expected call of CmdBindIndexBuffer.
func (mr *MockCommandBufferMockRecorder) CmdBindIndexBuffer(buffer, offset, indexType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindIndexBuffer", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBindIndexBuffer), buffer, offset, indexType)
}

// CmdBindPipeline mocks base method.
func (m *MockCommandBuffer) CmdBindPipeline(bindPoint common.PipelineBindPoint, pipeline core.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBindPipeline", bindPoint, pipeline)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBindPipeline indicates an expected call of CmdBindPipeline.
func (mr *MockCommandBufferMockRecorder) CmdBindPipeline(bindPoint, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindPipeline", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBindPipeline), bindPoint, pipeline)
}

// CmdBindVertexBuffers mocks base method.
func (m *MockCommandBuffer) CmdBindVertexBuffers(firstBinding uint32, buffers []core.Buffer, bufferOffsets []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBindVertexBuffers", firstBinding, buffers, bufferOffsets)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBindVertexBuffers indicates an expected call of CmdBindVertexBuffers.
func (mr *MockCommandBufferMockRecorder) CmdBindVertexBuffers(firstBinding, buffers, bufferOffsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindVertexBuffers", reflect.TypeOf((*MockCommandBuffer)(nil).CmdBindVertexBuffers), firstBinding, buffers, bufferOffsets)
}

// CmdCopyBuffer mocks base method.
func (m *MockCommandBuffer) CmdCopyBuffer(srcBuffer, dstBuffer core.Buffer, copyRegions []core.BufferCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdCopyBuffer", srcBuffer, dstBuffer, copyRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdCopyBuffer indicates an expected call of CmdCopyBuffer.
func (mr *MockCommandBufferMockRecorder) CmdCopyBuffer(srcBuffer, dstBuffer, copyRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdCopyBuffer", reflect.TypeOf((*MockCommandBuffer)(nil).CmdCopyBuffer), srcBuffer, dstBuffer, copyRegions)
}

// CmdDraw mocks base method.
func (m *MockCommandBuffer) CmdDraw(vertexCount, instanceCount int, firstVertex, firstInstance uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdDraw", vertexCount, instanceCount, firstVertex, firstInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdDraw indicates an expected call of CmdDraw.
func (mr *MockCommandBufferMockRecorder) CmdDraw(vertexCount, instanceCount, firstVertex, firstInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDraw", reflect.TypeOf((*MockCommandBuffer)(nil).CmdDraw), vertexCount, instanceCount, firstVertex, firstInstance)
}

// CmdDrawIndexed mocks base method.
func (m *MockCommandBuffer) CmdDrawIndexed(indexCount, instanceCount int, firstIndex uint32, vertexOffset int, firstInstance uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdDrawIndexed", indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdDrawIndexed indicates an expected call of CmdDrawIndexed.
func (mr *MockCommandBufferMockRecorder) CmdDrawIndexed(indexCount, instanceCount, firstIndex, vertexOffset, firstInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDrawIndexed", reflect.TypeOf((*MockCommandBuffer)(nil).CmdDrawIndexed), indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)
}

// CmdEndRenderPass mocks base method.
func (m *MockCommandBuffer) CmdEndRenderPass() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdEndRenderPass")
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdEndRenderPass indicates an expected call of CmdEndRenderPass.
func (mr *MockCommandBufferMockRecorder) CmdEndRenderPass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdEndRenderPass", reflect.TypeOf((*MockCommandBuffer)(nil).CmdEndRenderPass))
}

// End mocks base method.
func (m *MockCommandBuffer) End() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "End")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// End indicates an expected call of End.
func (mr *MockCommandBufferMockRecorder) End() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockCommandBuffer)(nil).End))
}

// Handle mocks base method.
func (m *MockCommandBuffer) Handle() core.VkCommandBuffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkCommandBuffer)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockCommandBufferMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCommandBuffer)(nil).Handle))
}

// MockCommandPool is a mock of CommandPool interface.
type MockCommandPool struct {
	ctrl     *gomock.Controller
	recorder *MockCommandPoolMockRecorder
}

// MockCommandPoolMockRecorder is the mock recorder for MockCommandPool.
type MockCommandPoolMockRecorder struct {
	mock *MockCommandPool
}

// NewMockCommandPool creates a new mock instance.
func NewMockCommandPool(ctrl *gomock.Controller) *MockCommandPool {
	mock := &MockCommandPool{ctrl: ctrl}
	mock.recorder = &MockCommandPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandPool) EXPECT() *MockCommandPoolMockRecorder {
	return m.recorder
}

// AllocateCommandBuffers mocks base method.
func (m *MockCommandPool) AllocateCommandBuffers(o *core.CommandBufferOptions) ([]core.CommandBuffer, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateCommandBuffers", o)
	ret0, _ := ret[0].([]core.CommandBuffer)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateCommandBuffers indicates an expected call of AllocateCommandBuffers.
func (mr *MockCommandPoolMockRecorder) AllocateCommandBuffers(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateCommandBuffers", reflect.TypeOf((*MockCommandPool)(nil).AllocateCommandBuffers), o)
}

// Destroy mocks base method.
func (m *MockCommandPool) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockCommandPoolMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockCommandPool)(nil).Destroy))
}

// FreeCommandBuffers mocks base method.
func (m *MockCommandPool) FreeCommandBuffers(buffers []core.CommandBuffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeCommandBuffers", buffers)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreeCommandBuffers indicates an expected call of FreeCommandBuffers.
func (mr *MockCommandPoolMockRecorder) FreeCommandBuffers(buffers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeCommandBuffers", reflect.TypeOf((*MockCommandPool)(nil).FreeCommandBuffers), buffers)
}

// Handle mocks base method.
func (m *MockCommandPool) Handle() core.VkCommandPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkCommandPool)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockCommandPoolMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCommandPool)(nil).Handle))
}

// MockDescriptorPool is a mock of DescriptorPool interface.
type MockDescriptorPool struct {
	ctrl     *gomock.Controller
	recorder *MockDescriptorPoolMockRecorder
}

// MockDescriptorPoolMockRecorder is the mock recorder for MockDescriptorPool.
type MockDescriptorPoolMockRecorder struct {
	mock *MockDescriptorPool
}

// NewMockDescriptorPool creates a new mock instance.
func NewMockDescriptorPool(ctrl *gomock.Controller) *MockDescriptorPool {
	mock := &MockDescriptorPool{ctrl: ctrl}
	mock.recorder = &MockDescriptorPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriptorPool) EXPECT() *MockDescriptorPoolMockRecorder {
	return m.recorder
}

// AllocateDescriptorSets mocks base method.
func (m *MockDescriptorPool) AllocateDescriptorSets(o *core.DescriptorSetOptions) ([]core.DescriptorSet, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateDescriptorSets", o)
	ret0, _ := ret[0].([]core.DescriptorSet)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateDescriptorSets indicates an expected call of AllocateDescriptorSets.
func (mr *MockDescriptorPoolMockRecorder) AllocateDescriptorSets(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateDescriptorSets", reflect.TypeOf((*MockDescriptorPool)(nil).AllocateDescriptorSets), o)
}

// Destroy mocks base method.
func (m *MockDescriptorPool) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDescriptorPoolMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDescriptorPool)(nil).Destroy))
}

// FreeDescriptorSets mocks base method.
func (m *MockDescriptorPool) FreeDescriptorSets(sets []core.DescriptorSet) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeDescriptorSets", sets)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FreeDescriptorSets indicates an expected call of FreeDescriptorSets.
func (mr *MockDescriptorPoolMockRecorder) FreeDescriptorSets(sets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeDescriptorSets", reflect.TypeOf((*MockDescriptorPool)(nil).FreeDescriptorSets), sets)
}

// Handle mocks base method.
func (m *MockDescriptorPool) Handle() core.VkDescriptorPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkDescriptorPool)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDescriptorPoolMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDescriptorPool)(nil).Handle))
}

// MockDescriptorSet is a mock of DescriptorSet interface.
type MockDescriptorSet struct {
	ctrl     *gomock.Controller
	recorder *MockDescriptorSetMockRecorder
}

// MockDescriptorSetMockRecorder is the mock recorder for MockDescriptorSet.
type MockDescriptorSetMockRecorder struct {
	mock *MockDescriptorSet
}

// NewMockDescriptorSet creates a new mock instance.
func NewMockDescriptorSet(ctrl *gomock.Controller) *MockDescriptorSet {
	mock := &MockDescriptorSet{ctrl: ctrl}
	mock.recorder = &MockDescriptorSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriptorSet) EXPECT() *MockDescriptorSetMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockDescriptorSet) Handle() core.VkDescriptorSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkDescriptorSet)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDescriptorSetMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDescriptorSet)(nil).Handle))
}

// MockDescriptorSetLayout is a mock of DescriptorSetLayout interface.
type MockDescriptorSetLayout struct {
	ctrl     *gomock.Controller
	recorder *MockDescriptorSetLayoutMockRecorder
}

// MockDescriptorSetLayoutMockRecorder is the mock recorder for MockDescriptorSetLayout.
type MockDescriptorSetLayoutMockRecorder struct {
	mock *MockDescriptorSetLayout
}

// NewMockDescriptorSetLayout creates a new mock instance.
func NewMockDescriptorSetLayout(ctrl *gomock.Controller) *MockDescriptorSetLayout {
	mock := &MockDescriptorSetLayout{ctrl: ctrl}
	mock.recorder = &MockDescriptorSetLayoutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriptorSetLayout) EXPECT() *MockDescriptorSetLayoutMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockDescriptorSetLayout) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDescriptorSetLayoutMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDescriptorSetLayout)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockDescriptorSetLayout) Handle() core.VkDescriptorSetLayout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkDescriptorSetLayout)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDescriptorSetLayoutMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDescriptorSetLayout)(nil).Handle))
}

// MockDeviceMemory is a mock of DeviceMemory interface.
type MockDeviceMemory struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMemoryMockRecorder
}

// MockDeviceMemoryMockRecorder is the mock recorder for MockDeviceMemory.
type MockDeviceMemoryMockRecorder struct {
	mock *MockDeviceMemory
}

// NewMockDeviceMemory creates a new mock instance.
func NewMockDeviceMemory(ctrl *gomock.Controller) *MockDeviceMemory {
	mock := &MockDeviceMemory{ctrl: ctrl}
	mock.recorder = &MockDeviceMemoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceMemory) EXPECT() *MockDeviceMemoryMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockDeviceMemory) Handle() core.VkDeviceMemory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkDeviceMemory)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDeviceMemoryMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDeviceMemory)(nil).Handle))
}

// MapMemory mocks base method.
func (m *MockDeviceMemory) MapMemory(offset, size int, flags core.MemoryMapFlags) (unsafe.Pointer, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapMemory", offset, size, flags)
	ret0, _ := ret[0].(unsafe.Pointer)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MapMemory indicates an expected call of MapMemory.
func (mr *MockDeviceMemoryMockRecorder) MapMemory(offset, size, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapMemory", reflect.TypeOf((*MockDeviceMemory)(nil).MapMemory), offset, size, flags)
}

// UnmapMemory mocks base method.
func (m *MockDeviceMemory) UnmapMemory() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmapMemory")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmapMemory indicates an expected call of UnmapMemory.
func (mr *MockDeviceMemoryMockRecorder) UnmapMemory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmapMemory", reflect.TypeOf((*MockDeviceMemory)(nil).UnmapMemory))
}

// WriteData mocks base method.
func (m *MockDeviceMemory) WriteData(offset int, data interface{}) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteData", offset, data)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteData indicates an expected call of WriteData.
func (mr *MockDeviceMemoryMockRecorder) WriteData(offset, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteData", reflect.TypeOf((*MockDeviceMemory)(nil).WriteData), offset, data)
}

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// AllocateMemory mocks base method.
func (m *MockDevice) AllocateMemory(o *core.DeviceMemoryOptions) (core.DeviceMemory, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateMemory", o)
	ret0, _ := ret[0].(core.DeviceMemory)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateMemory indicates an expected call of AllocateMemory.
func (mr *MockDeviceMockRecorder) AllocateMemory(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateMemory", reflect.TypeOf((*MockDevice)(nil).AllocateMemory), o)
}

// Destroy mocks base method.
func (m *MockDevice) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDeviceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDevice)(nil).Destroy))
}

// Driver mocks base method.
func (m *MockDevice) Driver() core.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(core.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockDeviceMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockDevice)(nil).Driver))
}

// FreeMemory mocks base method.
func (m *MockDevice) FreeMemory(memory core.DeviceMemory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeMemory", memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreeMemory indicates an expected call of FreeMemory.
func (mr *MockDeviceMockRecorder) FreeMemory(memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeMemory", reflect.TypeOf((*MockDevice)(nil).FreeMemory), memory)
}

// GetQueue mocks base method.
func (m *MockDevice) GetQueue(queueFamilyIndex, queueIndex int) (core.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueue", queueFamilyIndex, queueIndex)
	ret0, _ := ret[0].(core.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueue indicates an expected call of GetQueue.
func (mr *MockDeviceMockRecorder) GetQueue(queueFamilyIndex, queueIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue", reflect.TypeOf((*MockDevice)(nil).GetQueue), queueFamilyIndex, queueIndex)
}

// Handle mocks base method.
func (m *MockDevice) Handle() core.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkDevice)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDeviceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDevice)(nil).Handle))
}

// ResetFences mocks base method.
func (m *MockDevice) ResetFences(fences []core.Fence) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetFences", fences)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetFences indicates an expected call of ResetFences.
func (mr *MockDeviceMockRecorder) ResetFences(fences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFences", reflect.TypeOf((*MockDevice)(nil).ResetFences), fences)
}

// UpdateDescriptorSets mocks base method.
func (m *MockDevice) UpdateDescriptorSets(writes []core.WriteDescriptorSetOptions, copies []core.CopyDescriptorSetOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDescriptorSets", writes, copies)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDescriptorSets indicates an expected call of UpdateDescriptorSets.
func (mr *MockDeviceMockRecorder) UpdateDescriptorSets(writes, copies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescriptorSets", reflect.TypeOf((*MockDevice)(nil).UpdateDescriptorSets), writes, copies)
}

// WaitForFences mocks base method.
func (m *MockDevice) WaitForFences(waitForAll bool, timeout time.Duration, fences []core.Fence) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForFences", waitForAll, timeout, fences)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForFences indicates an expected call of WaitForFences.
func (mr *MockDeviceMockRecorder) WaitForFences(waitForAll, timeout, fences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForFences", reflect.TypeOf((*MockDevice)(nil).WaitForFences), waitForAll, timeout, fences)
}

// WaitForIdle mocks base method.
func (m *MockDevice) WaitForIdle() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForIdle")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForIdle indicates an expected call of WaitForIdle.
func (mr *MockDeviceMockRecorder) WaitForIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForIdle", reflect.TypeOf((*MockDevice)(nil).WaitForIdle))
}

// MockFence is a mock of Fence interface.
type MockFence struct {
	ctrl     *gomock.Controller
	recorder *MockFenceMockRecorder
}

// MockFenceMockRecorder is the mock recorder for MockFence.
type MockFenceMockRecorder struct {
	mock *MockFence
}

// NewMockFence creates a new mock instance.
func NewMockFence(ctrl *gomock.Controller) *MockFence {
	mock := &MockFence{ctrl: ctrl}
	mock.recorder = &MockFenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFence) EXPECT() *MockFenceMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockFence) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockFenceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockFence)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockFence) Handle() core.VkFence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkFence)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockFenceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockFence)(nil).Handle))
}

// MockFramebuffer is a mock of Framebuffer interface.
type MockFramebuffer struct {
	ctrl     *gomock.Controller
	recorder *MockFramebufferMockRecorder
}

// MockFramebufferMockRecorder is the mock recorder for MockFramebuffer.
type MockFramebufferMockRecorder struct {
	mock *MockFramebuffer
}

// NewMockFramebuffer creates a new mock instance.
func NewMockFramebuffer(ctrl *gomock.Controller) *MockFramebuffer {
	mock := &MockFramebuffer{ctrl: ctrl}
	mock.recorder = &MockFramebufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFramebuffer) EXPECT() *MockFramebufferMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockFramebuffer) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockFramebufferMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockFramebuffer)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockFramebuffer) Handle() core.VkFramebuffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkFramebuffer)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockFramebufferMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockFramebuffer)(nil).Handle))
}

// MockImage is a mock of Image interface.
type MockImage struct {
	ctrl     *gomock.Controller
	recorder *MockImageMockRecorder
}

// MockImageMockRecorder is the mock recorder for MockImage.
type MockImageMockRecorder struct {
	mock *MockImage
}

// NewMockImage creates a new mock instance.
func NewMockImage(ctrl *gomock.Controller) *MockImage {
	mock := &MockImage{ctrl: ctrl}
	mock.recorder = &MockImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImage) EXPECT() *MockImageMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockImage) Handle() core.VkImage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkImage)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockImageMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockImage)(nil).Handle))
}

// MockImageView is a mock of ImageView interface.
type MockImageView struct {
	ctrl     *gomock.Controller
	recorder *MockImageViewMockRecorder
}

// MockImageViewMockRecorder is the mock recorder for MockImageView.
type MockImageViewMockRecorder struct {
	mock *MockImageView
}

// NewMockImageView creates a new mock instance.
func NewMockImageView(ctrl *gomock.Controller) *MockImageView {
	mock := &MockImageView{ctrl: ctrl}
	mock.recorder = &MockImageViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageView) EXPECT() *MockImageViewMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockImageView) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockImageViewMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockImageView)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockImageView) Handle() core.VkImageView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkImageView)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockImageViewMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockImageView)(nil).Handle))
}

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockInstance) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockInstanceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockInstance)(nil).Destroy))
}

// Driver mocks base method.
func (m *MockInstance) Driver() core.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(core.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockInstanceMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockInstance)(nil).Driver))
}

// Handle mocks base method.
func (m *MockInstance) Handle() core.VkInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkInstance)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockInstanceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockInstance)(nil).Handle))
}

// PhysicalDevices mocks base method.
func (m *MockInstance) PhysicalDevices() ([]core.PhysicalDevice, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDevices")
	ret0, _ := ret[0].([]core.PhysicalDevice)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PhysicalDevices indicates an expected call of PhysicalDevices.
func (mr *MockInstanceMockRecorder) PhysicalDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDevices", reflect.TypeOf((*MockInstance)(nil).PhysicalDevices))
}

// MockLoader1_0 is a mock of Loader1_0 interface.
type MockLoader1_0 struct {
	ctrl     *gomock.Controller
	recorder *MockLoader1_0MockRecorder
}

// MockLoader1_0MockRecorder is the mock recorder for MockLoader1_0.
type MockLoader1_0MockRecorder struct {
	mock *MockLoader1_0
}

// NewMockLoader1_0 creates a new mock instance.
func NewMockLoader1_0(ctrl *gomock.Controller) *MockLoader1_0 {
	mock := &MockLoader1_0{ctrl: ctrl}
	mock.recorder = &MockLoader1_0MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader1_0) EXPECT() *MockLoader1_0MockRecorder {
	return m.recorder
}

// AvailableExtensions mocks base method.
func (m *MockLoader1_0) AvailableExtensions() (map[string]*common.ExtensionProperties, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableExtensions")
	ret0, _ := ret[0].(map[string]*common.ExtensionProperties)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableExtensions indicates an expected call of AvailableExtensions.
func (mr *MockLoader1_0MockRecorder) AvailableExtensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableExtensions", reflect.TypeOf((*MockLoader1_0)(nil).AvailableExtensions))
}

// AvailableLayers mocks base method.
func (m *MockLoader1_0) AvailableLayers() (map[string]*common.LayerProperties, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableLayers")
	ret0, _ := ret[0].(map[string]*common.LayerProperties)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableLayers indicates an expected call of AvailableLayers.
func (mr *MockLoader1_0MockRecorder) AvailableLayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableLayers", reflect.TypeOf((*MockLoader1_0)(nil).AvailableLayers))
}

// CreateBuffer mocks base method.
func (m *MockLoader1_0) CreateBuffer(device core.Device, o *core.BufferOptions) (core.Buffer, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuffer", device, o)
	ret0, _ := ret[0].(core.Buffer)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBuffer indicates an expected call of CreateBuffer.
func (mr *MockLoader1_0MockRecorder) CreateBuffer(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuffer", reflect.TypeOf((*MockLoader1_0)(nil).CreateBuffer), device, o)
}

// CreateCommandPool mocks base method.
func (m *MockLoader1_0) CreateCommandPool(device core.Device, o *core.CommandPoolOptions) (core.CommandPool, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommandPool", device, o)
	ret0, _ := ret[0].(core.CommandPool)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommandPool indicates an expected call of CreateCommandPool.
func (mr *MockLoader1_0MockRecorder) CreateCommandPool(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommandPool", reflect.TypeOf((*MockLoader1_0)(nil).CreateCommandPool), device, o)
}

// CreateDescriptorPool mocks base method.
func (m *MockLoader1_0) CreateDescriptorPool(device core.Device, o *core.DescriptorPoolOptions) (core.DescriptorPool, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDescriptorPool", device, o)
	ret0, _ := ret[0].(core.DescriptorPool)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDescriptorPool indicates an expected call of CreateDescriptorPool.
func (mr *MockLoader1_0MockRecorder) CreateDescriptorPool(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDescriptorPool", reflect.TypeOf((*MockLoader1_0)(nil).CreateDescriptorPool), device, o)
}

// CreateDescriptorSetLayout mocks base method.
func (m *MockLoader1_0) CreateDescriptorSetLayout(device core.Device, o *core.DescriptorSetLayoutOptions) (core.DescriptorSetLayout, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDescriptorSetLayout", device, o)
	ret0, _ := ret[0].(core.DescriptorSetLayout)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDescriptorSetLayout indicates an expected call of CreateDescriptorSetLayout.
func (mr *MockLoader1_0MockRecorder) CreateDescriptorSetLayout(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDescriptorSetLayout", reflect.TypeOf((*MockLoader1_0)(nil).CreateDescriptorSetLayout), device, o)
}

// CreateDevice mocks base method.
func (m *MockLoader1_0) CreateDevice(physicalDevice core.PhysicalDevice, options *core.DeviceOptions) (core.Device, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", physicalDevice, options)
	ret0, _ := ret[0].(core.Device)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockLoader1_0MockRecorder) CreateDevice(physicalDevice, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockLoader1_0)(nil).CreateDevice), physicalDevice, options)
}

// CreateFence mocks base method.
func (m *MockLoader1_0) CreateFence(device core.Device, o *core.FenceOptions) (core.Fence, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFence", device, o)
	ret0, _ := ret[0].(core.Fence)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFence indicates an expected call of CreateFence.
func (mr *MockLoader1_0MockRecorder) CreateFence(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFence", reflect.TypeOf((*MockLoader1_0)(nil).CreateFence), device, o)
}

// CreateFrameBuffer mocks base method.
func (m *MockLoader1_0) CreateFrameBuffer(device core.Device, o *core.FramebufferOptions) (core.Framebuffer, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFrameBuffer", device, o)
	ret0, _ := ret[0].(core.Framebuffer)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFrameBuffer indicates an expected call of CreateFrameBuffer.
func (mr *MockLoader1_0MockRecorder) CreateFrameBuffer(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFrameBuffer", reflect.TypeOf((*MockLoader1_0)(nil).CreateFrameBuffer), device, o)
}

// CreateGraphicsPipelines mocks base method.
func (m *MockLoader1_0) CreateGraphicsPipelines(device core.Device, o []*core.GraphicsPipelineOptions) ([]core.Pipeline, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphicsPipelines", device, o)
	ret0, _ := ret[0].([]core.Pipeline)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGraphicsPipelines indicates an expected call of CreateGraphicsPipelines.
func (mr *MockLoader1_0MockRecorder) CreateGraphicsPipelines(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphicsPipelines", reflect.TypeOf((*MockLoader1_0)(nil).CreateGraphicsPipelines), device, o)
}

// CreateImageView mocks base method.
func (m *MockLoader1_0) CreateImageView(device core.Device, o *core.ImageViewOptions) (core.ImageView, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageView", device, o)
	ret0, _ := ret[0].(core.ImageView)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateImageView indicates an expected call of CreateImageView.
func (mr *MockLoader1_0MockRecorder) CreateImageView(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageView", reflect.TypeOf((*MockLoader1_0)(nil).CreateImageView), device, o)
}

// CreateInstance mocks base method.
func (m *MockLoader1_0) CreateInstance(options *core.InstanceOptions) (core.Instance, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", options)
	ret0, _ := ret[0].(core.Instance)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockLoader1_0MockRecorder) CreateInstance(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockLoader1_0)(nil).CreateInstance), options)
}

// CreatePipelineLayout mocks base method.
func (m *MockLoader1_0) CreatePipelineLayout(device core.Device, o *core.PipelineLayoutOptions) (core.PipelineLayout, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipelineLayout", device, o)
	ret0, _ := ret[0].(core.PipelineLayout)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePipelineLayout indicates an expected call of CreatePipelineLayout.
func (mr *MockLoader1_0MockRecorder) CreatePipelineLayout(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineLayout", reflect.TypeOf((*MockLoader1_0)(nil).CreatePipelineLayout), device, o)
}

// CreateRenderPass mocks base method.
func (m *MockLoader1_0) CreateRenderPass(device core.Device, o *core.RenderPassOptions) (core.RenderPass, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRenderPass", device, o)
	ret0, _ := ret[0].(core.RenderPass)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRenderPass indicates an expected call of CreateRenderPass.
func (mr *MockLoader1_0MockRecorder) CreateRenderPass(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRenderPass", reflect.TypeOf((*MockLoader1_0)(nil).CreateRenderPass), device, o)
}

// CreateSemaphore mocks base method.
func (m *MockLoader1_0) CreateSemaphore(device core.Device, o *core.SemaphoreOptions) (core.Semaphore, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSemaphore", device, o)
	ret0, _ := ret[0].(core.Semaphore)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSemaphore indicates an expected call of CreateSemaphore.
func (mr *MockLoader1_0MockRecorder) CreateSemaphore(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSemaphore", reflect.TypeOf((*MockLoader1_0)(nil).CreateSemaphore), device, o)
}

// CreateShaderModule mocks base method.
func (m *MockLoader1_0) CreateShaderModule(device core.Device, o *core.ShaderModuleOptions) (core.ShaderModule, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShaderModule", device, o)
	ret0, _ := ret[0].(core.ShaderModule)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateShaderModule indicates an expected call of CreateShaderModule.
func (mr *MockLoader1_0MockRecorder) CreateShaderModule(device, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShaderModule", reflect.TypeOf((*MockLoader1_0)(nil).CreateShaderModule), device, o)
}

// Driver mocks base method.
func (m *MockLoader1_0) Driver() core.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(core.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockLoader1_0MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockLoader1_0)(nil).Driver))
}

// Version mocks base method.
func (m *MockLoader1_0) Version() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockLoader1_0MockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockLoader1_0)(nil).Version))
}

// MockPhysicalDevice is a mock of PhysicalDevice interface.
type MockPhysicalDevice struct {
	ctrl     *gomock.Controller
	recorder *MockPhysicalDeviceMockRecorder
}

// MockPhysicalDeviceMockRecorder is the mock recorder for MockPhysicalDevice.
type MockPhysicalDeviceMockRecorder struct {
	mock *MockPhysicalDevice
}

// NewMockPhysicalDevice creates a new mock instance.
func NewMockPhysicalDevice(ctrl *gomock.Controller) *MockPhysicalDevice {
	mock := &MockPhysicalDevice{ctrl: ctrl}
	mock.recorder = &MockPhysicalDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhysicalDevice) EXPECT() *MockPhysicalDeviceMockRecorder {
	return m.recorder
}

// AvailableExtensions mocks base method.
func (m *MockPhysicalDevice) AvailableExtensions() (map[string]*common.ExtensionProperties, core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableExtensions")
	ret0, _ := ret[0].(map[string]*common.ExtensionProperties)
	ret1, _ := ret[1].(core.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableExtensions indicates an expected call of AvailableExtensions.
func (mr *MockPhysicalDeviceMockRecorder) AvailableExtensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableExtensions", reflect.TypeOf((*MockPhysicalDevice)(nil).AvailableExtensions))
}

// Driver mocks base method.
func (m *MockPhysicalDevice) Driver() core.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(core.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockPhysicalDeviceMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockPhysicalDevice)(nil).Driver))
}

// Features mocks base method.
func (m *MockPhysicalDevice) Features() (*common.PhysicalDeviceFeatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].(*common.PhysicalDeviceFeatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Features indicates an expected call of Features.
func (mr *MockPhysicalDeviceMockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockPhysicalDevice)(nil).Features))
}

// Handle mocks base method.
func (m *MockPhysicalDevice) Handle() core.VkPhysicalDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkPhysicalDevice)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockPhysicalDeviceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPhysicalDevice)(nil).Handle))
}

// MemoryProperties mocks base method.
func (m *MockPhysicalDevice) MemoryProperties() (*core.PhysicalDeviceMemoryProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryProperties")
	ret0, _ := ret[0].(*core.PhysicalDeviceMemoryProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryProperties indicates an expected call of MemoryProperties.
func (mr *MockPhysicalDeviceMockRecorder) MemoryProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryProperties", reflect.TypeOf((*MockPhysicalDevice)(nil).MemoryProperties))
}

// Properties mocks base method.
func (m *MockPhysicalDevice) Properties() (*common.PhysicalDeviceProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties")
	ret0, _ := ret[0].(*common.PhysicalDeviceProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Properties indicates an expected call of Properties.
func (mr *MockPhysicalDeviceMockRecorder) Properties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties", reflect.TypeOf((*MockPhysicalDevice)(nil).Properties))
}

// QueueFamilyProperties mocks base method.
func (m *MockPhysicalDevice) QueueFamilyProperties() ([]*common.QueueFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueFamilyProperties")
	ret0, _ := ret[0].([]*common.QueueFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueFamilyProperties indicates an expected call of QueueFamilyProperties.
func (mr *MockPhysicalDeviceMockRecorder) QueueFamilyProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueFamilyProperties", reflect.TypeOf((*MockPhysicalDevice)(nil).QueueFamilyProperties))
}

// MockPipeline is a mock of Pipeline interface.
type MockPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineMockRecorder
}

// MockPipelineMockRecorder is the mock recorder for MockPipeline.
type MockPipelineMockRecorder struct {
	mock *MockPipeline
}

// NewMockPipeline creates a new mock instance.
func NewMockPipeline(ctrl *gomock.Controller) *MockPipeline {
	mock := &MockPipeline{ctrl: ctrl}
	mock.recorder = &MockPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeline) EXPECT() *MockPipelineMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockPipeline) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPipelineMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPipeline)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockPipeline) Handle() core.VkPipeline {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkPipeline)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockPipelineMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPipeline)(nil).Handle))
}

// MockPipelineLayout is a mock of PipelineLayout interface.
type MockPipelineLayout struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineLayoutMockRecorder
}

// MockPipelineLayoutMockRecorder is the mock recorder for MockPipelineLayout.
type MockPipelineLayoutMockRecorder struct {
	mock *MockPipelineLayout
}

// NewMockPipelineLayout creates a new mock instance.
func NewMockPipelineLayout(ctrl *gomock.Controller) *MockPipelineLayout {
	mock := &MockPipelineLayout{ctrl: ctrl}
	mock.recorder = &MockPipelineLayoutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineLayout) EXPECT() *MockPipelineLayoutMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockPipelineLayout) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPipelineLayoutMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPipelineLayout)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockPipelineLayout) Handle() core.VkPipelineLayout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkPipelineLayout)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockPipelineLayoutMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPipelineLayout)(nil).Handle))
}

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// Driver mocks base method.
func (m *MockQueue) Driver() core.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(core.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockQueueMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockQueue)(nil).Driver))
}

// Handle mocks base method.
func (m *MockQueue) Handle() core.VkQueue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkQueue)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockQueueMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockQueue)(nil).Handle))
}

// WaitForIdle mocks base method.
func (m *MockQueue) WaitForIdle() (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForIdle")
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForIdle indicates an expected call of WaitForIdle.
func (mr *MockQueueMockRecorder) WaitForIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForIdle", reflect.TypeOf((*MockQueue)(nil).WaitForIdle))
}

// MockRenderPass is a mock of RenderPass interface.
type MockRenderPass struct {
	ctrl     *gomock.Controller
	recorder *MockRenderPassMockRecorder
}

// MockRenderPassMockRecorder is the mock recorder for MockRenderPass.
type MockRenderPassMockRecorder struct {
	mock *MockRenderPass
}

// NewMockRenderPass creates a new mock instance.
func NewMockRenderPass(ctrl *gomock.Controller) *MockRenderPass {
	mock := &MockRenderPass{ctrl: ctrl}
	mock.recorder = &MockRenderPassMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderPass) EXPECT() *MockRenderPassMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockRenderPass) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockRenderPassMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockRenderPass)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockRenderPass) Handle() core.VkRenderPass {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkRenderPass)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockRenderPassMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockRenderPass)(nil).Handle))
}

// MockSemaphore is a mock of Semaphore interface.
type MockSemaphore struct {
	ctrl     *gomock.Controller
	recorder *MockSemaphoreMockRecorder
}

// MockSemaphoreMockRecorder is the mock recorder for MockSemaphore.
type MockSemaphoreMockRecorder struct {
	mock *MockSemaphore
}

// NewMockSemaphore creates a new mock instance.
func NewMockSemaphore(ctrl *gomock.Controller) *MockSemaphore {
	mock := &MockSemaphore{ctrl: ctrl}
	mock.recorder = &MockSemaphoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSemaphore) EXPECT() *MockSemaphoreMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockSemaphore) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSemaphoreMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSemaphore)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockSemaphore) Handle() core.VkSemaphore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkSemaphore)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockSemaphoreMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockSemaphore)(nil).Handle))
}

// MockShaderModule is a mock of ShaderModule interface.
type MockShaderModule struct {
	ctrl     *gomock.Controller
	recorder *MockShaderModuleMockRecorder
}

// MockShaderModuleMockRecorder is the mock recorder for MockShaderModule.
type MockShaderModuleMockRecorder struct {
	mock *MockShaderModule
}

// NewMockShaderModule creates a new mock instance.
func NewMockShaderModule(ctrl *gomock.Controller) *MockShaderModule {
	mock := &MockShaderModule{ctrl: ctrl}
	mock.recorder = &MockShaderModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShaderModule) EXPECT() *MockShaderModuleMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockShaderModule) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockShaderModuleMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockShaderModule)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockShaderModule) Handle() core.VkShaderModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkShaderModule)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockShaderModuleMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockShaderModule)(nil).Handle))
}

// MockSampler is a mock of Sampler interface.
type MockSampler struct {
	ctrl     *gomock.Controller
	recorder *MockSamplerMockRecorder
}

// MockSamplerMockRecorder is the mock recorder for MockSampler.
type MockSamplerMockRecorder struct {
	mock *MockSampler
}

// NewMockSampler creates a new mock instance.
func NewMockSampler(ctrl *gomock.Controller) *MockSampler {
	mock := &MockSampler{ctrl: ctrl}
	mock.recorder = &MockSamplerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSampler) EXPECT() *MockSamplerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockSampler) Handle() core.VkSampler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(core.VkSampler)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockSamplerMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockSampler)(nil).Handle))
}
