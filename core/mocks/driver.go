// Code generated by MockGen. DO NOT EDIT.
// Source: driveriface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	unsafe "unsafe"

	core "github.com/CannibalVox/VKng/core"
	common "github.com/CannibalVox/VKng/core/common"
	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// CreateDeviceDriver mocks base method.
func (m *MockDriver) CreateDeviceDriver(device core.VkDevice) (core.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceDriver", device)
	ret0, _ := ret[0].(core.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeviceDriver indicates an expected call of CreateDeviceDriver.
func (mr *MockDriverMockRecorder) CreateDeviceDriver(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceDriver", reflect.TypeOf((*MockDriver)(nil).CreateDeviceDriver), device)
}

// CreateInstanceDriver mocks base method.
func (m *MockDriver) CreateInstanceDriver(instance core.VkInstance) (core.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceDriver", instance)
	ret0, _ := ret[0].(core.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceDriver indicates an expected call of CreateInstanceDriver.
func (mr *MockDriverMockRecorder) CreateInstanceDriver(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceDriver", reflect.TypeOf((*MockDriver)(nil).CreateInstanceDriver), instance)
}

// Destroy mocks base method.
func (m *MockDriver) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDriverMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDriver)(nil).Destroy))
}

// LoadProcAddr mocks base method.
func (m *MockDriver) LoadProcAddr(name *core.Char) unsafe.Pointer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProcAddr", name)
	ret0, _ := ret[0].(unsafe.Pointer)
	return ret0
}

// LoadProcAddr indicates an expected call of LoadProcAddr.
func (mr *MockDriverMockRecorder) LoadProcAddr(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProcAddr", reflect.TypeOf((*MockDriver)(nil).LoadProcAddr), name)
}

// Version mocks base method.
func (m *MockDriver) Version() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockDriverMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockDriver)(nil).Version))
}

// VkAllocateCommandBuffers mocks base method.
func (m *MockDriver) VkAllocateCommandBuffers(device core.VkDevice, pAllocateInfo *core.VkCommandBufferAllocateInfo, pCommandBuffers *core.VkCommandBuffer) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkAllocateCommandBuffers", device, pAllocateInfo, pCommandBuffers)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkAllocateCommandBuffers indicates an expected call of VkAllocateCommandBuffers.
func (mr *MockDriverMockRecorder) VkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkAllocateCommandBuffers", reflect.TypeOf((*MockDriver)(nil).VkAllocateCommandBuffers), device, pAllocateInfo, pCommandBuffers)
}

// VkAllocateDescriptorSets mocks base method.
func (m *MockDriver) VkAllocateDescriptorSets(device core.VkDevice, pAllocateInfo *core.VkDescriptorSetAllocateInfo, pDescriptorSets *core.VkDescriptorSet) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkAllocateDescriptorSets", device, pAllocateInfo, pDescriptorSets)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkAllocateDescriptorSets indicates an expected call of VkAllocateDescriptorSets.
func (mr *MockDriverMockRecorder) VkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkAllocateDescriptorSets", reflect.TypeOf((*MockDriver)(nil).VkAllocateDescriptorSets), device, pAllocateInfo, pDescriptorSets)
}

// VkAllocateMemory mocks base method.
func (m *MockDriver) VkAllocateMemory(device core.VkDevice, pAllocateInfo *core.VkMemoryAllocateInfo, pAllocator *core.VkAllocationCallbacks, pMemory *core.VkDeviceMemory) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkAllocateMemory", device, pAllocateInfo, pAllocator, pMemory)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkAllocateMemory indicates an expected call of VkAllocateMemory.
func (mr *MockDriverMockRecorder) VkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkAllocateMemory", reflect.TypeOf((*MockDriver)(nil).VkAllocateMemory), device, pAllocateInfo, pAllocator, pMemory)
}

// VkBeginCommandBuffer mocks base method.
func (m *MockDriver) VkBeginCommandBuffer(commandBuffer core.VkCommandBuffer, pBeginInfo *core.VkCommandBufferBeginInfo) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkBeginCommandBuffer", commandBuffer, pBeginInfo)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkBeginCommandBuffer indicates an expected call of VkBeginCommandBuffer.
func (mr *MockDriverMockRecorder) VkBeginCommandBuffer(commandBuffer, pBeginInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkBeginCommandBuffer", reflect.TypeOf((*MockDriver)(nil).VkBeginCommandBuffer), commandBuffer, pBeginInfo)
}

// VkBindBufferMemory mocks base method.
func (m *MockDriver) VkBindBufferMemory(device core.VkDevice, buffer core.VkBuffer, memory core.VkDeviceMemory, memoryOffset core.VkDeviceSize) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkBindBufferMemory", device, buffer, memory, memoryOffset)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkBindBufferMemory indicates an expected call of VkBindBufferMemory.
func (mr *MockDriverMockRecorder) VkBindBufferMemory(device, buffer, memory, memoryOffset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkBindBufferMemory", reflect.TypeOf((*MockDriver)(nil).VkBindBufferMemory), device, buffer, memory, memoryOffset)
}

// VkBindBufferMemory2 mocks base method.
func (m *MockDriver) VkBindBufferMemory2(device core.VkDevice, bindInfoCount core.Uint32, pBindInfos *core.VkBindBufferMemoryInfo) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkBindBufferMemory2", device, bindInfoCount, pBindInfos)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkBindBufferMemory2 indicates an expected call of VkBindBufferMemory2.
func (mr *MockDriverMockRecorder) VkBindBufferMemory2(device, bindInfoCount, pBindInfos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkBindBufferMemory2", reflect.TypeOf((*MockDriver)(nil).VkBindBufferMemory2), device, bindInfoCount, pBindInfos)
}

// VkBindImageMemory mocks base method.
func (m *MockDriver) VkBindImageMemory(device core.VkDevice, image core.VkImage, memory core.VkDeviceMemory, memoryOffset core.VkDeviceSize) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkBindImageMemory", device, image, memory, memoryOffset)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkBindImageMemory indicates an expected call of VkBindImageMemory.
func (mr *MockDriverMockRecorder) VkBindImageMemory(device, image, memory, memoryOffset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkBindImageMemory", reflect.TypeOf((*MockDriver)(nil).VkBindImageMemory), device, image, memory, memoryOffset)
}

// VkBindImageMemory2 mocks base method.
func (m *MockDriver) VkBindImageMemory2(device core.VkDevice, bindInfoCount core.Uint32, pBindInfos *core.VkBindImageMemoryInfo) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkBindImageMemory2", device, bindInfoCount, pBindInfos)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkBindImageMemory2 indicates an expected call of VkBindImageMemory2.
func (mr *MockDriverMockRecorder) VkBindImageMemory2(device, bindInfoCount, pBindInfos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkBindImageMemory2", reflect.TypeOf((*MockDriver)(nil).VkBindImageMemory2), device, bindInfoCount, pBindInfos)
}

// VkCmdBeginQuery mocks base method.
func (m *MockDriver) VkCmdBeginQuery(commandBuffer core.VkCommandBuffer, queryPool core.VkQueryPool, query core.Uint32, flags core.VkQueryControlFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBeginQuery", commandBuffer, queryPool, query, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBeginQuery indicates an expected call of VkCmdBeginQuery.
func (mr *MockDriverMockRecorder) VkCmdBeginQuery(commandBuffer, queryPool, query, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBeginQuery", reflect.TypeOf((*MockDriver)(nil).VkCmdBeginQuery), commandBuffer, queryPool, query, flags)
}

// VkCmdBeginRenderPass mocks base method.
func (m *MockDriver) VkCmdBeginRenderPass(commandBuffer core.VkCommandBuffer, pRenderPassBegin *core.VkRenderPassBeginInfo, contents core.VkSubpassContents) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBeginRenderPass", commandBuffer, pRenderPassBegin, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBeginRenderPass indicates an expected call of VkCmdBeginRenderPass.
func (mr *MockDriverMockRecorder) VkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBeginRenderPass", reflect.TypeOf((*MockDriver)(nil).VkCmdBeginRenderPass), commandBuffer, pRenderPassBegin, contents)
}

// VkCmdBeginRenderPass2 mocks base method.
func (m *MockDriver) VkCmdBeginRenderPass2(commandBuffer core.VkCommandBuffer, pRenderPassBegin *core.VkRenderPassBeginInfo, pSubpassBeginInfo *core.VkSubpassBeginInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBeginRenderPass2", commandBuffer, pRenderPassBegin, pSubpassBeginInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBeginRenderPass2 indicates an expected call of VkCmdBeginRenderPass2.
func (mr *MockDriverMockRecorder) VkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBeginRenderPass2", reflect.TypeOf((*MockDriver)(nil).VkCmdBeginRenderPass2), commandBuffer, pRenderPassBegin, pSubpassBeginInfo)
}

// VkCmdBindDescriptorSets mocks base method.
func (m *MockDriver) VkCmdBindDescriptorSets(commandBuffer core.VkCommandBuffer, pipelineBindPoint core.VkPipelineBindPoint, layout core.VkPipelineLayout, firstSet, descriptorSetCount core.Uint32, pDescriptorSets *core.VkDescriptorSet, dynamicOffsetCount core.Uint32, pDynamicOffsets *core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBindDescriptorSets", commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBindDescriptorSets indicates an expected call of VkCmdBindDescriptorSets.
func (mr *MockDriverMockRecorder) VkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBindDescriptorSets", reflect.TypeOf((*MockDriver)(nil).VkCmdBindDescriptorSets), commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets)
}

// VkCmdBindIndexBuffer mocks base method.
func (m *MockDriver) VkCmdBindIndexBuffer(commandBuffer core.VkCommandBuffer, buffer core.VkBuffer, offset core.VkDeviceSize, indexType core.VkIndexType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBindIndexBuffer", commandBuffer, buffer, offset, indexType)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBindIndexBuffer indicates an expected call of VkCmdBindIndexBuffer.
func (mr *MockDriverMockRecorder) VkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBindIndexBuffer", reflect.TypeOf((*MockDriver)(nil).VkCmdBindIndexBuffer), commandBuffer, buffer, offset, indexType)
}

// VkCmdBindPipeline mocks base method.
func (m *MockDriver) VkCmdBindPipeline(commandBuffer core.VkCommandBuffer, pipelineBindPoint core.VkPipelineBindPoint, pipeline core.VkPipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBindPipeline", commandBuffer, pipelineBindPoint, pipeline)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBindPipeline indicates an expected call of VkCmdBindPipeline.
func (mr *MockDriverMockRecorder) VkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBindPipeline", reflect.TypeOf((*MockDriver)(nil).VkCmdBindPipeline), commandBuffer, pipelineBindPoint, pipeline)
}

// VkCmdBindVertexBuffers mocks base method.
func (m *MockDriver) VkCmdBindVertexBuffers(commandBuffer core.VkCommandBuffer, firstBinding, bindingCount core.Uint32, pBuffers *core.VkBuffer, pOffsets *core.VkDeviceSize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBindVertexBuffers", commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBindVertexBuffers indicates an expected call of VkCmdBindVertexBuffers.
func (mr *MockDriverMockRecorder) VkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBindVertexBuffers", reflect.TypeOf((*MockDriver)(nil).VkCmdBindVertexBuffers), commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets)
}

// VkCmdBlitImage mocks base method.
func (m *MockDriver) VkCmdBlitImage(commandBuffer core.VkCommandBuffer, srcImage core.VkImage, srcImageLayout core.VkImageLayout, dstImage core.VkImage, dstImageLayout core.VkImageLayout, regionCount core.Uint32, pRegions *core.VkImageBlit, filter core.VkFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBlitImage", commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBlitImage indicates an expected call of VkCmdBlitImage.
func (mr *MockDriverMockRecorder) VkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBlitImage", reflect.TypeOf((*MockDriver)(nil).VkCmdBlitImage), commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter)
}

// VkCmdClearAttachments mocks base method.
func (m *MockDriver) VkCmdClearAttachments(commandBuffer core.VkCommandBuffer, attachmentCount core.Uint32, pAttachments *core.VkClearAttachment, rectCount core.Uint32, pRects *core.VkClearRect) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdClearAttachments", commandBuffer, attachmentCount, pAttachments, rectCount, pRects)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdClearAttachments indicates an expected call of VkCmdClearAttachments.
func (mr *MockDriverMockRecorder) VkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdClearAttachments", reflect.TypeOf((*MockDriver)(nil).VkCmdClearAttachments), commandBuffer, attachmentCount, pAttachments, rectCount, pRects)
}

// VkCmdClearColorImage mocks base method.
func (m *MockDriver) VkCmdClearColorImage(commandBuffer core.VkCommandBuffer, image core.VkImage, imageLayout core.VkImageLayout, pColor *core.VkClearColorValue, rangeCount core.Uint32, pRanges *core.VkImageSubresourceRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdClearColorImage", commandBuffer, image, imageLayout, pColor, rangeCount, pRanges)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdClearColorImage indicates an expected call of VkCmdClearColorImage.
func (mr *MockDriverMockRecorder) VkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdClearColorImage", reflect.TypeOf((*MockDriver)(nil).VkCmdClearColorImage), commandBuffer, image, imageLayout, pColor, rangeCount, pRanges)
}

// VkCmdClearDepthStencilImage mocks base method.
func (m *MockDriver) VkCmdClearDepthStencilImage(commandBuffer core.VkCommandBuffer, image core.VkImage, imageLayout core.VkImageLayout, pDepthStencil *core.VkClearDepthStencilValue, rangeCount core.Uint32, pRanges *core.VkImageSubresourceRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdClearDepthStencilImage", commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdClearDepthStencilImage indicates an expected call of VkCmdClearDepthStencilImage.
func (mr *MockDriverMockRecorder) VkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdClearDepthStencilImage", reflect.TypeOf((*MockDriver)(nil).VkCmdClearDepthStencilImage), commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges)
}

// VkCmdCopyBuffer mocks base method.
func (m *MockDriver) VkCmdCopyBuffer(commandBuffer core.VkCommandBuffer, srcBuffer, dstBuffer core.VkBuffer, regionCount core.Uint32, pRegions *core.VkBufferCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdCopyBuffer", commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdCopyBuffer indicates an expected call of VkCmdCopyBuffer.
func (mr *MockDriverMockRecorder) VkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdCopyBuffer", reflect.TypeOf((*MockDriver)(nil).VkCmdCopyBuffer), commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions)
}

// VkCmdCopyBufferToImage mocks base method.
func (m *MockDriver) VkCmdCopyBufferToImage(commandBuffer core.VkCommandBuffer, srcBuffer core.VkBuffer, dstImage core.VkImage, dstImageLayout core.VkImageLayout, regionCount core.Uint32, pRegions *core.VkBufferImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdCopyBufferToImage", commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdCopyBufferToImage indicates an expected call of VkCmdCopyBufferToImage.
func (mr *MockDriverMockRecorder) VkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdCopyBufferToImage", reflect.TypeOf((*MockDriver)(nil).VkCmdCopyBufferToImage), commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions)
}

// VkCmdCopyImage mocks base method.
func (m *MockDriver) VkCmdCopyImage(commandBuffer core.VkCommandBuffer, srcImage core.VkImage, srcImageLayout core.VkImageLayout, dstImage core.VkImage, dstImageLayout core.VkImageLayout, regionCount core.Uint32, pRegions *core.VkImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdCopyImage", commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdCopyImage indicates an expected call of VkCmdCopyImage.
func (mr *MockDriverMockRecorder) VkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdCopyImage", reflect.TypeOf((*MockDriver)(nil).VkCmdCopyImage), commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)
}

// VkCmdCopyImageToBuffer mocks base method.
func (m *MockDriver) VkCmdCopyImageToBuffer(commandBuffer core.VkCommandBuffer, srcImage core.VkImage, srcImageLayout core.VkImageLayout, dstBuffer core.VkBuffer, regionCount core.Uint32, pRegions *core.VkBufferImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdCopyImageToBuffer", commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdCopyImageToBuffer indicates an expected call of VkCmdCopyImageToBuffer.
func (mr *MockDriverMockRecorder) VkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdCopyImageToBuffer", reflect.TypeOf((*MockDriver)(nil).VkCmdCopyImageToBuffer), commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions)
}

// VkCmdCopyQueryPoolResults mocks base method.
func (m *MockDriver) VkCmdCopyQueryPoolResults(commandBuffer core.VkCommandBuffer, queryPool core.VkQueryPool, firstQuery, queryCount core.Uint32, dstBuffer core.VkBuffer, dstOffset, stride core.VkDeviceSize, flags core.VkQueryResultFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdCopyQueryPoolResults", commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdCopyQueryPoolResults indicates an expected call of VkCmdCopyQueryPoolResults.
func (mr *MockDriverMockRecorder) VkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdCopyQueryPoolResults", reflect.TypeOf((*MockDriver)(nil).VkCmdCopyQueryPoolResults), commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags)
}

// VkCmdDispatch mocks base method.
func (m *MockDriver) VkCmdDispatch(commandBuffer core.VkCommandBuffer, groupCountX, groupCountY, groupCountZ core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDispatch", commandBuffer, groupCountX, groupCountY, groupCountZ)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDispatch indicates an expected call of VkCmdDispatch.
func (mr *MockDriverMockRecorder) VkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDispatch", reflect.TypeOf((*MockDriver)(nil).VkCmdDispatch), commandBuffer, groupCountX, groupCountY, groupCountZ)
}

// VkCmdDispatchBase mocks base method.
func (m *MockDriver) VkCmdDispatchBase(commandBuffer core.VkCommandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDispatchBase", commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDispatchBase indicates an expected call of VkCmdDispatchBase.
func (mr *MockDriverMockRecorder) VkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDispatchBase", reflect.TypeOf((*MockDriver)(nil).VkCmdDispatchBase), commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
}

// VkCmdDispatchIndirect mocks base method.
func (m *MockDriver) VkCmdDispatchIndirect(commandBuffer core.VkCommandBuffer, buffer core.VkBuffer, offset core.VkDeviceSize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDispatchIndirect", commandBuffer, buffer, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDispatchIndirect indicates an expected call of VkCmdDispatchIndirect.
func (mr *MockDriverMockRecorder) VkCmdDispatchIndirect(commandBuffer, buffer, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDispatchIndirect", reflect.TypeOf((*MockDriver)(nil).VkCmdDispatchIndirect), commandBuffer, buffer, offset)
}

// VkCmdDraw mocks base method.
func (m *MockDriver) VkCmdDraw(commandBuffer core.VkCommandBuffer, vertexCount, instanceCount, firstVertex, firstInstance core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDraw", commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDraw indicates an expected call of VkCmdDraw.
func (mr *MockDriverMockRecorder) VkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDraw", reflect.TypeOf((*MockDriver)(nil).VkCmdDraw), commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance)
}

// VkCmdDrawIndexed mocks base method.
func (m *MockDriver) VkCmdDrawIndexed(commandBuffer core.VkCommandBuffer, indexCount, instanceCount, firstIndex core.Uint32, vertexOffset core.Int32, firstInstance core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDrawIndexed", commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDrawIndexed indicates an expected call of VkCmdDrawIndexed.
func (mr *MockDriverMockRecorder) VkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDrawIndexed", reflect.TypeOf((*MockDriver)(nil).VkCmdDrawIndexed), commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)
}

// VkCmdDrawIndexedIndirect mocks base method.
func (m *MockDriver) VkCmdDrawIndexedIndirect(commandBuffer core.VkCommandBuffer, buffer core.VkBuffer, offset core.VkDeviceSize, drawCount, stride core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDrawIndexedIndirect", commandBuffer, buffer, offset, drawCount, stride)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDrawIndexedIndirect indicates an expected call of VkCmdDrawIndexedIndirect.
func (mr *MockDriverMockRecorder) VkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDrawIndexedIndirect", reflect.TypeOf((*MockDriver)(nil).VkCmdDrawIndexedIndirect), commandBuffer, buffer, offset, drawCount, stride)
}

// VkCmdDrawIndexedIndirectCount mocks base method.
func (m *MockDriver) VkCmdDrawIndexedIndirectCount(commandBuffer core.VkCommandBuffer, buffer core.VkBuffer, offset core.VkDeviceSize, countBuffer core.VkBuffer, countBufferOffset core.VkDeviceSize, maxDrawCount, stride core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDrawIndexedIndirectCount", commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDrawIndexedIndirectCount indicates an expected call of VkCmdDrawIndexedIndirectCount.
func (mr *MockDriverMockRecorder) VkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDrawIndexedIndirectCount", reflect.TypeOf((*MockDriver)(nil).VkCmdDrawIndexedIndirectCount), commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
}

// VkCmdDrawIndirect mocks base method.
func (m *MockDriver) VkCmdDrawIndirect(commandBuffer core.VkCommandBuffer, buffer core.VkBuffer, offset core.VkDeviceSize, drawCount, stride core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDrawIndirect", commandBuffer, buffer, offset, drawCount, stride)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDrawIndirect indicates an expected call of VkCmdDrawIndirect.
func (mr *MockDriverMockRecorder) VkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDrawIndirect", reflect.TypeOf((*MockDriver)(nil).VkCmdDrawIndirect), commandBuffer, buffer, offset, drawCount, stride)
}

// VkCmdDrawIndirectCount mocks base method.
func (m *MockDriver) VkCmdDrawIndirectCount(commandBuffer core.VkCommandBuffer, buffer core.VkBuffer, offset core.VkDeviceSize, countBuffer core.VkBuffer, countBufferOffset core.VkDeviceSize, maxDrawCount, stride core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDrawIndirectCount", commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDrawIndirectCount indicates an expected call of VkCmdDrawIndirectCount.
func (mr *MockDriverMockRecorder) VkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDrawIndirectCount", reflect.TypeOf((*MockDriver)(nil).VkCmdDrawIndirectCount), commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
}

// VkCmdEndQuery mocks base method.
func (m *MockDriver) VkCmdEndQuery(commandBuffer core.VkCommandBuffer, queryPool core.VkQueryPool, query core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdEndQuery", commandBuffer, queryPool, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdEndQuery indicates an expected call of VkCmdEndQuery.
func (mr *MockDriverMockRecorder) VkCmdEndQuery(commandBuffer, queryPool, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdEndQuery", reflect.TypeOf((*MockDriver)(nil).VkCmdEndQuery), commandBuffer, queryPool, query)
}

// VkCmdEndRenderPass mocks base method.
func (m *MockDriver) VkCmdEndRenderPass(commandBuffer core.VkCommandBuffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdEndRenderPass", commandBuffer)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdEndRenderPass indicates an expected call of VkCmdEndRenderPass.
func (mr *MockDriverMockRecorder) VkCmdEndRenderPass(commandBuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdEndRenderPass", reflect.TypeOf((*MockDriver)(nil).VkCmdEndRenderPass), commandBuffer)
}

// VkCmdEndRenderPass2 mocks base method.
func (m *MockDriver) VkCmdEndRenderPass2(commandBuffer core.VkCommandBuffer, pSubpassEndInfo *core.VkSubpassEndInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdEndRenderPass2", commandBuffer, pSubpassEndInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdEndRenderPass2 indicates an expected call of VkCmdEndRenderPass2.
func (mr *MockDriverMockRecorder) VkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdEndRenderPass2", reflect.TypeOf((*MockDriver)(nil).VkCmdEndRenderPass2), commandBuffer, pSubpassEndInfo)
}

// VkCmdExecuteCommands mocks base method.
func (m *MockDriver) VkCmdExecuteCommands(commandBuffer core.VkCommandBuffer, commandBufferCount core.Uint32, pCommandBuffers *core.VkCommandBuffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdExecuteCommands", commandBuffer, commandBufferCount, pCommandBuffers)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdExecuteCommands indicates an expected call of VkCmdExecuteCommands.
func (mr *MockDriverMockRecorder) VkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdExecuteCommands", reflect.TypeOf((*MockDriver)(nil).VkCmdExecuteCommands), commandBuffer, commandBufferCount, pCommandBuffers)
}

// VkCmdFillBuffer mocks base method.
func (m *MockDriver) VkCmdFillBuffer(commandBuffer core.VkCommandBuffer, dstBuffer core.VkBuffer, dstOffset, size core.VkDeviceSize, data core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdFillBuffer", commandBuffer, dstBuffer, dstOffset, size, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdFillBuffer indicates an expected call of VkCmdFillBuffer.
func (mr *MockDriverMockRecorder) VkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdFillBuffer", reflect.TypeOf((*MockDriver)(nil).VkCmdFillBuffer), commandBuffer, dstBuffer, dstOffset, size, data)
}

// VkCmdNextSubpass mocks base method.
func (m *MockDriver) VkCmdNextSubpass(commandBuffer core.VkCommandBuffer, contents core.VkSubpassContents) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdNextSubpass", commandBuffer, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdNextSubpass indicates an expected call of VkCmdNextSubpass.
func (mr *MockDriverMockRecorder) VkCmdNextSubpass(commandBuffer, contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdNextSubpass", reflect.TypeOf((*MockDriver)(nil).VkCmdNextSubpass), commandBuffer, contents)
}

// VkCmdNextSubpass2 mocks base method.
func (m *MockDriver) VkCmdNextSubpass2(commandBuffer core.VkCommandBuffer, pSubpassBeginInfo *core.VkSubpassBeginInfo, pSubpassEndInfo *core.VkSubpassEndInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdNextSubpass2", commandBuffer, pSubpassBeginInfo, pSubpassEndInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdNextSubpass2 indicates an expected call of VkCmdNextSubpass2.
func (mr *MockDriverMockRecorder) VkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdNextSubpass2", reflect.TypeOf((*MockDriver)(nil).VkCmdNextSubpass2), commandBuffer, pSubpassBeginInfo, pSubpassEndInfo)
}

// VkCmdPipelineBarrier mocks base method.
func (m *MockDriver) VkCmdPipelineBarrier(commandBuffer core.VkCommandBuffer, srcStageMask, dstStageMask core.VkPipelineStageFlags, dependencyFlags core.VkDependencyFlags, memoryBarrierCount core.Uint32, pMemoryBarriers *core.VkMemoryBarrier, bufferMemoryBarrierCount core.Uint32, pBufferMemoryBarriers *core.VkBufferMemoryBarrier, imageMemoryBarrierCount core.Uint32, pImageMemoryBarriers *core.VkImageMemoryBarrier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdPipelineBarrier", commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdPipelineBarrier indicates an expected call of VkCmdPipelineBarrier.
func (mr *MockDriverMockRecorder) VkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdPipelineBarrier", reflect.TypeOf((*MockDriver)(nil).VkCmdPipelineBarrier), commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)
}

// VkCmdPushConstants mocks base method.
func (m *MockDriver) VkCmdPushConstants(commandBuffer core.VkCommandBuffer, layout core.VkPipelineLayout, stageFlags core.VkShaderStageFlags, offset, size core.Uint32, pValues unsafe.Pointer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdPushConstants", commandBuffer, layout, stageFlags, offset, size, pValues)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdPushConstants indicates an expected call of VkCmdPushConstants.
func (mr *MockDriverMockRecorder) VkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdPushConstants", reflect.TypeOf((*MockDriver)(nil).VkCmdPushConstants), commandBuffer, layout, stageFlags, offset, size, pValues)
}

// VkCmdResetEvent mocks base method.
func (m *MockDriver) VkCmdResetEvent(commandBuffer core.VkCommandBuffer, event core.VkEvent, stageMask core.VkPipelineStageFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdResetEvent", commandBuffer, event, stageMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdResetEvent indicates an expected call of VkCmdResetEvent.
func (mr *MockDriverMockRecorder) VkCmdResetEvent(commandBuffer, event, stageMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdResetEvent", reflect.TypeOf((*MockDriver)(nil).VkCmdResetEvent), commandBuffer, event, stageMask)
}

// VkCmdResetQueryPool mocks base method.
func (m *MockDriver) VkCmdResetQueryPool(commandBuffer core.VkCommandBuffer, queryPool core.VkQueryPool, firstQuery, queryCount core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdResetQueryPool", commandBuffer, queryPool, firstQuery, queryCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdResetQueryPool indicates an expected call of VkCmdResetQueryPool.
func (mr *MockDriverMockRecorder) VkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdResetQueryPool", reflect.TypeOf((*MockDriver)(nil).VkCmdResetQueryPool), commandBuffer, queryPool, firstQuery, queryCount)
}

// VkCmdResolveImage mocks base method.
func (m *MockDriver) VkCmdResolveImage(commandBuffer core.VkCommandBuffer, srcImage core.VkImage, srcImageLayout core.VkImageLayout, dstImage core.VkImage, dstImageLayout core.VkImageLayout, regionCount core.Uint32, pRegions *core.VkImageResolve) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdResolveImage", commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdResolveImage indicates an expected call of VkCmdResolveImage.
func (mr *MockDriverMockRecorder) VkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdResolveImage", reflect.TypeOf((*MockDriver)(nil).VkCmdResolveImage), commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)
}

// VkCmdSetBlendConstants mocks base method.
func (m *MockDriver) VkCmdSetBlendConstants(commandBuffer core.VkCommandBuffer, blendConstants *core.Float) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetBlendConstants", commandBuffer, blendConstants)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetBlendConstants indicates an expected call of VkCmdSetBlendConstants.
func (mr *MockDriverMockRecorder) VkCmdSetBlendConstants(commandBuffer, blendConstants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetBlendConstants", reflect.TypeOf((*MockDriver)(nil).VkCmdSetBlendConstants), commandBuffer, blendConstants)
}

// VkCmdSetDepthBias mocks base method.
func (m *MockDriver) VkCmdSetDepthBias(commandBuffer core.VkCommandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor core.Float) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetDepthBias", commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetDepthBias indicates an expected call of VkCmdSetDepthBias.
func (mr *MockDriverMockRecorder) VkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetDepthBias", reflect.TypeOf((*MockDriver)(nil).VkCmdSetDepthBias), commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor)
}

// VkCmdSetDepthBounds mocks base method.
func (m *MockDriver) VkCmdSetDepthBounds(commandBuffer core.VkCommandBuffer, minDepthBounds, maxDepthBounds core.Float) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetDepthBounds", commandBuffer, minDepthBounds, maxDepthBounds)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetDepthBounds indicates an expected call of VkCmdSetDepthBounds.
func (mr *MockDriverMockRecorder) VkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetDepthBounds", reflect.TypeOf((*MockDriver)(nil).VkCmdSetDepthBounds), commandBuffer, minDepthBounds, maxDepthBounds)
}

// VkCmdSetDeviceMask mocks base method.
func (m *MockDriver) VkCmdSetDeviceMask(commandBuffer core.VkCommandBuffer, deviceMask core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetDeviceMask", commandBuffer, deviceMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetDeviceMask indicates an expected call of VkCmdSetDeviceMask.
func (mr *MockDriverMockRecorder) VkCmdSetDeviceMask(commandBuffer, deviceMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetDeviceMask", reflect.TypeOf((*MockDriver)(nil).VkCmdSetDeviceMask), commandBuffer, deviceMask)
}

// VkCmdSetEvent mocks base method.
func (m *MockDriver) VkCmdSetEvent(commandBuffer core.VkCommandBuffer, event core.VkEvent, stageMask core.VkPipelineStageFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetEvent", commandBuffer, event, stageMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetEvent indicates an expected call of VkCmdSetEvent.
func (mr *MockDriverMockRecorder) VkCmdSetEvent(commandBuffer, event, stageMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetEvent", reflect.TypeOf((*MockDriver)(nil).VkCmdSetEvent), commandBuffer, event, stageMask)
}

// VkCmdSetLineWidth mocks base method.
func (m *MockDriver) VkCmdSetLineWidth(commandBuffer core.VkCommandBuffer, lineWidth core.Float) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetLineWidth", commandBuffer, lineWidth)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetLineWidth indicates an expected call of VkCmdSetLineWidth.
func (mr *MockDriverMockRecorder) VkCmdSetLineWidth(commandBuffer, lineWidth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetLineWidth", reflect.TypeOf((*MockDriver)(nil).VkCmdSetLineWidth), commandBuffer, lineWidth)
}

// VkCmdSetScissor mocks base method.
func (m *MockDriver) VkCmdSetScissor(commandBuffer core.VkCommandBuffer, firstScissor, scissorCount core.Uint32, pScissors *core.VkRect2D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetScissor", commandBuffer, firstScissor, scissorCount, pScissors)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetScissor indicates an expected call of VkCmdSetScissor.
func (mr *MockDriverMockRecorder) VkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetScissor", reflect.TypeOf((*MockDriver)(nil).VkCmdSetScissor), commandBuffer, firstScissor, scissorCount, pScissors)
}

// VkCmdSetStencilCompareMask mocks base method.
func (m *MockDriver) VkCmdSetStencilCompareMask(commandBuffer core.VkCommandBuffer, faceMask core.VkStencilFaceFlags, compareMask core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetStencilCompareMask", commandBuffer, faceMask, compareMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetStencilCompareMask indicates an expected call of VkCmdSetStencilCompareMask.
func (mr *MockDriverMockRecorder) VkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetStencilCompareMask", reflect.TypeOf((*MockDriver)(nil).VkCmdSetStencilCompareMask), commandBuffer, faceMask, compareMask)
}

// VkCmdSetStencilReference mocks base method.
func (m *MockDriver) VkCmdSetStencilReference(commandBuffer core.VkCommandBuffer, faceMask core.VkStencilFaceFlags, reference core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetStencilReference", commandBuffer, faceMask, reference)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetStencilReference indicates an expected call of VkCmdSetStencilReference.
func (mr *MockDriverMockRecorder) VkCmdSetStencilReference(commandBuffer, faceMask, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetStencilReference", reflect.TypeOf((*MockDriver)(nil).VkCmdSetStencilReference), commandBuffer, faceMask, reference)
}

// VkCmdSetStencilWriteMask mocks base method.
func (m *MockDriver) VkCmdSetStencilWriteMask(commandBuffer core.VkCommandBuffer, faceMask core.VkStencilFaceFlags, writeMask core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetStencilWriteMask", commandBuffer, faceMask, writeMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetStencilWriteMask indicates an expected call of VkCmdSetStencilWriteMask.
func (mr *MockDriverMockRecorder) VkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetStencilWriteMask", reflect.TypeOf((*MockDriver)(nil).VkCmdSetStencilWriteMask), commandBuffer, faceMask, writeMask)
}

// VkCmdSetViewport mocks base method.
func (m *MockDriver) VkCmdSetViewport(commandBuffer core.VkCommandBuffer, firstViewport, viewportCount core.Uint32, pViewports *core.VkViewport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetViewport", commandBuffer, firstViewport, viewportCount, pViewports)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetViewport indicates an expected call of VkCmdSetViewport.
func (mr *MockDriverMockRecorder) VkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetViewport", reflect.TypeOf((*MockDriver)(nil).VkCmdSetViewport), commandBuffer, firstViewport, viewportCount, pViewports)
}

// VkCmdUpdateBuffer mocks base method.
func (m *MockDriver) VkCmdUpdateBuffer(commandBuffer core.VkCommandBuffer, dstBuffer core.VkBuffer, dstOffset, dataSize core.VkDeviceSize, pData unsafe.Pointer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdUpdateBuffer", commandBuffer, dstBuffer, dstOffset, dataSize, pData)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdUpdateBuffer indicates an expected call of VkCmdUpdateBuffer.
func (mr *MockDriverMockRecorder) VkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdUpdateBuffer", reflect.TypeOf((*MockDriver)(nil).VkCmdUpdateBuffer), commandBuffer, dstBuffer, dstOffset, dataSize, pData)
}

// VkCmdWaitEvents mocks base method.
func (m *MockDriver) VkCmdWaitEvents(commandBuffer core.VkCommandBuffer, eventCount core.Uint32, pEvents *core.VkEvent, srcStageMask, dstStageMask core.VkPipelineStageFlags, memoryBarrierCount core.Uint32, pMemoryBarriers *core.VkMemoryBarrier, bufferMemoryBarrierCount core.Uint32, pBufferMemoryBarriers *core.VkBufferMemoryBarrier, imageMemoryBarrierCount core.Uint32, pImageMemoryBarriers *core.VkImageMemoryBarrier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdWaitEvents", commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdWaitEvents indicates an expected call of VkCmdWaitEvents.
func (mr *MockDriverMockRecorder) VkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdWaitEvents", reflect.TypeOf((*MockDriver)(nil).VkCmdWaitEvents), commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)
}

// VkCmdWriteTimestamp mocks base method.
func (m *MockDriver) VkCmdWriteTimestamp(commandBuffer core.VkCommandBuffer, pipelineStage core.VkPipelineStageFlags, queryPool core.VkQueryPool, query core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdWriteTimestamp", commandBuffer, pipelineStage, queryPool, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdWriteTimestamp indicates an expected call of VkCmdWriteTimestamp.
func (mr *MockDriverMockRecorder) VkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdWriteTimestamp", reflect.TypeOf((*MockDriver)(nil).VkCmdWriteTimestamp), commandBuffer, pipelineStage, queryPool, query)
}

// VkCreateBuffer mocks base method.
func (m *MockDriver) VkCreateBuffer(device core.VkDevice, pCreateInfo *core.VkBufferCreateInfo, pAllocator *core.VkAllocationCallbacks, pBuffer *core.VkBuffer) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateBuffer", device, pCreateInfo, pAllocator, pBuffer)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateBuffer indicates an expected call of VkCreateBuffer.
func (mr *MockDriverMockRecorder) VkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateBuffer", reflect.TypeOf((*MockDriver)(nil).VkCreateBuffer), device, pCreateInfo, pAllocator, pBuffer)
}

// VkCreateBufferView mocks base method.
func (m *MockDriver) VkCreateBufferView(device core.VkDevice, pCreateInfo *core.VkBufferViewCreateInfo, pAllocator *core.VkAllocationCallbacks, pView *core.VkBufferView) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateBufferView", device, pCreateInfo, pAllocator, pView)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateBufferView indicates an expected call of VkCreateBufferView.
func (mr *MockDriverMockRecorder) VkCreateBufferView(device, pCreateInfo, pAllocator, pView interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateBufferView", reflect.TypeOf((*MockDriver)(nil).VkCreateBufferView), device, pCreateInfo, pAllocator, pView)
}

// VkCreateCommandPool mocks base method.
func (m *MockDriver) VkCreateCommandPool(device core.VkDevice, pCreateInfo *core.VkCommandPoolCreateInfo, pAllocator *core.VkAllocationCallbacks, pCommandPool *core.VkCommandPool) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateCommandPool", device, pCreateInfo, pAllocator, pCommandPool)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateCommandPool indicates an expected call of VkCreateCommandPool.
func (mr *MockDriverMockRecorder) VkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateCommandPool", reflect.TypeOf((*MockDriver)(nil).VkCreateCommandPool), device, pCreateInfo, pAllocator, pCommandPool)
}

// VkCreateComputePipelines mocks base method.
func (m *MockDriver) VkCreateComputePipelines(device core.VkDevice, pipelineCache core.VkPipelineCache, createInfoCount core.Uint32, pCreateInfos *core.VkComputePipelineCreateInfo, pAllocator *core.VkAllocationCallbacks, pPipelines *core.VkPipeline) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateComputePipelines", device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateComputePipelines indicates an expected call of VkCreateComputePipelines.
func (mr *MockDriverMockRecorder) VkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateComputePipelines", reflect.TypeOf((*MockDriver)(nil).VkCreateComputePipelines), device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
}

// VkCreateDescriptorPool mocks base method.
func (m *MockDriver) VkCreateDescriptorPool(device core.VkDevice, pCreateInfo *core.VkDescriptorPoolCreateInfo, pAllocator *core.VkAllocationCallbacks, pDescriptorPool *core.VkDescriptorPool) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateDescriptorPool", device, pCreateInfo, pAllocator, pDescriptorPool)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateDescriptorPool indicates an expected call of VkCreateDescriptorPool.
func (mr *MockDriverMockRecorder) VkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateDescriptorPool", reflect.TypeOf((*MockDriver)(nil).VkCreateDescriptorPool), device, pCreateInfo, pAllocator, pDescriptorPool)
}

// VkCreateDescriptorSetLayout mocks base method.
func (m *MockDriver) VkCreateDescriptorSetLayout(device core.VkDevice, pCreateInfo *core.VkDescriptorSetLayoutCreateInfo, pAllocator *core.VkAllocationCallbacks, pSetLayout *core.VkDescriptorSetLayout) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateDescriptorSetLayout", device, pCreateInfo, pAllocator, pSetLayout)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateDescriptorSetLayout indicates an expected call of VkCreateDescriptorSetLayout.
func (mr *MockDriverMockRecorder) VkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateDescriptorSetLayout", reflect.TypeOf((*MockDriver)(nil).VkCreateDescriptorSetLayout), device, pCreateInfo, pAllocator, pSetLayout)
}

// VkCreateDescriptorUpdateTemplate mocks base method.
func (m *MockDriver) VkCreateDescriptorUpdateTemplate(device core.VkDevice, pCreateInfo *core.VkDescriptorUpdateTemplateCreateInfo, pAllocator *core.VkAllocationCallbacks, pDescriptorUpdateTemplate *core.VkDescriptorUpdateTemplate) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateDescriptorUpdateTemplate", device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateDescriptorUpdateTemplate indicates an expected call of VkCreateDescriptorUpdateTemplate.
func (mr *MockDriverMockRecorder) VkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateDescriptorUpdateTemplate", reflect.TypeOf((*MockDriver)(nil).VkCreateDescriptorUpdateTemplate), device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate)
}

// VkCreateDevice mocks base method.
func (m *MockDriver) VkCreateDevice(physicalDevice core.VkPhysicalDevice, pCreateInfo *core.VkDeviceCreateInfo, pAllocator *core.VkAllocationCallbacks, pDevice *core.VkDevice) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateDevice", physicalDevice, pCreateInfo, pAllocator, pDevice)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateDevice indicates an expected call of VkCreateDevice.
func (mr *MockDriverMockRecorder) VkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateDevice", reflect.TypeOf((*MockDriver)(nil).VkCreateDevice), physicalDevice, pCreateInfo, pAllocator, pDevice)
}

// VkCreateEvent mocks base method.
func (m *MockDriver) VkCreateEvent(device core.VkDevice, pCreateInfo *core.VkEventCreateInfo, pAllocator *core.VkAllocationCallbacks, pEvent *core.VkEvent) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateEvent", device, pCreateInfo, pAllocator, pEvent)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateEvent indicates an expected call of VkCreateEvent.
func (mr *MockDriverMockRecorder) VkCreateEvent(device, pCreateInfo, pAllocator, pEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateEvent", reflect.TypeOf((*MockDriver)(nil).VkCreateEvent), device, pCreateInfo, pAllocator, pEvent)
}

// VkCreateFence mocks base method.
func (m *MockDriver) VkCreateFence(device core.VkDevice, pCreateInfo *core.VkFenceCreateInfo, pAllocator *core.VkAllocationCallbacks, pFence *core.VkFence) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateFence", device, pCreateInfo, pAllocator, pFence)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateFence indicates an expected call of VkCreateFence.
func (mr *MockDriverMockRecorder) VkCreateFence(device, pCreateInfo, pAllocator, pFence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateFence", reflect.TypeOf((*MockDriver)(nil).VkCreateFence), device, pCreateInfo, pAllocator, pFence)
}

// VkCreateFramebuffer mocks base method.
func (m *MockDriver) VkCreateFramebuffer(device core.VkDevice, pCreateInfo *core.VkFramebufferCreateInfo, pAllocator *core.VkAllocationCallbacks, pFramebuffer *core.VkFramebuffer) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateFramebuffer", device, pCreateInfo, pAllocator, pFramebuffer)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateFramebuffer indicates an expected call of VkCreateFramebuffer.
func (mr *MockDriverMockRecorder) VkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateFramebuffer", reflect.TypeOf((*MockDriver)(nil).VkCreateFramebuffer), device, pCreateInfo, pAllocator, pFramebuffer)
}

// VkCreateGraphicsPipelines mocks base method.
func (m *MockDriver) VkCreateGraphicsPipelines(device core.VkDevice, pipelineCache core.VkPipelineCache, createInfoCount core.Uint32, pCreateInfos *core.VkGraphicsPipelineCreateInfo, pAllocator *core.VkAllocationCallbacks, pPipelines *core.VkPipeline) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateGraphicsPipelines", device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateGraphicsPipelines indicates an expected call of VkCreateGraphicsPipelines.
func (mr *MockDriverMockRecorder) VkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateGraphicsPipelines", reflect.TypeOf((*MockDriver)(nil).VkCreateGraphicsPipelines), device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
}

// VkCreateImage mocks base method.
func (m *MockDriver) VkCreateImage(device core.VkDevice, pCreateInfo *core.VkImageCreateInfo, pAllocator *core.VkAllocationCallbacks, pImage *core.VkImage) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateImage", device, pCreateInfo, pAllocator, pImage)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateImage indicates an expected call of VkCreateImage.
func (mr *MockDriverMockRecorder) VkCreateImage(device, pCreateInfo, pAllocator, pImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateImage", reflect.TypeOf((*MockDriver)(nil).VkCreateImage), device, pCreateInfo, pAllocator, pImage)
}

// VkCreateImageView mocks base method.
func (m *MockDriver) VkCreateImageView(device core.VkDevice, pCreateInfo *core.VkImageViewCreateInfo, pAllocator *core.VkAllocationCallbacks, pView *core.VkImageView) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateImageView", device, pCreateInfo, pAllocator, pView)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateImageView indicates an expected call of VkCreateImageView.
func (mr *MockDriverMockRecorder) VkCreateImageView(device, pCreateInfo, pAllocator, pView interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateImageView", reflect.TypeOf((*MockDriver)(nil).VkCreateImageView), device, pCreateInfo, pAllocator, pView)
}

// VkCreateInstance mocks base method.
func (m *MockDriver) VkCreateInstance(pCreateInfo *core.VkInstanceCreateInfo, pAllocator *core.VkAllocationCallbacks, pInstance *core.VkInstance) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateInstance", pCreateInfo, pAllocator, pInstance)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateInstance indicates an expected call of VkCreateInstance.
func (mr *MockDriverMockRecorder) VkCreateInstance(pCreateInfo, pAllocator, pInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateInstance", reflect.TypeOf((*MockDriver)(nil).VkCreateInstance), pCreateInfo, pAllocator, pInstance)
}

// VkCreatePipelineCache mocks base method.
func (m *MockDriver) VkCreatePipelineCache(device core.VkDevice, pCreateInfo *core.VkPipelineCacheCreateInfo, pAllocator *core.VkAllocationCallbacks, pPipelineCache *core.VkPipelineCache) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreatePipelineCache", device, pCreateInfo, pAllocator, pPipelineCache)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreatePipelineCache indicates an expected call of VkCreatePipelineCache.
func (mr *MockDriverMockRecorder) VkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreatePipelineCache", reflect.TypeOf((*MockDriver)(nil).VkCreatePipelineCache), device, pCreateInfo, pAllocator, pPipelineCache)
}

// VkCreatePipelineLayout mocks base method.
func (m *MockDriver) VkCreatePipelineLayout(device core.VkDevice, pCreateInfo *core.VkPipelineLayoutCreateInfo, pAllocator *core.VkAllocationCallbacks, pPipelineLayout *core.VkPipelineLayout) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreatePipelineLayout", device, pCreateInfo, pAllocator, pPipelineLayout)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreatePipelineLayout indicates an expected call of VkCreatePipelineLayout.
func (mr *MockDriverMockRecorder) VkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreatePipelineLayout", reflect.TypeOf((*MockDriver)(nil).VkCreatePipelineLayout), device, pCreateInfo, pAllocator, pPipelineLayout)
}

// VkCreateQueryPool mocks base method.
func (m *MockDriver) VkCreateQueryPool(device core.VkDevice, pCreateInfo *core.VkQueryPoolCreateInfo, pAllocator *core.VkAllocationCallbacks, pQueryPool *core.VkQueryPool) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateQueryPool", device, pCreateInfo, pAllocator, pQueryPool)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateQueryPool indicates an expected call of VkCreateQueryPool.
func (mr *MockDriverMockRecorder) VkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateQueryPool", reflect.TypeOf((*MockDriver)(nil).VkCreateQueryPool), device, pCreateInfo, pAllocator, pQueryPool)
}

// VkCreateRenderPass mocks base method.
func (m *MockDriver) VkCreateRenderPass(device core.VkDevice, pCreateInfo *core.VkRenderPassCreateInfo, pAllocator *core.VkAllocationCallbacks, pRenderPass *core.VkRenderPass) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateRenderPass", device, pCreateInfo, pAllocator, pRenderPass)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateRenderPass indicates an expected call of VkCreateRenderPass.
func (mr *MockDriverMockRecorder) VkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateRenderPass", reflect.TypeOf((*MockDriver)(nil).VkCreateRenderPass), device, pCreateInfo, pAllocator, pRenderPass)
}

// VkCreateRenderPass2 mocks base method.
func (m *MockDriver) VkCreateRenderPass2(device core.VkDevice, pCreateInfo *core.VkRenderPassCreateInfo2, pAllocator *core.VkAllocationCallbacks, pRenderPass *core.VkRenderPass) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateRenderPass2", device, pCreateInfo, pAllocator, pRenderPass)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateRenderPass2 indicates an expected call of VkCreateRenderPass2.
func (mr *MockDriverMockRecorder) VkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateRenderPass2", reflect.TypeOf((*MockDriver)(nil).VkCreateRenderPass2), device, pCreateInfo, pAllocator, pRenderPass)
}

// VkCreateSampler mocks base method.
func (m *MockDriver) VkCreateSampler(device core.VkDevice, pCreateInfo *core.VkSamplerCreateInfo, pAllocator *core.VkAllocationCallbacks, pSampler *core.VkSampler) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateSampler", device, pCreateInfo, pAllocator, pSampler)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateSampler indicates an expected call of VkCreateSampler.
func (mr *MockDriverMockRecorder) VkCreateSampler(device, pCreateInfo, pAllocator, pSampler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateSampler", reflect.TypeOf((*MockDriver)(nil).VkCreateSampler), device, pCreateInfo, pAllocator, pSampler)
}

// VkCreateSamplerYcbcrConversion mocks base method.
func (m *MockDriver) VkCreateSamplerYcbcrConversion(device core.VkDevice, pCreateInfo *core.VkSamplerYcbcrConversionCreateInfo, pAllocator *core.VkAllocationCallbacks, pYcbcrConversion *core.VkSamplerYcbcrConversion) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateSamplerYcbcrConversion", device, pCreateInfo, pAllocator, pYcbcrConversion)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateSamplerYcbcrConversion indicates an expected call of VkCreateSamplerYcbcrConversion.
func (mr *MockDriverMockRecorder) VkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateSamplerYcbcrConversion", reflect.TypeOf((*MockDriver)(nil).VkCreateSamplerYcbcrConversion), device, pCreateInfo, pAllocator, pYcbcrConversion)
}

// VkCreateSemaphore mocks base method.
func (m *MockDriver) VkCreateSemaphore(device core.VkDevice, pCreateInfo *core.VkSemaphoreCreateInfo, pAllocator *core.VkAllocationCallbacks, pSemaphore *core.VkSemaphore) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateSemaphore", device, pCreateInfo, pAllocator, pSemaphore)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateSemaphore indicates an expected call of VkCreateSemaphore.
func (mr *MockDriverMockRecorder) VkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateSemaphore", reflect.TypeOf((*MockDriver)(nil).VkCreateSemaphore), device, pCreateInfo, pAllocator, pSemaphore)
}

// VkCreateShaderModule mocks base method.
func (m *MockDriver) VkCreateShaderModule(device core.VkDevice, pCreateInfo *core.VkShaderModuleCreateInfo, pAllocator *core.VkAllocationCallbacks, pShaderModule *core.VkShaderModule) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateShaderModule", device, pCreateInfo, pAllocator, pShaderModule)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateShaderModule indicates an expected call of VkCreateShaderModule.
func (mr *MockDriverMockRecorder) VkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateShaderModule", reflect.TypeOf((*MockDriver)(nil).VkCreateShaderModule), device, pCreateInfo, pAllocator, pShaderModule)
}

// VkDestroyBuffer mocks base method.
func (m *MockDriver) VkDestroyBuffer(device core.VkDevice, buffer core.VkBuffer, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyBuffer", device, buffer, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyBuffer indicates an expected call of VkDestroyBuffer.
func (mr *MockDriverMockRecorder) VkDestroyBuffer(device, buffer, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyBuffer", reflect.TypeOf((*MockDriver)(nil).VkDestroyBuffer), device, buffer, pAllocator)
}

// VkDestroyBufferView mocks base method.
func (m *MockDriver) VkDestroyBufferView(device core.VkDevice, bufferView core.VkBufferView, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyBufferView", device, bufferView, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyBufferView indicates an expected call of VkDestroyBufferView.
func (mr *MockDriverMockRecorder) VkDestroyBufferView(device, bufferView, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyBufferView", reflect.TypeOf((*MockDriver)(nil).VkDestroyBufferView), device, bufferView, pAllocator)
}

// VkDestroyCommandPool mocks base method.
func (m *MockDriver) VkDestroyCommandPool(device core.VkDevice, commandPool core.VkCommandPool, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyCommandPool", device, commandPool, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyCommandPool indicates an expected call of VkDestroyCommandPool.
func (mr *MockDriverMockRecorder) VkDestroyCommandPool(device, commandPool, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyCommandPool", reflect.TypeOf((*MockDriver)(nil).VkDestroyCommandPool), device, commandPool, pAllocator)
}

// VkDestroyDescriptorPool mocks base method.
func (m *MockDriver) VkDestroyDescriptorPool(device core.VkDevice, descriptorPool core.VkDescriptorPool, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyDescriptorPool", device, descriptorPool, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyDescriptorPool indicates an expected call of VkDestroyDescriptorPool.
func (mr *MockDriverMockRecorder) VkDestroyDescriptorPool(device, descriptorPool, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyDescriptorPool", reflect.TypeOf((*MockDriver)(nil).VkDestroyDescriptorPool), device, descriptorPool, pAllocator)
}

// VkDestroyDescriptorSetLayout mocks base method.
func (m *MockDriver) VkDestroyDescriptorSetLayout(device core.VkDevice, descriptorSetLayout core.VkDescriptorSetLayout, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyDescriptorSetLayout", device, descriptorSetLayout, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyDescriptorSetLayout indicates an expected call of VkDestroyDescriptorSetLayout.
func (mr *MockDriverMockRecorder) VkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyDescriptorSetLayout", reflect.TypeOf((*MockDriver)(nil).VkDestroyDescriptorSetLayout), device, descriptorSetLayout, pAllocator)
}

// VkDestroyDescriptorUpdateTemplate mocks base method.
func (m *MockDriver) VkDestroyDescriptorUpdateTemplate(device core.VkDevice, descriptorUpdateTemplate core.VkDescriptorUpdateTemplate, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyDescriptorUpdateTemplate", device, descriptorUpdateTemplate, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyDescriptorUpdateTemplate indicates an expected call of VkDestroyDescriptorUpdateTemplate.
func (mr *MockDriverMockRecorder) VkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyDescriptorUpdateTemplate", reflect.TypeOf((*MockDriver)(nil).VkDestroyDescriptorUpdateTemplate), device, descriptorUpdateTemplate, pAllocator)
}

// VkDestroyDevice mocks base method.
func (m *MockDriver) VkDestroyDevice(device core.VkDevice, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyDevice", device, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyDevice indicates an expected call of VkDestroyDevice.
func (mr *MockDriverMockRecorder) VkDestroyDevice(device, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyDevice", reflect.TypeOf((*MockDriver)(nil).VkDestroyDevice), device, pAllocator)
}

// VkDestroyEvent mocks base method.
func (m *MockDriver) VkDestroyEvent(device core.VkDevice, event core.VkEvent, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyEvent", device, event, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyEvent indicates an expected call of VkDestroyEvent.
func (mr *MockDriverMockRecorder) VkDestroyEvent(device, event, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyEvent", reflect.TypeOf((*MockDriver)(nil).VkDestroyEvent), device, event, pAllocator)
}

// VkDestroyFence mocks base method.
func (m *MockDriver) VkDestroyFence(device core.VkDevice, fence core.VkFence, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyFence", device, fence, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyFence indicates an expected call of VkDestroyFence.
func (mr *MockDriverMockRecorder) VkDestroyFence(device, fence, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyFence", reflect.TypeOf((*MockDriver)(nil).VkDestroyFence), device, fence, pAllocator)
}

// VkDestroyFramebuffer mocks base method.
func (m *MockDriver) VkDestroyFramebuffer(device core.VkDevice, framebuffer core.VkFramebuffer, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyFramebuffer", device, framebuffer, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyFramebuffer indicates an expected call of VkDestroyFramebuffer.
func (mr *MockDriverMockRecorder) VkDestroyFramebuffer(device, framebuffer, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyFramebuffer", reflect.TypeOf((*MockDriver)(nil).VkDestroyFramebuffer), device, framebuffer, pAllocator)
}

// VkDestroyImage mocks base method.
func (m *MockDriver) VkDestroyImage(device core.VkDevice, image core.VkImage, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyImage", device, image, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyImage indicates an expected call of VkDestroyImage.
func (mr *MockDriverMockRecorder) VkDestroyImage(device, image, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyImage", reflect.TypeOf((*MockDriver)(nil).VkDestroyImage), device, image, pAllocator)
}

// VkDestroyImageView mocks base method.
func (m *MockDriver) VkDestroyImageView(device core.VkDevice, imageView core.VkImageView, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyImageView", device, imageView, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyImageView indicates an expected call of VkDestroyImageView.
func (mr *MockDriverMockRecorder) VkDestroyImageView(device, imageView, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyImageView", reflect.TypeOf((*MockDriver)(nil).VkDestroyImageView), device, imageView, pAllocator)
}

// VkDestroyInstance mocks base method.
func (m *MockDriver) VkDestroyInstance(instance core.VkInstance, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyInstance", instance, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyInstance indicates an expected call of VkDestroyInstance.
func (mr *MockDriverMockRecorder) VkDestroyInstance(instance, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyInstance", reflect.TypeOf((*MockDriver)(nil).VkDestroyInstance), instance, pAllocator)
}

// VkDestroyPipeline mocks base method.
func (m *MockDriver) VkDestroyPipeline(device core.VkDevice, pipeline core.VkPipeline, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyPipeline", device, pipeline, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyPipeline indicates an expected call of VkDestroyPipeline.
func (mr *MockDriverMockRecorder) VkDestroyPipeline(device, pipeline, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyPipeline", reflect.TypeOf((*MockDriver)(nil).VkDestroyPipeline), device, pipeline, pAllocator)
}

// VkDestroyPipelineCache mocks base method.
func (m *MockDriver) VkDestroyPipelineCache(device core.VkDevice, pipelineCache core.VkPipelineCache, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyPipelineCache", device, pipelineCache, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyPipelineCache indicates an expected call of VkDestroyPipelineCache.
func (mr *MockDriverMockRecorder) VkDestroyPipelineCache(device, pipelineCache, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyPipelineCache", reflect.TypeOf((*MockDriver)(nil).VkDestroyPipelineCache), device, pipelineCache, pAllocator)
}

// VkDestroyPipelineLayout mocks base method.
func (m *MockDriver) VkDestroyPipelineLayout(device core.VkDevice, pipelineLayout core.VkPipelineLayout, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyPipelineLayout", device, pipelineLayout, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyPipelineLayout indicates an expected call of VkDestroyPipelineLayout.
func (mr *MockDriverMockRecorder) VkDestroyPipelineLayout(device, pipelineLayout, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyPipelineLayout", reflect.TypeOf((*MockDriver)(nil).VkDestroyPipelineLayout), device, pipelineLayout, pAllocator)
}

// VkDestroyQueryPool mocks base method.
func (m *MockDriver) VkDestroyQueryPool(device core.VkDevice, queryPool core.VkQueryPool, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyQueryPool", device, queryPool, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyQueryPool indicates an expected call of VkDestroyQueryPool.
func (mr *MockDriverMockRecorder) VkDestroyQueryPool(device, queryPool, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyQueryPool", reflect.TypeOf((*MockDriver)(nil).VkDestroyQueryPool), device, queryPool, pAllocator)
}

// VkDestroyRenderPass mocks base method.
func (m *MockDriver) VkDestroyRenderPass(device core.VkDevice, renderPass core.VkRenderPass, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyRenderPass", device, renderPass, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyRenderPass indicates an expected call of VkDestroyRenderPass.
func (mr *MockDriverMockRecorder) VkDestroyRenderPass(device, renderPass, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyRenderPass", reflect.TypeOf((*MockDriver)(nil).VkDestroyRenderPass), device, renderPass, pAllocator)
}

// VkDestroySampler mocks base method.
func (m *MockDriver) VkDestroySampler(device core.VkDevice, sampler core.VkSampler, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroySampler", device, sampler, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroySampler indicates an expected call of VkDestroySampler.
func (mr *MockDriverMockRecorder) VkDestroySampler(device, sampler, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroySampler", reflect.TypeOf((*MockDriver)(nil).VkDestroySampler), device, sampler, pAllocator)
}

// VkDestroySamplerYcbcrConversion mocks base method.
func (m *MockDriver) VkDestroySamplerYcbcrConversion(device core.VkDevice, ycbcrConversion core.VkSamplerYcbcrConversion, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroySamplerYcbcrConversion", device, ycbcrConversion, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroySamplerYcbcrConversion indicates an expected call of VkDestroySamplerYcbcrConversion.
func (mr *MockDriverMockRecorder) VkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroySamplerYcbcrConversion", reflect.TypeOf((*MockDriver)(nil).VkDestroySamplerYcbcrConversion), device, ycbcrConversion, pAllocator)
}

// VkDestroySemaphore mocks base method.
func (m *MockDriver) VkDestroySemaphore(device core.VkDevice, semaphore core.VkSemaphore, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroySemaphore", device, semaphore, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroySemaphore indicates an expected call of VkDestroySemaphore.
func (mr *MockDriverMockRecorder) VkDestroySemaphore(device, semaphore, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroySemaphore", reflect.TypeOf((*MockDriver)(nil).VkDestroySemaphore), device, semaphore, pAllocator)
}

// VkDestroyShaderModule mocks base method.
func (m *MockDriver) VkDestroyShaderModule(device core.VkDevice, shaderModule core.VkShaderModule, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyShaderModule", device, shaderModule, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyShaderModule indicates an expected call of VkDestroyShaderModule.
func (mr *MockDriverMockRecorder) VkDestroyShaderModule(device, shaderModule, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyShaderModule", reflect.TypeOf((*MockDriver)(nil).VkDestroyShaderModule), device, shaderModule, pAllocator)
}

// VkDeviceWaitIdle mocks base method.
func (m *MockDriver) VkDeviceWaitIdle(device core.VkDevice) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDeviceWaitIdle", device)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkDeviceWaitIdle indicates an expected call of VkDeviceWaitIdle.
func (mr *MockDriverMockRecorder) VkDeviceWaitIdle(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDeviceWaitIdle", reflect.TypeOf((*MockDriver)(nil).VkDeviceWaitIdle), device)
}

// VkEndCommandBuffer mocks base method.
func (m *MockDriver) VkEndCommandBuffer(commandBuffer core.VkCommandBuffer) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEndCommandBuffer", commandBuffer)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEndCommandBuffer indicates an expected call of VkEndCommandBuffer.
func (mr *MockDriverMockRecorder) VkEndCommandBuffer(commandBuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEndCommandBuffer", reflect.TypeOf((*MockDriver)(nil).VkEndCommandBuffer), commandBuffer)
}

// VkEnumerateDeviceExtensionProperties mocks base method.
func (m *MockDriver) VkEnumerateDeviceExtensionProperties(physicalDevice core.VkPhysicalDevice, pLayerName *core.Char, pPropertyCount *core.Uint32, pProperties *core.VkExtensionProperties) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumerateDeviceExtensionProperties", physicalDevice, pLayerName, pPropertyCount, pProperties)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumerateDeviceExtensionProperties indicates an expected call of VkEnumerateDeviceExtensionProperties.
func (mr *MockDriverMockRecorder) VkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumerateDeviceExtensionProperties", reflect.TypeOf((*MockDriver)(nil).VkEnumerateDeviceExtensionProperties), physicalDevice, pLayerName, pPropertyCount, pProperties)
}

// VkEnumerateDeviceLayerProperties mocks base method.
func (m *MockDriver) VkEnumerateDeviceLayerProperties(physicalDevice core.VkPhysicalDevice, pPropertyCount *core.Uint32, pProperties *core.VkLayerProperties) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumerateDeviceLayerProperties", physicalDevice, pPropertyCount, pProperties)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumerateDeviceLayerProperties indicates an expected call of VkEnumerateDeviceLayerProperties.
func (mr *MockDriverMockRecorder) VkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumerateDeviceLayerProperties", reflect.TypeOf((*MockDriver)(nil).VkEnumerateDeviceLayerProperties), physicalDevice, pPropertyCount, pProperties)
}

// VkEnumerateInstanceExtensionProperties mocks base method.
func (m *MockDriver) VkEnumerateInstanceExtensionProperties(pLayerName *core.Char, pPropertyCount *core.Uint32, pProperties *core.VkExtensionProperties) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumerateInstanceExtensionProperties", pLayerName, pPropertyCount, pProperties)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumerateInstanceExtensionProperties indicates an expected call of VkEnumerateInstanceExtensionProperties.
func (mr *MockDriverMockRecorder) VkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumerateInstanceExtensionProperties", reflect.TypeOf((*MockDriver)(nil).VkEnumerateInstanceExtensionProperties), pLayerName, pPropertyCount, pProperties)
}

// VkEnumerateInstanceLayerProperties mocks base method.
func (m *MockDriver) VkEnumerateInstanceLayerProperties(pPropertyCount *core.Uint32, pProperties *core.VkLayerProperties) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumerateInstanceLayerProperties", pPropertyCount, pProperties)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumerateInstanceLayerProperties indicates an expected call of VkEnumerateInstanceLayerProperties.
func (mr *MockDriverMockRecorder) VkEnumerateInstanceLayerProperties(pPropertyCount, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumerateInstanceLayerProperties", reflect.TypeOf((*MockDriver)(nil).VkEnumerateInstanceLayerProperties), pPropertyCount, pProperties)
}

// VkEnumerateInstanceVersion mocks base method.
func (m *MockDriver) VkEnumerateInstanceVersion(pApiVersion *core.Uint32) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumerateInstanceVersion", pApiVersion)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumerateInstanceVersion indicates an expected call of VkEnumerateInstanceVersion.
func (mr *MockDriverMockRecorder) VkEnumerateInstanceVersion(pApiVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumerateInstanceVersion", reflect.TypeOf((*MockDriver)(nil).VkEnumerateInstanceVersion), pApiVersion)
}

// VkEnumeratePhysicalDeviceGroups mocks base method.
func (m *MockDriver) VkEnumeratePhysicalDeviceGroups(instance core.VkInstance, pPhysicalDeviceGroupCount *core.Uint32, pPhysicalDeviceGroupProperties *core.VkPhysicalDeviceGroupProperties) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumeratePhysicalDeviceGroups", instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumeratePhysicalDeviceGroups indicates an expected call of VkEnumeratePhysicalDeviceGroups.
func (mr *MockDriverMockRecorder) VkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumeratePhysicalDeviceGroups", reflect.TypeOf((*MockDriver)(nil).VkEnumeratePhysicalDeviceGroups), instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties)
}

// VkEnumeratePhysicalDevices mocks base method.
func (m *MockDriver) VkEnumeratePhysicalDevices(instance core.VkInstance, pPhysicalDeviceCount *core.Uint32, pPhysicalDevices *core.VkPhysicalDevice) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumeratePhysicalDevices", instance, pPhysicalDeviceCount, pPhysicalDevices)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumeratePhysicalDevices indicates an expected call of VkEnumeratePhysicalDevices.
func (mr *MockDriverMockRecorder) VkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumeratePhysicalDevices", reflect.TypeOf((*MockDriver)(nil).VkEnumeratePhysicalDevices), instance, pPhysicalDeviceCount, pPhysicalDevices)
}

// VkFlushMappedMemoryRanges mocks base method.
func (m *MockDriver) VkFlushMappedMemoryRanges(device core.VkDevice, memoryRangeCount core.Uint32, pMemoryRanges *core.VkMappedMemoryRange) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkFlushMappedMemoryRanges", device, memoryRangeCount, pMemoryRanges)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkFlushMappedMemoryRanges indicates an expected call of VkFlushMappedMemoryRanges.
func (mr *MockDriverMockRecorder) VkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkFlushMappedMemoryRanges", reflect.TypeOf((*MockDriver)(nil).VkFlushMappedMemoryRanges), device, memoryRangeCount, pMemoryRanges)
}

// VkFreeCommandBuffers mocks base method.
func (m *MockDriver) VkFreeCommandBuffers(device core.VkDevice, commandPool core.VkCommandPool, commandBufferCount core.Uint32, pCommandBuffers *core.VkCommandBuffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkFreeCommandBuffers", device, commandPool, commandBufferCount, pCommandBuffers)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkFreeCommandBuffers indicates an expected call of VkFreeCommandBuffers.
func (mr *MockDriverMockRecorder) VkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkFreeCommandBuffers", reflect.TypeOf((*MockDriver)(nil).VkFreeCommandBuffers), device, commandPool, commandBufferCount, pCommandBuffers)
}

// VkFreeDescriptorSets mocks base method.
func (m *MockDriver) VkFreeDescriptorSets(device core.VkDevice, descriptorPool core.VkDescriptorPool, descriptorSetCount core.Uint32, pDescriptorSets *core.VkDescriptorSet) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkFreeDescriptorSets", device, descriptorPool, descriptorSetCount, pDescriptorSets)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkFreeDescriptorSets indicates an expected call of VkFreeDescriptorSets.
func (mr *MockDriverMockRecorder) VkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkFreeDescriptorSets", reflect.TypeOf((*MockDriver)(nil).VkFreeDescriptorSets), device, descriptorPool, descriptorSetCount, pDescriptorSets)
}

// VkFreeMemory mocks base method.
func (m *MockDriver) VkFreeMemory(device core.VkDevice, memory core.VkDeviceMemory, pAllocator *core.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkFreeMemory", device, memory, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkFreeMemory indicates an expected call of VkFreeMemory.
func (mr *MockDriverMockRecorder) VkFreeMemory(device, memory, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkFreeMemory", reflect.TypeOf((*MockDriver)(nil).VkFreeMemory), device, memory, pAllocator)
}

// VkGetBufferDeviceAddress mocks base method.
func (m *MockDriver) VkGetBufferDeviceAddress(device core.VkDevice, pInfo *core.VkBufferDeviceAddressInfo) (core.VkDeviceAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetBufferDeviceAddress", device, pInfo)
	ret0, _ := ret[0].(core.VkDeviceAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetBufferDeviceAddress indicates an expected call of VkGetBufferDeviceAddress.
func (mr *MockDriverMockRecorder) VkGetBufferDeviceAddress(device, pInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetBufferDeviceAddress", reflect.TypeOf((*MockDriver)(nil).VkGetBufferDeviceAddress), device, pInfo)
}

// VkGetBufferMemoryRequirements mocks base method.
func (m *MockDriver) VkGetBufferMemoryRequirements(device core.VkDevice, buffer core.VkBuffer, pMemoryRequirements *core.VkMemoryRequirements) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetBufferMemoryRequirements", device, buffer, pMemoryRequirements)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetBufferMemoryRequirements indicates an expected call of VkGetBufferMemoryRequirements.
func (mr *MockDriverMockRecorder) VkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetBufferMemoryRequirements", reflect.TypeOf((*MockDriver)(nil).VkGetBufferMemoryRequirements), device, buffer, pMemoryRequirements)
}

// VkGetBufferMemoryRequirements2 mocks base method.
func (m *MockDriver) VkGetBufferMemoryRequirements2(device core.VkDevice, pInfo *core.VkBufferMemoryRequirementsInfo2, pMemoryRequirements *core.VkMemoryRequirements2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetBufferMemoryRequirements2", device, pInfo, pMemoryRequirements)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetBufferMemoryRequirements2 indicates an expected call of VkGetBufferMemoryRequirements2.
func (mr *MockDriverMockRecorder) VkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetBufferMemoryRequirements2", reflect.TypeOf((*MockDriver)(nil).VkGetBufferMemoryRequirements2), device, pInfo, pMemoryRequirements)
}

// VkGetBufferOpaqueCaptureAddress mocks base method.
func (m *MockDriver) VkGetBufferOpaqueCaptureAddress(device core.VkDevice, pInfo *core.VkBufferDeviceAddressInfo) (core.Uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetBufferOpaqueCaptureAddress", device, pInfo)
	ret0, _ := ret[0].(core.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetBufferOpaqueCaptureAddress indicates an expected call of VkGetBufferOpaqueCaptureAddress.
func (mr *MockDriverMockRecorder) VkGetBufferOpaqueCaptureAddress(device, pInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetBufferOpaqueCaptureAddress", reflect.TypeOf((*MockDriver)(nil).VkGetBufferOpaqueCaptureAddress), device, pInfo)
}

// VkGetDescriptorSetLayoutSupport mocks base method.
func (m *MockDriver) VkGetDescriptorSetLayoutSupport(device core.VkDevice, pCreateInfo *core.VkDescriptorSetLayoutCreateInfo, pSupport *core.VkDescriptorSetLayoutSupport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetDescriptorSetLayoutSupport", device, pCreateInfo, pSupport)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetDescriptorSetLayoutSupport indicates an expected call of VkGetDescriptorSetLayoutSupport.
func (mr *MockDriverMockRecorder) VkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetDescriptorSetLayoutSupport", reflect.TypeOf((*MockDriver)(nil).VkGetDescriptorSetLayoutSupport), device, pCreateInfo, pSupport)
}

// VkGetDeviceGroupPeerMemoryFeatures mocks base method.
func (m *MockDriver) VkGetDeviceGroupPeerMemoryFeatures(device core.VkDevice, heapIndex, localDeviceIndex, remoteDeviceIndex core.Uint32, pPeerMemoryFeatures *core.VkPeerMemoryFeatureFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetDeviceGroupPeerMemoryFeatures", device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetDeviceGroupPeerMemoryFeatures indicates an expected call of VkGetDeviceGroupPeerMemoryFeatures.
func (mr *MockDriverMockRecorder) VkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetDeviceGroupPeerMemoryFeatures", reflect.TypeOf((*MockDriver)(nil).VkGetDeviceGroupPeerMemoryFeatures), device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures)
}

// VkGetDeviceMemoryCommitment mocks base method.
func (m *MockDriver) VkGetDeviceMemoryCommitment(device core.VkDevice, memory core.VkDeviceMemory, pCommittedMemoryInBytes *core.VkDeviceSize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetDeviceMemoryCommitment", device, memory, pCommittedMemoryInBytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetDeviceMemoryCommitment indicates an expected call of VkGetDeviceMemoryCommitment.
func (mr *MockDriverMockRecorder) VkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetDeviceMemoryCommitment", reflect.TypeOf((*MockDriver)(nil).VkGetDeviceMemoryCommitment), device, memory, pCommittedMemoryInBytes)
}

// VkGetDeviceMemoryOpaqueCaptureAddress mocks base method.
func (m *MockDriver) VkGetDeviceMemoryOpaqueCaptureAddress(device core.VkDevice, pInfo *core.VkDeviceMemoryOpaqueCaptureAddressInfo) (core.Uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetDeviceMemoryOpaqueCaptureAddress", device, pInfo)
	ret0, _ := ret[0].(core.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetDeviceMemoryOpaqueCaptureAddress indicates an expected call of VkGetDeviceMemoryOpaqueCaptureAddress.
func (mr *MockDriverMockRecorder) VkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetDeviceMemoryOpaqueCaptureAddress", reflect.TypeOf((*MockDriver)(nil).VkGetDeviceMemoryOpaqueCaptureAddress), device, pInfo)
}

// VkGetDeviceQueue mocks base method.
func (m *MockDriver) VkGetDeviceQueue(device core.VkDevice, queueFamilyIndex, queueIndex core.Uint32, pQueue *core.VkQueue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetDeviceQueue", device, queueFamilyIndex, queueIndex, pQueue)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetDeviceQueue indicates an expected call of VkGetDeviceQueue.
func (mr *MockDriverMockRecorder) VkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetDeviceQueue", reflect.TypeOf((*MockDriver)(nil).VkGetDeviceQueue), device, queueFamilyIndex, queueIndex, pQueue)
}

// VkGetDeviceQueue2 mocks base method.
func (m *MockDriver) VkGetDeviceQueue2(device core.VkDevice, pQueueInfo *core.VkDeviceQueueInfo2, pQueue *core.VkQueue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetDeviceQueue2", device, pQueueInfo, pQueue)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetDeviceQueue2 indicates an expected call of VkGetDeviceQueue2.
func (mr *MockDriverMockRecorder) VkGetDeviceQueue2(device, pQueueInfo, pQueue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetDeviceQueue2", reflect.TypeOf((*MockDriver)(nil).VkGetDeviceQueue2), device, pQueueInfo, pQueue)
}

// VkGetEventStatus mocks base method.
func (m *MockDriver) VkGetEventStatus(device core.VkDevice, event core.VkEvent) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetEventStatus", device, event)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetEventStatus indicates an expected call of VkGetEventStatus.
func (mr *MockDriverMockRecorder) VkGetEventStatus(device, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetEventStatus", reflect.TypeOf((*MockDriver)(nil).VkGetEventStatus), device, event)
}

// VkGetFenceStatus mocks base method.
func (m *MockDriver) VkGetFenceStatus(device core.VkDevice, fence core.VkFence) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetFenceStatus", device, fence)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetFenceStatus indicates an expected call of VkGetFenceStatus.
func (mr *MockDriverMockRecorder) VkGetFenceStatus(device, fence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetFenceStatus", reflect.TypeOf((*MockDriver)(nil).VkGetFenceStatus), device, fence)
}

// VkGetImageMemoryRequirements mocks base method.
func (m *MockDriver) VkGetImageMemoryRequirements(device core.VkDevice, image core.VkImage, pMemoryRequirements *core.VkMemoryRequirements) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetImageMemoryRequirements", device, image, pMemoryRequirements)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetImageMemoryRequirements indicates an expected call of VkGetImageMemoryRequirements.
func (mr *MockDriverMockRecorder) VkGetImageMemoryRequirements(device, image, pMemoryRequirements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetImageMemoryRequirements", reflect.TypeOf((*MockDriver)(nil).VkGetImageMemoryRequirements), device, image, pMemoryRequirements)
}

// VkGetImageMemoryRequirements2 mocks base method.
func (m *MockDriver) VkGetImageMemoryRequirements2(device core.VkDevice, pInfo *core.VkImageMemoryRequirementsInfo2, pMemoryRequirements *core.VkMemoryRequirements2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetImageMemoryRequirements2", device, pInfo, pMemoryRequirements)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetImageMemoryRequirements2 indicates an expected call of VkGetImageMemoryRequirements2.
func (mr *MockDriverMockRecorder) VkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetImageMemoryRequirements2", reflect.TypeOf((*MockDriver)(nil).VkGetImageMemoryRequirements2), device, pInfo, pMemoryRequirements)
}

// VkGetImageSparseMemoryRequirements mocks base method.
func (m *MockDriver) VkGetImageSparseMemoryRequirements(device core.VkDevice, image core.VkImage, pSparseMemoryRequirementCount *core.Uint32, pSparseMemoryRequirements *core.VkSparseImageMemoryRequirements) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetImageSparseMemoryRequirements", device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetImageSparseMemoryRequirements indicates an expected call of VkGetImageSparseMemoryRequirements.
func (mr *MockDriverMockRecorder) VkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetImageSparseMemoryRequirements", reflect.TypeOf((*MockDriver)(nil).VkGetImageSparseMemoryRequirements), device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
}

// VkGetImageSparseMemoryRequirements2 mocks base method.
func (m *MockDriver) VkGetImageSparseMemoryRequirements2(device core.VkDevice, pInfo *core.VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount *core.Uint32, pSparseMemoryRequirements *core.VkSparseImageMemoryRequirements2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetImageSparseMemoryRequirements2", device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetImageSparseMemoryRequirements2 indicates an expected call of VkGetImageSparseMemoryRequirements2.
func (mr *MockDriverMockRecorder) VkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetImageSparseMemoryRequirements2", reflect.TypeOf((*MockDriver)(nil).VkGetImageSparseMemoryRequirements2), device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
}

// VkGetImageSubresourceLayout mocks base method.
func (m *MockDriver) VkGetImageSubresourceLayout(device core.VkDevice, image core.VkImage, pSubresource *core.VkImageSubresource, pLayout *core.VkSubresourceLayout) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetImageSubresourceLayout", device, image, pSubresource, pLayout)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetImageSubresourceLayout indicates an expected call of VkGetImageSubresourceLayout.
func (mr *MockDriverMockRecorder) VkGetImageSubresourceLayout(device, image, pSubresource, pLayout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetImageSubresourceLayout", reflect.TypeOf((*MockDriver)(nil).VkGetImageSubresourceLayout), device, image, pSubresource, pLayout)
}

// VkGetPhysicalDeviceExternalBufferProperties mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceExternalBufferProperties(physicalDevice core.VkPhysicalDevice, pExternalBufferInfo *core.VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties *core.VkExternalBufferProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceExternalBufferProperties", physicalDevice, pExternalBufferInfo, pExternalBufferProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceExternalBufferProperties indicates an expected call of VkGetPhysicalDeviceExternalBufferProperties.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceExternalBufferProperties", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceExternalBufferProperties), physicalDevice, pExternalBufferInfo, pExternalBufferProperties)
}

// VkGetPhysicalDeviceExternalFenceProperties mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceExternalFenceProperties(physicalDevice core.VkPhysicalDevice, pExternalFenceInfo *core.VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties *core.VkExternalFenceProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceExternalFenceProperties", physicalDevice, pExternalFenceInfo, pExternalFenceProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceExternalFenceProperties indicates an expected call of VkGetPhysicalDeviceExternalFenceProperties.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceExternalFenceProperties", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceExternalFenceProperties), physicalDevice, pExternalFenceInfo, pExternalFenceProperties)
}

// VkGetPhysicalDeviceExternalSemaphoreProperties mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice core.VkPhysicalDevice, pExternalSemaphoreInfo *core.VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties *core.VkExternalSemaphoreProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceExternalSemaphoreProperties", physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceExternalSemaphoreProperties indicates an expected call of VkGetPhysicalDeviceExternalSemaphoreProperties.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceExternalSemaphoreProperties", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceExternalSemaphoreProperties), physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties)
}

// VkGetPhysicalDeviceFeatures mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceFeatures(physicalDevice core.VkPhysicalDevice, pFeatures *core.VkPhysicalDeviceFeatures) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceFeatures", physicalDevice, pFeatures)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceFeatures indicates an expected call of VkGetPhysicalDeviceFeatures.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceFeatures(physicalDevice, pFeatures interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceFeatures", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceFeatures), physicalDevice, pFeatures)
}

// VkGetPhysicalDeviceFeatures2 mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceFeatures2(physicalDevice core.VkPhysicalDevice, pFeatures *core.VkPhysicalDeviceFeatures2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceFeatures2", physicalDevice, pFeatures)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceFeatures2 indicates an expected call of VkGetPhysicalDeviceFeatures2.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceFeatures2", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceFeatures2), physicalDevice, pFeatures)
}

// VkGetPhysicalDeviceFormatProperties mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceFormatProperties(physicalDevice core.VkPhysicalDevice, format core.VkFormat, pFormatProperties *core.VkFormatProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceFormatProperties", physicalDevice, format, pFormatProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceFormatProperties indicates an expected call of VkGetPhysicalDeviceFormatProperties.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceFormatProperties", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceFormatProperties), physicalDevice, format, pFormatProperties)
}

// VkGetPhysicalDeviceFormatProperties2 mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceFormatProperties2(physicalDevice core.VkPhysicalDevice, format core.VkFormat, pFormatProperties *core.VkFormatProperties2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceFormatProperties2", physicalDevice, format, pFormatProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceFormatProperties2 indicates an expected call of VkGetPhysicalDeviceFormatProperties2.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceFormatProperties2", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceFormatProperties2), physicalDevice, format, pFormatProperties)
}

// VkGetPhysicalDeviceImageFormatProperties mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceImageFormatProperties(physicalDevice core.VkPhysicalDevice, format core.VkFormat, t core.VkImageType, tiling core.VkImageTiling, usage core.VkImageUsageFlags, flags core.VkImageCreateFlags, pImageFormatProperties *core.VkImageFormatProperties) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceImageFormatProperties", physicalDevice, format, t, tiling, usage, flags, pImageFormatProperties)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetPhysicalDeviceImageFormatProperties indicates an expected call of VkGetPhysicalDeviceImageFormatProperties.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, t, tiling, usage, flags, pImageFormatProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceImageFormatProperties", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceImageFormatProperties), physicalDevice, format, t, tiling, usage, flags, pImageFormatProperties)
}

// VkGetPhysicalDeviceImageFormatProperties2 mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceImageFormatProperties2(physicalDevice core.VkPhysicalDevice, pImageFormatInfo *core.VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties *core.VkImageFormatProperties2) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceImageFormatProperties2", physicalDevice, pImageFormatInfo, pImageFormatProperties)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetPhysicalDeviceImageFormatProperties2 indicates an expected call of VkGetPhysicalDeviceImageFormatProperties2.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceImageFormatProperties2", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceImageFormatProperties2), physicalDevice, pImageFormatInfo, pImageFormatProperties)
}

// VkGetPhysicalDeviceMemoryProperties mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceMemoryProperties(physicalDevice core.VkPhysicalDevice, pMemoryProperties *core.VkPhysicalDeviceMemoryProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceMemoryProperties", physicalDevice, pMemoryProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceMemoryProperties indicates an expected call of VkGetPhysicalDeviceMemoryProperties.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceMemoryProperties", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceMemoryProperties), physicalDevice, pMemoryProperties)
}

// VkGetPhysicalDeviceMemoryProperties2 mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceMemoryProperties2(physicalDevice core.VkPhysicalDevice, pMemoryProperties *core.VkPhysicalDeviceMemoryProperties2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceMemoryProperties2", physicalDevice, pMemoryProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceMemoryProperties2 indicates an expected call of VkGetPhysicalDeviceMemoryProperties2.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceMemoryProperties2", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceMemoryProperties2), physicalDevice, pMemoryProperties)
}

// VkGetPhysicalDeviceProperties mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceProperties(physicalDevice core.VkPhysicalDevice, pProperties *core.VkPhysicalDeviceProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceProperties", physicalDevice, pProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceProperties indicates an expected call of VkGetPhysicalDeviceProperties.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceProperties(physicalDevice, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceProperties", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceProperties), physicalDevice, pProperties)
}

// VkGetPhysicalDeviceProperties2 mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceProperties2(physicalDevice core.VkPhysicalDevice, pProperties *core.VkPhysicalDeviceProperties2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceProperties2", physicalDevice, pProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceProperties2 indicates an expected call of VkGetPhysicalDeviceProperties2.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceProperties2(physicalDevice, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceProperties2", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceProperties2), physicalDevice, pProperties)
}

// VkGetPhysicalDeviceQueueFamilyProperties mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceQueueFamilyProperties(physicalDevice core.VkPhysicalDevice, pQueueFamilyPropertyCount *core.Uint32, pQueueFamilyProperties *core.VkQueueFamilyProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceQueueFamilyProperties", physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceQueueFamilyProperties indicates an expected call of VkGetPhysicalDeviceQueueFamilyProperties.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceQueueFamilyProperties", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceQueueFamilyProperties), physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
}

// VkGetPhysicalDeviceQueueFamilyProperties2 mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice core.VkPhysicalDevice, pQueueFamilyPropertyCount *core.Uint32, pQueueFamilyProperties *core.VkQueueFamilyProperties2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceQueueFamilyProperties2", physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceQueueFamilyProperties2 indicates an expected call of VkGetPhysicalDeviceQueueFamilyProperties2.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceQueueFamilyProperties2", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceQueueFamilyProperties2), physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
}

// VkGetPhysicalDeviceSparseImageFormatProperties mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice core.VkPhysicalDevice, format core.VkFormat, t core.VkImageType, samples core.VkSampleCountFlagBits, usage core.VkImageUsageFlags, tiling core.VkImageTiling, pPropertyCount *core.Uint32, pProperties *core.VkSparseImageFormatProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceSparseImageFormatProperties", physicalDevice, format, t, samples, usage, tiling, pPropertyCount, pProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceSparseImageFormatProperties indicates an expected call of VkGetPhysicalDeviceSparseImageFormatProperties.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, t, samples, usage, tiling, pPropertyCount, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceSparseImageFormatProperties", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceSparseImageFormatProperties), physicalDevice, format, t, samples, usage, tiling, pPropertyCount, pProperties)
}

// VkGetPhysicalDeviceSparseImageFormatProperties2 mocks base method.
func (m *MockDriver) VkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice core.VkPhysicalDevice, pFormatInfo *core.VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount *core.Uint32, pProperties *core.VkSparseImageFormatProperties2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceSparseImageFormatProperties2", physicalDevice, pFormatInfo, pPropertyCount, pProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceSparseImageFormatProperties2 indicates an expected call of VkGetPhysicalDeviceSparseImageFormatProperties2.
func (mr *MockDriverMockRecorder) VkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceSparseImageFormatProperties2", reflect.TypeOf((*MockDriver)(nil).VkGetPhysicalDeviceSparseImageFormatProperties2), physicalDevice, pFormatInfo, pPropertyCount, pProperties)
}

// VkGetPipelineCacheData mocks base method.
func (m *MockDriver) VkGetPipelineCacheData(device core.VkDevice, pipelineCache core.VkPipelineCache, pDataSize *core.Size, pData unsafe.Pointer) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPipelineCacheData", device, pipelineCache, pDataSize, pData)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetPipelineCacheData indicates an expected call of VkGetPipelineCacheData.
func (mr *MockDriverMockRecorder) VkGetPipelineCacheData(device, pipelineCache, pDataSize, pData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPipelineCacheData", reflect.TypeOf((*MockDriver)(nil).VkGetPipelineCacheData), device, pipelineCache, pDataSize, pData)
}

// VkGetQueryPoolResults mocks base method.
func (m *MockDriver) VkGetQueryPoolResults(device core.VkDevice, queryPool core.VkQueryPool, firstQuery, queryCount core.Uint32, dataSize core.Size, pData unsafe.Pointer, stride core.VkDeviceSize, flags core.VkQueryResultFlags) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetQueryPoolResults", device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetQueryPoolResults indicates an expected call of VkGetQueryPoolResults.
func (mr *MockDriverMockRecorder) VkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetQueryPoolResults", reflect.TypeOf((*MockDriver)(nil).VkGetQueryPoolResults), device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags)
}

// VkGetRenderAreaGranularity mocks base method.
func (m *MockDriver) VkGetRenderAreaGranularity(device core.VkDevice, renderPass core.VkRenderPass, pGranularity *core.VkExtent2D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetRenderAreaGranularity", device, renderPass, pGranularity)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetRenderAreaGranularity indicates an expected call of VkGetRenderAreaGranularity.
func (mr *MockDriverMockRecorder) VkGetRenderAreaGranularity(device, renderPass, pGranularity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetRenderAreaGranularity", reflect.TypeOf((*MockDriver)(nil).VkGetRenderAreaGranularity), device, renderPass, pGranularity)
}

// VkGetSemaphoreCounterValue mocks base method.
func (m *MockDriver) VkGetSemaphoreCounterValue(device core.VkDevice, semaphore core.VkSemaphore, pValue *core.Uint64) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetSemaphoreCounterValue", device, semaphore, pValue)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetSemaphoreCounterValue indicates an expected call of VkGetSemaphoreCounterValue.
func (mr *MockDriverMockRecorder) VkGetSemaphoreCounterValue(device, semaphore, pValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetSemaphoreCounterValue", reflect.TypeOf((*MockDriver)(nil).VkGetSemaphoreCounterValue), device, semaphore, pValue)
}

// VkInvalidateMappedMemoryRanges mocks base method.
func (m *MockDriver) VkInvalidateMappedMemoryRanges(device core.VkDevice, memoryRangeCount core.Uint32, pMemoryRanges *core.VkMappedMemoryRange) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkInvalidateMappedMemoryRanges", device, memoryRangeCount, pMemoryRanges)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkInvalidateMappedMemoryRanges indicates an expected call of VkInvalidateMappedMemoryRanges.
func (mr *MockDriverMockRecorder) VkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkInvalidateMappedMemoryRanges", reflect.TypeOf((*MockDriver)(nil).VkInvalidateMappedMemoryRanges), device, memoryRangeCount, pMemoryRanges)
}

// VkMapMemory mocks base method.
func (m *MockDriver) VkMapMemory(device core.VkDevice, memory core.VkDeviceMemory, offset, size core.VkDeviceSize, flags core.VkMemoryMapFlags, ppData *unsafe.Pointer) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkMapMemory", device, memory, offset, size, flags, ppData)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkMapMemory indicates an expected call of VkMapMemory.
func (mr *MockDriverMockRecorder) VkMapMemory(device, memory, offset, size, flags, ppData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkMapMemory", reflect.TypeOf((*MockDriver)(nil).VkMapMemory), device, memory, offset, size, flags, ppData)
}

// VkMergePipelineCaches mocks base method.
func (m *MockDriver) VkMergePipelineCaches(device core.VkDevice, dstCache core.VkPipelineCache, srcCacheCount core.Uint32, pSrcCaches *core.VkPipelineCache) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkMergePipelineCaches", device, dstCache, srcCacheCount, pSrcCaches)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkMergePipelineCaches indicates an expected call of VkMergePipelineCaches.
func (mr *MockDriverMockRecorder) VkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkMergePipelineCaches", reflect.TypeOf((*MockDriver)(nil).VkMergePipelineCaches), device, dstCache, srcCacheCount, pSrcCaches)
}

// VkQueueBindSparse mocks base method.
func (m *MockDriver) VkQueueBindSparse(queue core.VkQueue, bindInfoCount core.Uint32, pBindInfo *core.VkBindSparseInfo, fence core.VkFence) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkQueueBindSparse", queue, bindInfoCount, pBindInfo, fence)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkQueueBindSparse indicates an expected call of VkQueueBindSparse.
func (mr *MockDriverMockRecorder) VkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkQueueBindSparse", reflect.TypeOf((*MockDriver)(nil).VkQueueBindSparse), queue, bindInfoCount, pBindInfo, fence)
}

// VkQueueSubmit mocks base method.
func (m *MockDriver) VkQueueSubmit(queue core.VkQueue, submitCount core.Uint32, pSubmits *core.VkSubmitInfo, fence core.VkFence) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkQueueSubmit", queue, submitCount, pSubmits, fence)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkQueueSubmit indicates an expected call of VkQueueSubmit.
func (mr *MockDriverMockRecorder) VkQueueSubmit(queue, submitCount, pSubmits, fence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkQueueSubmit", reflect.TypeOf((*MockDriver)(nil).VkQueueSubmit), queue, submitCount, pSubmits, fence)
}

// VkQueueWaitIdle mocks base method.
func (m *MockDriver) VkQueueWaitIdle(queue core.VkQueue) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkQueueWaitIdle", queue)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkQueueWaitIdle indicates an expected call of VkQueueWaitIdle.
func (mr *MockDriverMockRecorder) VkQueueWaitIdle(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkQueueWaitIdle", reflect.TypeOf((*MockDriver)(nil).VkQueueWaitIdle), queue)
}

// VkResetCommandBuffer mocks base method.
func (m *MockDriver) VkResetCommandBuffer(commandBuffer core.VkCommandBuffer, flags core.VkCommandBufferResetFlags) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkResetCommandBuffer", commandBuffer, flags)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkResetCommandBuffer indicates an expected call of VkResetCommandBuffer.
func (mr *MockDriverMockRecorder) VkResetCommandBuffer(commandBuffer, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkResetCommandBuffer", reflect.TypeOf((*MockDriver)(nil).VkResetCommandBuffer), commandBuffer, flags)
}

// VkResetCommandPool mocks base method.
func (m *MockDriver) VkResetCommandPool(device core.VkDevice, commandPool core.VkCommandPool, flags core.VkCommandPoolResetFlags) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkResetCommandPool", device, commandPool, flags)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkResetCommandPool indicates an expected call of VkResetCommandPool.
func (mr *MockDriverMockRecorder) VkResetCommandPool(device, commandPool, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkResetCommandPool", reflect.TypeOf((*MockDriver)(nil).VkResetCommandPool), device, commandPool, flags)
}

// VkResetDescriptorPool mocks base method.
func (m *MockDriver) VkResetDescriptorPool(device core.VkDevice, descriptorPool core.VkDescriptorPool, flags core.VkDescriptorPoolResetFlags) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkResetDescriptorPool", device, descriptorPool, flags)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkResetDescriptorPool indicates an expected call of VkResetDescriptorPool.
func (mr *MockDriverMockRecorder) VkResetDescriptorPool(device, descriptorPool, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkResetDescriptorPool", reflect.TypeOf((*MockDriver)(nil).VkResetDescriptorPool), device, descriptorPool, flags)
}

// VkResetEvent mocks base method.
func (m *MockDriver) VkResetEvent(device core.VkDevice, event core.VkEvent) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkResetEvent", device, event)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkResetEvent indicates an expected call of VkResetEvent.
func (mr *MockDriverMockRecorder) VkResetEvent(device, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkResetEvent", reflect.TypeOf((*MockDriver)(nil).VkResetEvent), device, event)
}

// VkResetFences mocks base method.
func (m *MockDriver) VkResetFences(device core.VkDevice, fenceCount core.Uint32, pFences *core.VkFence) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkResetFences", device, fenceCount, pFences)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkResetFences indicates an expected call of VkResetFences.
func (mr *MockDriverMockRecorder) VkResetFences(device, fenceCount, pFences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkResetFences", reflect.TypeOf((*MockDriver)(nil).VkResetFences), device, fenceCount, pFences)
}

// VkResetQueryPool mocks base method.
func (m *MockDriver) VkResetQueryPool(device core.VkDevice, queryPool core.VkQueryPool, firstQuery, queryCount core.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkResetQueryPool", device, queryPool, firstQuery, queryCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkResetQueryPool indicates an expected call of VkResetQueryPool.
func (mr *MockDriverMockRecorder) VkResetQueryPool(device, queryPool, firstQuery, queryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkResetQueryPool", reflect.TypeOf((*MockDriver)(nil).VkResetQueryPool), device, queryPool, firstQuery, queryCount)
}

// VkSetEvent mocks base method.
func (m *MockDriver) VkSetEvent(device core.VkDevice, event core.VkEvent) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkSetEvent", device, event)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkSetEvent indicates an expected call of VkSetEvent.
func (mr *MockDriverMockRecorder) VkSetEvent(device, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkSetEvent", reflect.TypeOf((*MockDriver)(nil).VkSetEvent), device, event)
}

// VkSignalSemaphore mocks base method.
func (m *MockDriver) VkSignalSemaphore(device core.VkDevice, pSignalInfo *core.VkSemaphoreSignalInfo) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkSignalSemaphore", device, pSignalInfo)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkSignalSemaphore indicates an expected call of VkSignalSemaphore.
func (mr *MockDriverMockRecorder) VkSignalSemaphore(device, pSignalInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkSignalSemaphore", reflect.TypeOf((*MockDriver)(nil).VkSignalSemaphore), device, pSignalInfo)
}

// VkTrimCommandPool mocks base method.
func (m *MockDriver) VkTrimCommandPool(device core.VkDevice, commandPool core.VkCommandPool, flags core.VkCommandPoolTrimFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkTrimCommandPool", device, commandPool, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkTrimCommandPool indicates an expected call of VkTrimCommandPool.
func (mr *MockDriverMockRecorder) VkTrimCommandPool(device, commandPool, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkTrimCommandPool", reflect.TypeOf((*MockDriver)(nil).VkTrimCommandPool), device, commandPool, flags)
}

// VkUnmapMemory mocks base method.
func (m *MockDriver) VkUnmapMemory(device core.VkDevice, memory core.VkDeviceMemory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkUnmapMemory", device, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkUnmapMemory indicates an expected call of VkUnmapMemory.
func (mr *MockDriverMockRecorder) VkUnmapMemory(device, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkUnmapMemory", reflect.TypeOf((*MockDriver)(nil).VkUnmapMemory), device, memory)
}

// VkUpdateDescriptorSetWithTemplate mocks base method.
func (m *MockDriver) VkUpdateDescriptorSetWithTemplate(device core.VkDevice, descriptorSet core.VkDescriptorSet, descriptorUpdateTemplate core.VkDescriptorUpdateTemplate, pData unsafe.Pointer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkUpdateDescriptorSetWithTemplate", device, descriptorSet, descriptorUpdateTemplate, pData)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkUpdateDescriptorSetWithTemplate indicates an expected call of VkUpdateDescriptorSetWithTemplate.
func (mr *MockDriverMockRecorder) VkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkUpdateDescriptorSetWithTemplate", reflect.TypeOf((*MockDriver)(nil).VkUpdateDescriptorSetWithTemplate), device, descriptorSet, descriptorUpdateTemplate, pData)
}

// VkUpdateDescriptorSets mocks base method.
func (m *MockDriver) VkUpdateDescriptorSets(device core.VkDevice, descriptorWriteCount core.Uint32, pDescriptorWrites *core.VkWriteDescriptorSet, descriptorCopyCount core.Uint32, pDescriptorCopies *core.VkCopyDescriptorSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkUpdateDescriptorSets", device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkUpdateDescriptorSets indicates an expected call of VkUpdateDescriptorSets.
func (mr *MockDriverMockRecorder) VkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkUpdateDescriptorSets", reflect.TypeOf((*MockDriver)(nil).VkUpdateDescriptorSets), device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies)
}

// VkWaitForFences mocks base method.
func (m *MockDriver) VkWaitForFences(device core.VkDevice, fenceCount core.Uint32, pFences *core.VkFence, waitAll core.VkBool32, timeout core.Uint64) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkWaitForFences", device, fenceCount, pFences, waitAll, timeout)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkWaitForFences indicates an expected call of VkWaitForFences.
func (mr *MockDriverMockRecorder) VkWaitForFences(device, fenceCount, pFences, waitAll, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkWaitForFences", reflect.TypeOf((*MockDriver)(nil).VkWaitForFences), device, fenceCount, pFences, waitAll, timeout)
}

// VkWaitSemaphores mocks base method.
func (m *MockDriver) VkWaitSemaphores(device core.VkDevice, pWaitInfo *core.VkSemaphoreWaitInfo, timeout core.Uint64) (core.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkWaitSemaphores", device, pWaitInfo, timeout)
	ret0, _ := ret[0].(core.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkWaitSemaphores indicates an expected call of VkWaitSemaphores.
func (mr *MockDriverMockRecorder) VkWaitSemaphores(device, pWaitInfo, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkWaitSemaphores", reflect.TypeOf((*MockDriver)(nil).VkWaitSemaphores), device, pWaitInfo, timeout)
}
