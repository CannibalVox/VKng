// Code generated by MockGen. DO NOT EDIT.
// Source: ./iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	unsafe "unsafe"

	common "github.com/CannibalVox/VKng/core/common"
	core1_0 "github.com/CannibalVox/VKng/core/core1_0"
	core1_1 "github.com/CannibalVox/VKng/core/core1_1"
	core1_2 "github.com/CannibalVox/VKng/core/core1_2"
	driver "github.com/CannibalVox/VKng/core/driver"
	gomock "github.com/golang/mock/gomock"
)

// Buffer1_2 is a mock of Buffer interface.
type Buffer1_2 struct {
	ctrl     *gomock.Controller
	recorder *Buffer1_2MockRecorder
}

// Buffer1_2MockRecorder is the mock recorder for Buffer1_2.
type Buffer1_2MockRecorder struct {
	mock *Buffer1_2
}

// NewBuffer1_2 creates a new mock instance.
func NewBuffer1_2(ctrl *gomock.Controller) *Buffer1_2 {
	mock := &Buffer1_2{ctrl: ctrl}
	mock.recorder = &Buffer1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Buffer1_2) EXPECT() *Buffer1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *Buffer1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *Buffer1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*Buffer1_2)(nil).APIVersion))
}

// BindBufferMemory mocks base method.
func (m *Buffer1_2) BindBufferMemory(memory core1_0.DeviceMemory, offset int) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindBufferMemory", memory, offset)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindBufferMemory indicates an expected call of BindBufferMemory.
func (mr *Buffer1_2MockRecorder) BindBufferMemory(memory, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindBufferMemory", reflect.TypeOf((*Buffer1_2)(nil).BindBufferMemory), memory, offset)
}

// Destroy mocks base method.
func (m *Buffer1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *Buffer1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Buffer1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *Buffer1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *Buffer1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*Buffer1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *Buffer1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *Buffer1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*Buffer1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *Buffer1_2) Handle() driver.VkBuffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkBuffer)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *Buffer1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Buffer1_2)(nil).Handle))
}

// MemoryRequirements mocks base method.
func (m *Buffer1_2) MemoryRequirements() *core1_0.MemoryRequirements {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryRequirements")
	ret0, _ := ret[0].(*core1_0.MemoryRequirements)
	return ret0
}

// MemoryRequirements indicates an expected call of MemoryRequirements.
func (mr *Buffer1_2MockRecorder) MemoryRequirements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRequirements", reflect.TypeOf((*Buffer1_2)(nil).MemoryRequirements))
}

// BufferView1_2 is a mock of BufferView interface.
type BufferView1_2 struct {
	ctrl     *gomock.Controller
	recorder *BufferView1_2MockRecorder
}

// BufferView1_2MockRecorder is the mock recorder for BufferView1_2.
type BufferView1_2MockRecorder struct {
	mock *BufferView1_2
}

// NewBufferView1_2 creates a new mock instance.
func NewBufferView1_2(ctrl *gomock.Controller) *BufferView1_2 {
	mock := &BufferView1_2{ctrl: ctrl}
	mock.recorder = &BufferView1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *BufferView1_2) EXPECT() *BufferView1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *BufferView1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *BufferView1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*BufferView1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *BufferView1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *BufferView1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*BufferView1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *BufferView1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *BufferView1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*BufferView1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *BufferView1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *BufferView1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*BufferView1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *BufferView1_2) Handle() driver.VkBufferView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkBufferView)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *BufferView1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*BufferView1_2)(nil).Handle))
}

// CommandBuffer1_2 is a mock of CommandBuffer interface.
type CommandBuffer1_2 struct {
	ctrl     *gomock.Controller
	recorder *CommandBuffer1_2MockRecorder
}

// CommandBuffer1_2MockRecorder is the mock recorder for CommandBuffer1_2.
type CommandBuffer1_2MockRecorder struct {
	mock *CommandBuffer1_2
}

// NewCommandBuffer1_2 creates a new mock instance.
func NewCommandBuffer1_2(ctrl *gomock.Controller) *CommandBuffer1_2 {
	mock := &CommandBuffer1_2{ctrl: ctrl}
	mock.recorder = &CommandBuffer1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CommandBuffer1_2) EXPECT() *CommandBuffer1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *CommandBuffer1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *CommandBuffer1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*CommandBuffer1_2)(nil).APIVersion))
}

// Begin mocks base method.
func (m *CommandBuffer1_2) Begin(o core1_0.BeginOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *CommandBuffer1_2MockRecorder) Begin(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*CommandBuffer1_2)(nil).Begin), o)
}

// CmdBeginQuery mocks base method.
func (m *CommandBuffer1_2) CmdBeginQuery(queryPool core1_0.QueryPool, query int, flags common.QueryControlFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdBeginQuery", queryPool, query, flags)
}

// CmdBeginQuery indicates an expected call of CmdBeginQuery.
func (mr *CommandBuffer1_2MockRecorder) CmdBeginQuery(queryPool, query, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBeginQuery", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdBeginQuery), queryPool, query, flags)
}

// CmdBeginRenderPass mocks base method.
func (m *CommandBuffer1_2) CmdBeginRenderPass(contents common.SubpassContents, o core1_0.RenderPassBeginOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBeginRenderPass", contents, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBeginRenderPass indicates an expected call of CmdBeginRenderPass.
func (mr *CommandBuffer1_2MockRecorder) CmdBeginRenderPass(contents, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBeginRenderPass", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdBeginRenderPass), contents, o)
}

// CmdBeginRenderPass2 mocks base method.
func (m *CommandBuffer1_2) CmdBeginRenderPass2(renderPassBegin core1_0.RenderPassBeginOptions, subpassBegin core1_2.SubpassBeginOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBeginRenderPass2", renderPassBegin, subpassBegin)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBeginRenderPass2 indicates an expected call of CmdBeginRenderPass2.
func (mr *CommandBuffer1_2MockRecorder) CmdBeginRenderPass2(renderPassBegin, subpassBegin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBeginRenderPass2", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdBeginRenderPass2), renderPassBegin, subpassBegin)
}

// CmdBindDescriptorSets mocks base method.
func (m *CommandBuffer1_2) CmdBindDescriptorSets(bindPoint common.PipelineBindPoint, layout core1_0.PipelineLayout, sets []core1_0.DescriptorSet, dynamicOffsets []int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdBindDescriptorSets", bindPoint, layout, sets, dynamicOffsets)
}

// CmdBindDescriptorSets indicates an expected call of CmdBindDescriptorSets.
func (mr *CommandBuffer1_2MockRecorder) CmdBindDescriptorSets(bindPoint, layout, sets, dynamicOffsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindDescriptorSets", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdBindDescriptorSets), bindPoint, layout, sets, dynamicOffsets)
}

// CmdBindIndexBuffer mocks base method.
func (m *CommandBuffer1_2) CmdBindIndexBuffer(buffer core1_0.Buffer, offset int, indexType common.IndexType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdBindIndexBuffer", buffer, offset, indexType)
}

// CmdBindIndexBuffer indicates an expected call of CmdBindIndexBuffer.
func (mr *CommandBuffer1_2MockRecorder) CmdBindIndexBuffer(buffer, offset, indexType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindIndexBuffer", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdBindIndexBuffer), buffer, offset, indexType)
}

// CmdBindPipeline mocks base method.
func (m *CommandBuffer1_2) CmdBindPipeline(bindPoint common.PipelineBindPoint, pipeline core1_0.Pipeline) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdBindPipeline", bindPoint, pipeline)
}

// CmdBindPipeline indicates an expected call of CmdBindPipeline.
func (mr *CommandBuffer1_2MockRecorder) CmdBindPipeline(bindPoint, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindPipeline", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdBindPipeline), bindPoint, pipeline)
}

// CmdBindVertexBuffers mocks base method.
func (m *CommandBuffer1_2) CmdBindVertexBuffers(buffers []core1_0.Buffer, bufferOffsets []int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdBindVertexBuffers", buffers, bufferOffsets)
}

// CmdBindVertexBuffers indicates an expected call of CmdBindVertexBuffers.
func (mr *CommandBuffer1_2MockRecorder) CmdBindVertexBuffers(buffers, bufferOffsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBindVertexBuffers", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdBindVertexBuffers), buffers, bufferOffsets)
}

// CmdBlitImage mocks base method.
func (m *CommandBuffer1_2) CmdBlitImage(sourceImage core1_0.Image, sourceImageLayout common.ImageLayout, destinationImage core1_0.Image, destinationImageLayout common.ImageLayout, regions []core1_0.ImageBlit, filter common.Filter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdBlitImage", sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regions, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdBlitImage indicates an expected call of CmdBlitImage.
func (mr *CommandBuffer1_2MockRecorder) CmdBlitImage(sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regions, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdBlitImage", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdBlitImage), sourceImage, sourceImageLayout, destinationImage, destinationImageLayout, regions, filter)
}

// CmdClearAttachments mocks base method.
func (m *CommandBuffer1_2) CmdClearAttachments(attachments []core1_0.ClearAttachment, rects []core1_0.ClearRect) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdClearAttachments", attachments, rects)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdClearAttachments indicates an expected call of CmdClearAttachments.
func (mr *CommandBuffer1_2MockRecorder) CmdClearAttachments(attachments, rects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdClearAttachments", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdClearAttachments), attachments, rects)
}

// CmdClearColorImage mocks base method.
func (m *CommandBuffer1_2) CmdClearColorImage(image core1_0.Image, imageLayout common.ImageLayout, color common.ClearColorValue, ranges []common.ImageSubresourceRange) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdClearColorImage", image, imageLayout, color, ranges)
}

// CmdClearColorImage indicates an expected call of CmdClearColorImage.
func (mr *CommandBuffer1_2MockRecorder) CmdClearColorImage(image, imageLayout, color, ranges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdClearColorImage", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdClearColorImage), image, imageLayout, color, ranges)
}

// CmdClearDepthStencilImage mocks base method.
func (m *CommandBuffer1_2) CmdClearDepthStencilImage(image core1_0.Image, imageLayout common.ImageLayout, depthStencil *common.ClearValueDepthStencil, ranges []common.ImageSubresourceRange) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdClearDepthStencilImage", image, imageLayout, depthStencil, ranges)
}

// CmdClearDepthStencilImage indicates an expected call of CmdClearDepthStencilImage.
func (mr *CommandBuffer1_2MockRecorder) CmdClearDepthStencilImage(image, imageLayout, depthStencil, ranges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdClearDepthStencilImage", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdClearDepthStencilImage), image, imageLayout, depthStencil, ranges)
}

// CmdCopyBuffer mocks base method.
func (m *CommandBuffer1_2) CmdCopyBuffer(srcBuffer, dstBuffer core1_0.Buffer, copyRegions []core1_0.BufferCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdCopyBuffer", srcBuffer, dstBuffer, copyRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdCopyBuffer indicates an expected call of CmdCopyBuffer.
func (mr *CommandBuffer1_2MockRecorder) CmdCopyBuffer(srcBuffer, dstBuffer, copyRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdCopyBuffer", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdCopyBuffer), srcBuffer, dstBuffer, copyRegions)
}

// CmdCopyBufferToImage mocks base method.
func (m *CommandBuffer1_2) CmdCopyBufferToImage(buffer core1_0.Buffer, image core1_0.Image, layout common.ImageLayout, regions []core1_0.BufferImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdCopyBufferToImage", buffer, image, layout, regions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdCopyBufferToImage indicates an expected call of CmdCopyBufferToImage.
func (mr *CommandBuffer1_2MockRecorder) CmdCopyBufferToImage(buffer, image, layout, regions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdCopyBufferToImage", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdCopyBufferToImage), buffer, image, layout, regions)
}

// CmdCopyImage mocks base method.
func (m *CommandBuffer1_2) CmdCopyImage(srcImage core1_0.Image, srcImageLayout common.ImageLayout, dstImage core1_0.Image, dstImageLayout common.ImageLayout, regions []core1_0.ImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdCopyImage", srcImage, srcImageLayout, dstImage, dstImageLayout, regions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdCopyImage indicates an expected call of CmdCopyImage.
func (mr *CommandBuffer1_2MockRecorder) CmdCopyImage(srcImage, srcImageLayout, dstImage, dstImageLayout, regions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdCopyImage", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdCopyImage), srcImage, srcImageLayout, dstImage, dstImageLayout, regions)
}

// CmdCopyImageToBuffer mocks base method.
func (m *CommandBuffer1_2) CmdCopyImageToBuffer(srcImage core1_0.Image, srcImageLayout common.ImageLayout, dstBuffer core1_0.Buffer, regions []core1_0.BufferImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdCopyImageToBuffer", srcImage, srcImageLayout, dstBuffer, regions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdCopyImageToBuffer indicates an expected call of CmdCopyImageToBuffer.
func (mr *CommandBuffer1_2MockRecorder) CmdCopyImageToBuffer(srcImage, srcImageLayout, dstBuffer, regions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdCopyImageToBuffer", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdCopyImageToBuffer), srcImage, srcImageLayout, dstBuffer, regions)
}

// CmdCopyQueryPoolResults mocks base method.
func (m *CommandBuffer1_2) CmdCopyQueryPoolResults(queryPool core1_0.QueryPool, firstQuery, queryCount int, dstBuffer core1_0.Buffer, dstOffset, stride int, flags common.QueryResultFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdCopyQueryPoolResults", queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags)
}

// CmdCopyQueryPoolResults indicates an expected call of CmdCopyQueryPoolResults.
func (mr *CommandBuffer1_2MockRecorder) CmdCopyQueryPoolResults(queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdCopyQueryPoolResults", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdCopyQueryPoolResults), queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags)
}

// CmdDispatch mocks base method.
func (m *CommandBuffer1_2) CmdDispatch(groupCountX, groupCountY, groupCountZ int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDispatch", groupCountX, groupCountY, groupCountZ)
}

// CmdDispatch indicates an expected call of CmdDispatch.
func (mr *CommandBuffer1_2MockRecorder) CmdDispatch(groupCountX, groupCountY, groupCountZ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDispatch", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdDispatch), groupCountX, groupCountY, groupCountZ)
}

// CmdDispatchBase mocks base method.
func (m *CommandBuffer1_2) CmdDispatchBase(baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDispatchBase", baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
}

// CmdDispatchBase indicates an expected call of CmdDispatchBase.
func (mr *CommandBuffer1_2MockRecorder) CmdDispatchBase(baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDispatchBase", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdDispatchBase), baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
}

// CmdDispatchIndirect mocks base method.
func (m *CommandBuffer1_2) CmdDispatchIndirect(buffer core1_0.Buffer, offset int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDispatchIndirect", buffer, offset)
}

// CmdDispatchIndirect indicates an expected call of CmdDispatchIndirect.
func (mr *CommandBuffer1_2MockRecorder) CmdDispatchIndirect(buffer, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDispatchIndirect", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdDispatchIndirect), buffer, offset)
}

// CmdDraw mocks base method.
func (m *CommandBuffer1_2) CmdDraw(vertexCount, instanceCount int, firstVertex, firstInstance uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDraw", vertexCount, instanceCount, firstVertex, firstInstance)
}

// CmdDraw indicates an expected call of CmdDraw.
func (mr *CommandBuffer1_2MockRecorder) CmdDraw(vertexCount, instanceCount, firstVertex, firstInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDraw", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdDraw), vertexCount, instanceCount, firstVertex, firstInstance)
}

// CmdDrawIndexed mocks base method.
func (m *CommandBuffer1_2) CmdDrawIndexed(indexCount, instanceCount int, firstIndex uint32, vertexOffset int, firstInstance uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDrawIndexed", indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)
}

// CmdDrawIndexed indicates an expected call of CmdDrawIndexed.
func (mr *CommandBuffer1_2MockRecorder) CmdDrawIndexed(indexCount, instanceCount, firstIndex, vertexOffset, firstInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDrawIndexed", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdDrawIndexed), indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)
}

// CmdDrawIndexedIndirect mocks base method.
func (m *CommandBuffer1_2) CmdDrawIndexedIndirect(buffer core1_0.Buffer, offset, drawCount, stride int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDrawIndexedIndirect", buffer, offset, drawCount, stride)
}

// CmdDrawIndexedIndirect indicates an expected call of CmdDrawIndexedIndirect.
func (mr *CommandBuffer1_2MockRecorder) CmdDrawIndexedIndirect(buffer, offset, drawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDrawIndexedIndirect", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdDrawIndexedIndirect), buffer, offset, drawCount, stride)
}

// CmdDrawIndexedIndirectCount mocks base method.
func (m *CommandBuffer1_2) CmdDrawIndexedIndirectCount(buffer core1_0.Buffer, offset uint64, countBuffer core1_0.Buffer, countBufferOffset uint64, maxDrawCount, stride int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDrawIndexedIndirectCount", buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
}

// CmdDrawIndexedIndirectCount indicates an expected call of CmdDrawIndexedIndirectCount.
func (mr *CommandBuffer1_2MockRecorder) CmdDrawIndexedIndirectCount(buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDrawIndexedIndirectCount", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdDrawIndexedIndirectCount), buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
}

// CmdDrawIndirect mocks base method.
func (m *CommandBuffer1_2) CmdDrawIndirect(buffer core1_0.Buffer, offset, drawCount, stride int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDrawIndirect", buffer, offset, drawCount, stride)
}

// CmdDrawIndirect indicates an expected call of CmdDrawIndirect.
func (mr *CommandBuffer1_2MockRecorder) CmdDrawIndirect(buffer, offset, drawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDrawIndirect", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdDrawIndirect), buffer, offset, drawCount, stride)
}

// CmdDrawIndirectCount mocks base method.
func (m *CommandBuffer1_2) CmdDrawIndirectCount(buffer core1_0.Buffer, offset uint64, countBuffer core1_0.Buffer, countBufferOffset uint64, maxDrawCount, stride int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDrawIndirectCount", buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
}

// CmdDrawIndirectCount indicates an expected call of CmdDrawIndirectCount.
func (mr *CommandBuffer1_2MockRecorder) CmdDrawIndirectCount(buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDrawIndirectCount", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdDrawIndirectCount), buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
}

// CmdEndQuery mocks base method.
func (m *CommandBuffer1_2) CmdEndQuery(queryPool core1_0.QueryPool, query int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdEndQuery", queryPool, query)
}

// CmdEndQuery indicates an expected call of CmdEndQuery.
func (mr *CommandBuffer1_2MockRecorder) CmdEndQuery(queryPool, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdEndQuery", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdEndQuery), queryPool, query)
}

// CmdEndRenderPass mocks base method.
func (m *CommandBuffer1_2) CmdEndRenderPass() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdEndRenderPass")
}

// CmdEndRenderPass indicates an expected call of CmdEndRenderPass.
func (mr *CommandBuffer1_2MockRecorder) CmdEndRenderPass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdEndRenderPass", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdEndRenderPass))
}

// CmdEndRenderPass2 mocks base method.
func (m *CommandBuffer1_2) CmdEndRenderPass2(subpassEnd core1_2.SubpassEndOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdEndRenderPass2", subpassEnd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdEndRenderPass2 indicates an expected call of CmdEndRenderPass2.
func (mr *CommandBuffer1_2MockRecorder) CmdEndRenderPass2(subpassEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdEndRenderPass2", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdEndRenderPass2), subpassEnd)
}

// CmdExecuteCommands mocks base method.
func (m *CommandBuffer1_2) CmdExecuteCommands(commandBuffers []core1_0.CommandBuffer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdExecuteCommands", commandBuffers)
}

// CmdExecuteCommands indicates an expected call of CmdExecuteCommands.
func (mr *CommandBuffer1_2MockRecorder) CmdExecuteCommands(commandBuffers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdExecuteCommands", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdExecuteCommands), commandBuffers)
}

// CmdFillBuffer mocks base method.
func (m *CommandBuffer1_2) CmdFillBuffer(dstBuffer core1_0.Buffer, dstOffset, size int, data uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdFillBuffer", dstBuffer, dstOffset, size, data)
}

// CmdFillBuffer indicates an expected call of CmdFillBuffer.
func (mr *CommandBuffer1_2MockRecorder) CmdFillBuffer(dstBuffer, dstOffset, size, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdFillBuffer", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdFillBuffer), dstBuffer, dstOffset, size, data)
}

// CmdNextSubpass mocks base method.
func (m *CommandBuffer1_2) CmdNextSubpass(contents common.SubpassContents) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdNextSubpass", contents)
}

// CmdNextSubpass indicates an expected call of CmdNextSubpass.
func (mr *CommandBuffer1_2MockRecorder) CmdNextSubpass(contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdNextSubpass", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdNextSubpass), contents)
}

// CmdNextSubpass2 mocks base method.
func (m *CommandBuffer1_2) CmdNextSubpass2(subpassBegin core1_2.SubpassBeginOptions, subpassEnd core1_2.SubpassEndOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdNextSubpass2", subpassBegin, subpassEnd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdNextSubpass2 indicates an expected call of CmdNextSubpass2.
func (mr *CommandBuffer1_2MockRecorder) CmdNextSubpass2(subpassBegin, subpassEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdNextSubpass2", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdNextSubpass2), subpassBegin, subpassEnd)
}

// CmdPipelineBarrier mocks base method.
func (m *CommandBuffer1_2) CmdPipelineBarrier(srcStageMask, dstStageMask common.PipelineStages, dependencies common.DependencyFlags, memoryBarriers []core1_0.MemoryBarrierOptions, bufferMemoryBarriers []core1_0.BufferMemoryBarrierOptions, imageMemoryBarriers []core1_0.ImageMemoryBarrierOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdPipelineBarrier", srcStageMask, dstStageMask, dependencies, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdPipelineBarrier indicates an expected call of CmdPipelineBarrier.
func (mr *CommandBuffer1_2MockRecorder) CmdPipelineBarrier(srcStageMask, dstStageMask, dependencies, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdPipelineBarrier", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdPipelineBarrier), srcStageMask, dstStageMask, dependencies, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers)
}

// CmdPushConstants mocks base method.
func (m *CommandBuffer1_2) CmdPushConstants(layout core1_0.PipelineLayout, stageFlags common.ShaderStages, offset int, valueBytes []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdPushConstants", layout, stageFlags, offset, valueBytes)
}

// CmdPushConstants indicates an expected call of CmdPushConstants.
func (mr *CommandBuffer1_2MockRecorder) CmdPushConstants(layout, stageFlags, offset, valueBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdPushConstants", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdPushConstants), layout, stageFlags, offset, valueBytes)
}

// CmdResetEvent mocks base method.
func (m *CommandBuffer1_2) CmdResetEvent(event core1_0.Event, stageMask common.PipelineStages) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdResetEvent", event, stageMask)
}

// CmdResetEvent indicates an expected call of CmdResetEvent.
func (mr *CommandBuffer1_2MockRecorder) CmdResetEvent(event, stageMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdResetEvent", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdResetEvent), event, stageMask)
}

// CmdResetQueryPool mocks base method.
func (m *CommandBuffer1_2) CmdResetQueryPool(queryPool core1_0.QueryPool, startQuery, queryCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdResetQueryPool", queryPool, startQuery, queryCount)
}

// CmdResetQueryPool indicates an expected call of CmdResetQueryPool.
func (mr *CommandBuffer1_2MockRecorder) CmdResetQueryPool(queryPool, startQuery, queryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdResetQueryPool", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdResetQueryPool), queryPool, startQuery, queryCount)
}

// CmdResolveImage mocks base method.
func (m *CommandBuffer1_2) CmdResolveImage(srcImage core1_0.Image, srcImageLayout common.ImageLayout, dstImage core1_0.Image, dstImageLayout common.ImageLayout, regions []core1_0.ImageResolve) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdResolveImage", srcImage, srcImageLayout, dstImage, dstImageLayout, regions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdResolveImage indicates an expected call of CmdResolveImage.
func (mr *CommandBuffer1_2MockRecorder) CmdResolveImage(srcImage, srcImageLayout, dstImage, dstImageLayout, regions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdResolveImage", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdResolveImage), srcImage, srcImageLayout, dstImage, dstImageLayout, regions)
}

// CmdSetBlendConstants mocks base method.
func (m *CommandBuffer1_2) CmdSetBlendConstants(blendConstants [4]float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetBlendConstants", blendConstants)
}

// CmdSetBlendConstants indicates an expected call of CmdSetBlendConstants.
func (mr *CommandBuffer1_2MockRecorder) CmdSetBlendConstants(blendConstants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetBlendConstants", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdSetBlendConstants), blendConstants)
}

// CmdSetDepthBias mocks base method.
func (m *CommandBuffer1_2) CmdSetDepthBias(depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetDepthBias", depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor)
}

// CmdSetDepthBias indicates an expected call of CmdSetDepthBias.
func (mr *CommandBuffer1_2MockRecorder) CmdSetDepthBias(depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetDepthBias", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdSetDepthBias), depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor)
}

// CmdSetDepthBounds mocks base method.
func (m *CommandBuffer1_2) CmdSetDepthBounds(min, max float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetDepthBounds", min, max)
}

// CmdSetDepthBounds indicates an expected call of CmdSetDepthBounds.
func (mr *CommandBuffer1_2MockRecorder) CmdSetDepthBounds(min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetDepthBounds", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdSetDepthBounds), min, max)
}

// CmdSetDeviceMask mocks base method.
func (m *CommandBuffer1_2) CmdSetDeviceMask(deviceMask uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetDeviceMask", deviceMask)
}

// CmdSetDeviceMask indicates an expected call of CmdSetDeviceMask.
func (mr *CommandBuffer1_2MockRecorder) CmdSetDeviceMask(deviceMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetDeviceMask", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdSetDeviceMask), deviceMask)
}

// CmdSetEvent mocks base method.
func (m *CommandBuffer1_2) CmdSetEvent(event core1_0.Event, stageMask common.PipelineStages) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetEvent", event, stageMask)
}

// CmdSetEvent indicates an expected call of CmdSetEvent.
func (mr *CommandBuffer1_2MockRecorder) CmdSetEvent(event, stageMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetEvent", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdSetEvent), event, stageMask)
}

// CmdSetLineWidth mocks base method.
func (m *CommandBuffer1_2) CmdSetLineWidth(lineWidth float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetLineWidth", lineWidth)
}

// CmdSetLineWidth indicates an expected call of CmdSetLineWidth.
func (mr *CommandBuffer1_2MockRecorder) CmdSetLineWidth(lineWidth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetLineWidth", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdSetLineWidth), lineWidth)
}

// CmdSetScissor mocks base method.
func (m *CommandBuffer1_2) CmdSetScissor(scissors []common.Rect2D) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetScissor", scissors)
}

// CmdSetScissor indicates an expected call of CmdSetScissor.
func (mr *CommandBuffer1_2MockRecorder) CmdSetScissor(scissors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetScissor", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdSetScissor), scissors)
}

// CmdSetStencilCompareMask mocks base method.
func (m *CommandBuffer1_2) CmdSetStencilCompareMask(faceMask common.StencilFaces, compareMask uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetStencilCompareMask", faceMask, compareMask)
}

// CmdSetStencilCompareMask indicates an expected call of CmdSetStencilCompareMask.
func (mr *CommandBuffer1_2MockRecorder) CmdSetStencilCompareMask(faceMask, compareMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetStencilCompareMask", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdSetStencilCompareMask), faceMask, compareMask)
}

// CmdSetStencilReference mocks base method.
func (m *CommandBuffer1_2) CmdSetStencilReference(faceMask common.StencilFaces, reference uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetStencilReference", faceMask, reference)
}

// CmdSetStencilReference indicates an expected call of CmdSetStencilReference.
func (mr *CommandBuffer1_2MockRecorder) CmdSetStencilReference(faceMask, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetStencilReference", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdSetStencilReference), faceMask, reference)
}

// CmdSetStencilWriteMask mocks base method.
func (m *CommandBuffer1_2) CmdSetStencilWriteMask(faceMask common.StencilFaces, writeMask uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetStencilWriteMask", faceMask, writeMask)
}

// CmdSetStencilWriteMask indicates an expected call of CmdSetStencilWriteMask.
func (mr *CommandBuffer1_2MockRecorder) CmdSetStencilWriteMask(faceMask, writeMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetStencilWriteMask", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdSetStencilWriteMask), faceMask, writeMask)
}

// CmdSetViewport mocks base method.
func (m *CommandBuffer1_2) CmdSetViewport(viewports []common.Viewport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetViewport", viewports)
}

// CmdSetViewport indicates an expected call of CmdSetViewport.
func (mr *CommandBuffer1_2MockRecorder) CmdSetViewport(viewports interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetViewport", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdSetViewport), viewports)
}

// CmdUpdateBuffer mocks base method.
func (m *CommandBuffer1_2) CmdUpdateBuffer(dstBuffer core1_0.Buffer, dstOffset, dataSize int, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdUpdateBuffer", dstBuffer, dstOffset, dataSize, data)
}

// CmdUpdateBuffer indicates an expected call of CmdUpdateBuffer.
func (mr *CommandBuffer1_2MockRecorder) CmdUpdateBuffer(dstBuffer, dstOffset, dataSize, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdUpdateBuffer", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdUpdateBuffer), dstBuffer, dstOffset, dataSize, data)
}

// CmdWaitEvents mocks base method.
func (m *CommandBuffer1_2) CmdWaitEvents(events []core1_0.Event, srcStageMask, dstStageMask common.PipelineStages, memoryBarriers []core1_0.MemoryBarrierOptions, bufferMemoryBarriers []core1_0.BufferMemoryBarrierOptions, imageMemoryBarriers []core1_0.ImageMemoryBarrierOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmdWaitEvents", events, srcStageMask, dstStageMask, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers)
	ret0, _ := ret[0].(error)
	return ret0
}

// CmdWaitEvents indicates an expected call of CmdWaitEvents.
func (mr *CommandBuffer1_2MockRecorder) CmdWaitEvents(events, srcStageMask, dstStageMask, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdWaitEvents", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdWaitEvents), events, srcStageMask, dstStageMask, memoryBarriers, bufferMemoryBarriers, imageMemoryBarriers)
}

// CmdWriteTimestamp mocks base method.
func (m *CommandBuffer1_2) CmdWriteTimestamp(pipelineStage common.PipelineStages, queryPool core1_0.QueryPool, query int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdWriteTimestamp", pipelineStage, queryPool, query)
}

// CmdWriteTimestamp indicates an expected call of CmdWriteTimestamp.
func (mr *CommandBuffer1_2MockRecorder) CmdWriteTimestamp(pipelineStage, queryPool, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdWriteTimestamp", reflect.TypeOf((*CommandBuffer1_2)(nil).CmdWriteTimestamp), pipelineStage, queryPool, query)
}

// CommandPoolHandle mocks base method.
func (m *CommandBuffer1_2) CommandPoolHandle() driver.VkCommandPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandPoolHandle")
	ret0, _ := ret[0].(driver.VkCommandPool)
	return ret0
}

// CommandPoolHandle indicates an expected call of CommandPoolHandle.
func (mr *CommandBuffer1_2MockRecorder) CommandPoolHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandPoolHandle", reflect.TypeOf((*CommandBuffer1_2)(nil).CommandPoolHandle))
}

// CommandsRecorded mocks base method.
func (m *CommandBuffer1_2) CommandsRecorded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandsRecorded")
	ret0, _ := ret[0].(int)
	return ret0
}

// CommandsRecorded indicates an expected call of CommandsRecorded.
func (mr *CommandBuffer1_2MockRecorder) CommandsRecorded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandsRecorded", reflect.TypeOf((*CommandBuffer1_2)(nil).CommandsRecorded))
}

// DeviceHandle mocks base method.
func (m *CommandBuffer1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *CommandBuffer1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*CommandBuffer1_2)(nil).DeviceHandle))
}

// DispatchesRecorded mocks base method.
func (m *CommandBuffer1_2) DispatchesRecorded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchesRecorded")
	ret0, _ := ret[0].(int)
	return ret0
}

// DispatchesRecorded indicates an expected call of DispatchesRecorded.
func (mr *CommandBuffer1_2MockRecorder) DispatchesRecorded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchesRecorded", reflect.TypeOf((*CommandBuffer1_2)(nil).DispatchesRecorded))
}

// DrawsRecorded mocks base method.
func (m *CommandBuffer1_2) DrawsRecorded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrawsRecorded")
	ret0, _ := ret[0].(int)
	return ret0
}

// DrawsRecorded indicates an expected call of DrawsRecorded.
func (mr *CommandBuffer1_2MockRecorder) DrawsRecorded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrawsRecorded", reflect.TypeOf((*CommandBuffer1_2)(nil).DrawsRecorded))
}

// Driver mocks base method.
func (m *CommandBuffer1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *CommandBuffer1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*CommandBuffer1_2)(nil).Driver))
}

// End mocks base method.
func (m *CommandBuffer1_2) End() (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "End")
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// End indicates an expected call of End.
func (mr *CommandBuffer1_2MockRecorder) End() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*CommandBuffer1_2)(nil).End))
}

// Free mocks base method.
func (m *CommandBuffer1_2) Free() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free")
}

// Free indicates an expected call of Free.
func (mr *CommandBuffer1_2MockRecorder) Free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*CommandBuffer1_2)(nil).Free))
}

// Handle mocks base method.
func (m *CommandBuffer1_2) Handle() driver.VkCommandBuffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkCommandBuffer)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *CommandBuffer1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*CommandBuffer1_2)(nil).Handle))
}

// Reset mocks base method.
func (m *CommandBuffer1_2) Reset(flags common.CommandBufferResetFlags) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", flags)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *CommandBuffer1_2MockRecorder) Reset(flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*CommandBuffer1_2)(nil).Reset), flags)
}

// CommandPool1_2 is a mock of CommandPool interface.
type CommandPool1_2 struct {
	ctrl     *gomock.Controller
	recorder *CommandPool1_2MockRecorder
}

// CommandPool1_2MockRecorder is the mock recorder for CommandPool1_2.
type CommandPool1_2MockRecorder struct {
	mock *CommandPool1_2
}

// NewCommandPool1_2 creates a new mock instance.
func NewCommandPool1_2(ctrl *gomock.Controller) *CommandPool1_2 {
	mock := &CommandPool1_2{ctrl: ctrl}
	mock.recorder = &CommandPool1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CommandPool1_2) EXPECT() *CommandPool1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *CommandPool1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *CommandPool1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*CommandPool1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *CommandPool1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *CommandPool1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*CommandPool1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *CommandPool1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *CommandPool1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*CommandPool1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *CommandPool1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *CommandPool1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*CommandPool1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *CommandPool1_2) Handle() driver.VkCommandPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkCommandPool)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *CommandPool1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*CommandPool1_2)(nil).Handle))
}

// Reset mocks base method.
func (m *CommandPool1_2) Reset(flags common.CommandPoolResetFlags) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", flags)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *CommandPool1_2MockRecorder) Reset(flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*CommandPool1_2)(nil).Reset), flags)
}

// TrimCommandPool mocks base method.
func (m *CommandPool1_2) TrimCommandPool(flags core1_1.CommandPoolTrimFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrimCommandPool", flags)
}

// TrimCommandPool indicates an expected call of TrimCommandPool.
func (mr *CommandPool1_2MockRecorder) TrimCommandPool(flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrimCommandPool", reflect.TypeOf((*CommandPool1_2)(nil).TrimCommandPool), flags)
}

// DescriptorPool1_2 is a mock of DescriptorPool interface.
type DescriptorPool1_2 struct {
	ctrl     *gomock.Controller
	recorder *DescriptorPool1_2MockRecorder
}

// DescriptorPool1_2MockRecorder is the mock recorder for DescriptorPool1_2.
type DescriptorPool1_2MockRecorder struct {
	mock *DescriptorPool1_2
}

// NewDescriptorPool1_2 creates a new mock instance.
func NewDescriptorPool1_2(ctrl *gomock.Controller) *DescriptorPool1_2 {
	mock := &DescriptorPool1_2{ctrl: ctrl}
	mock.recorder = &DescriptorPool1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DescriptorPool1_2) EXPECT() *DescriptorPool1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *DescriptorPool1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *DescriptorPool1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*DescriptorPool1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *DescriptorPool1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *DescriptorPool1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*DescriptorPool1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *DescriptorPool1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *DescriptorPool1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*DescriptorPool1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *DescriptorPool1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *DescriptorPool1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*DescriptorPool1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *DescriptorPool1_2) Handle() driver.VkDescriptorPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkDescriptorPool)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *DescriptorPool1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*DescriptorPool1_2)(nil).Handle))
}

// Reset mocks base method.
func (m *DescriptorPool1_2) Reset(flags common.DescriptorPoolResetFlags) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", flags)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *DescriptorPool1_2MockRecorder) Reset(flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*DescriptorPool1_2)(nil).Reset), flags)
}

// DescriptorSet1_2 is a mock of DescriptorSet interface.
type DescriptorSet1_2 struct {
	ctrl     *gomock.Controller
	recorder *DescriptorSet1_2MockRecorder
}

// DescriptorSet1_2MockRecorder is the mock recorder for DescriptorSet1_2.
type DescriptorSet1_2MockRecorder struct {
	mock *DescriptorSet1_2
}

// NewDescriptorSet1_2 creates a new mock instance.
func NewDescriptorSet1_2(ctrl *gomock.Controller) *DescriptorSet1_2 {
	mock := &DescriptorSet1_2{ctrl: ctrl}
	mock.recorder = &DescriptorSet1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DescriptorSet1_2) EXPECT() *DescriptorSet1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *DescriptorSet1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *DescriptorSet1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*DescriptorSet1_2)(nil).APIVersion))
}

// DescriptorPoolHandle mocks base method.
func (m *DescriptorSet1_2) DescriptorPoolHandle() driver.VkDescriptorPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescriptorPoolHandle")
	ret0, _ := ret[0].(driver.VkDescriptorPool)
	return ret0
}

// DescriptorPoolHandle indicates an expected call of DescriptorPoolHandle.
func (mr *DescriptorSet1_2MockRecorder) DescriptorPoolHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescriptorPoolHandle", reflect.TypeOf((*DescriptorSet1_2)(nil).DescriptorPoolHandle))
}

// DeviceHandle mocks base method.
func (m *DescriptorSet1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *DescriptorSet1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*DescriptorSet1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *DescriptorSet1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *DescriptorSet1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*DescriptorSet1_2)(nil).Driver))
}

// Free mocks base method.
func (m *DescriptorSet1_2) Free() (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Free")
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Free indicates an expected call of Free.
func (mr *DescriptorSet1_2MockRecorder) Free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*DescriptorSet1_2)(nil).Free))
}

// Handle mocks base method.
func (m *DescriptorSet1_2) Handle() driver.VkDescriptorSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkDescriptorSet)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *DescriptorSet1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*DescriptorSet1_2)(nil).Handle))
}

// DescriptorSetLayout1_2 is a mock of DescriptorSetLayout interface.
type DescriptorSetLayout1_2 struct {
	ctrl     *gomock.Controller
	recorder *DescriptorSetLayout1_2MockRecorder
}

// DescriptorSetLayout1_2MockRecorder is the mock recorder for DescriptorSetLayout1_2.
type DescriptorSetLayout1_2MockRecorder struct {
	mock *DescriptorSetLayout1_2
}

// NewDescriptorSetLayout1_2 creates a new mock instance.
func NewDescriptorSetLayout1_2(ctrl *gomock.Controller) *DescriptorSetLayout1_2 {
	mock := &DescriptorSetLayout1_2{ctrl: ctrl}
	mock.recorder = &DescriptorSetLayout1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DescriptorSetLayout1_2) EXPECT() *DescriptorSetLayout1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *DescriptorSetLayout1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *DescriptorSetLayout1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*DescriptorSetLayout1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *DescriptorSetLayout1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *DescriptorSetLayout1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*DescriptorSetLayout1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *DescriptorSetLayout1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *DescriptorSetLayout1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*DescriptorSetLayout1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *DescriptorSetLayout1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *DescriptorSetLayout1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*DescriptorSetLayout1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *DescriptorSetLayout1_2) Handle() driver.VkDescriptorSetLayout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkDescriptorSetLayout)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *DescriptorSetLayout1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*DescriptorSetLayout1_2)(nil).Handle))
}

// Device1_2 is a mock of Device interface.
type Device1_2 struct {
	ctrl     *gomock.Controller
	recorder *Device1_2MockRecorder
}

// Device1_2MockRecorder is the mock recorder for Device1_2.
type Device1_2MockRecorder struct {
	mock *Device1_2
}

// NewDevice1_2 creates a new mock instance.
func NewDevice1_2(ctrl *gomock.Controller) *Device1_2 {
	mock := &Device1_2{ctrl: ctrl}
	mock.recorder = &Device1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Device1_2) EXPECT() *Device1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *Device1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *Device1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*Device1_2)(nil).APIVersion))
}

// AllocateCommandBuffers mocks base method.
func (m *Device1_2) AllocateCommandBuffers(o core1_0.CommandBufferAllocateOptions) ([]core1_0.CommandBuffer, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateCommandBuffers", o)
	ret0, _ := ret[0].([]core1_0.CommandBuffer)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateCommandBuffers indicates an expected call of AllocateCommandBuffers.
func (mr *Device1_2MockRecorder) AllocateCommandBuffers(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateCommandBuffers", reflect.TypeOf((*Device1_2)(nil).AllocateCommandBuffers), o)
}

// AllocateDescriptorSets mocks base method.
func (m *Device1_2) AllocateDescriptorSets(o core1_0.DescriptorSetAllocateOptions) ([]core1_0.DescriptorSet, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateDescriptorSets", o)
	ret0, _ := ret[0].([]core1_0.DescriptorSet)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateDescriptorSets indicates an expected call of AllocateDescriptorSets.
func (mr *Device1_2MockRecorder) AllocateDescriptorSets(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateDescriptorSets", reflect.TypeOf((*Device1_2)(nil).AllocateDescriptorSets), o)
}

// AllocateMemory mocks base method.
func (m *Device1_2) AllocateMemory(allocationCallbacks *driver.AllocationCallbacks, o core1_0.MemoryAllocateOptions) (core1_0.DeviceMemory, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateMemory", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.DeviceMemory)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateMemory indicates an expected call of AllocateMemory.
func (mr *Device1_2MockRecorder) AllocateMemory(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateMemory", reflect.TypeOf((*Device1_2)(nil).AllocateMemory), allocationCallbacks, o)
}

// BindBufferMemory mocks base method.
func (m *Device1_2) BindBufferMemory(o []core1_1.BindBufferMemoryOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindBufferMemory", o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindBufferMemory indicates an expected call of BindBufferMemory.
func (mr *Device1_2MockRecorder) BindBufferMemory(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindBufferMemory", reflect.TypeOf((*Device1_2)(nil).BindBufferMemory), o)
}

// BindImageMemory mocks base method.
func (m *Device1_2) BindImageMemory(o []core1_1.BindImageMemoryOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindImageMemory", o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindImageMemory indicates an expected call of BindImageMemory.
func (mr *Device1_2MockRecorder) BindImageMemory(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindImageMemory", reflect.TypeOf((*Device1_2)(nil).BindImageMemory), o)
}

// BufferMemoryRequirements mocks base method.
func (m *Device1_2) BufferMemoryRequirements(o core1_1.BufferMemoryRequirementsOptions, out *core1_1.MemoryRequirementsOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BufferMemoryRequirements", o, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// BufferMemoryRequirements indicates an expected call of BufferMemoryRequirements.
func (mr *Device1_2MockRecorder) BufferMemoryRequirements(o, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferMemoryRequirements", reflect.TypeOf((*Device1_2)(nil).BufferMemoryRequirements), o, out)
}

// CreateBuffer mocks base method.
func (m *Device1_2) CreateBuffer(allocationCallbacks *driver.AllocationCallbacks, o core1_0.BufferCreateOptions) (core1_0.Buffer, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuffer", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.Buffer)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBuffer indicates an expected call of CreateBuffer.
func (mr *Device1_2MockRecorder) CreateBuffer(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuffer", reflect.TypeOf((*Device1_2)(nil).CreateBuffer), allocationCallbacks, o)
}

// CreateBufferView mocks base method.
func (m *Device1_2) CreateBufferView(allocationCallbacks *driver.AllocationCallbacks, o core1_0.BufferViewCreateOptions) (core1_0.BufferView, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBufferView", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.BufferView)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBufferView indicates an expected call of CreateBufferView.
func (mr *Device1_2MockRecorder) CreateBufferView(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBufferView", reflect.TypeOf((*Device1_2)(nil).CreateBufferView), allocationCallbacks, o)
}

// CreateCommandPool mocks base method.
func (m *Device1_2) CreateCommandPool(allocationCallbacks *driver.AllocationCallbacks, o core1_0.CommandPoolCreateOptions) (core1_0.CommandPool, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommandPool", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.CommandPool)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommandPool indicates an expected call of CreateCommandPool.
func (mr *Device1_2MockRecorder) CreateCommandPool(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommandPool", reflect.TypeOf((*Device1_2)(nil).CreateCommandPool), allocationCallbacks, o)
}

// CreateComputePipelines mocks base method.
func (m *Device1_2) CreateComputePipelines(pipelineCache core1_0.PipelineCache, allocationCallbacks *driver.AllocationCallbacks, o []core1_0.ComputePipelineCreateOptions) ([]core1_0.Pipeline, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComputePipelines", pipelineCache, allocationCallbacks, o)
	ret0, _ := ret[0].([]core1_0.Pipeline)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComputePipelines indicates an expected call of CreateComputePipelines.
func (mr *Device1_2MockRecorder) CreateComputePipelines(pipelineCache, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComputePipelines", reflect.TypeOf((*Device1_2)(nil).CreateComputePipelines), pipelineCache, allocationCallbacks, o)
}

// CreateDescriptorPool mocks base method.
func (m *Device1_2) CreateDescriptorPool(allocationCallbacks *driver.AllocationCallbacks, o core1_0.DescriptorPoolCreateOptions) (core1_0.DescriptorPool, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDescriptorPool", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.DescriptorPool)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDescriptorPool indicates an expected call of CreateDescriptorPool.
func (mr *Device1_2MockRecorder) CreateDescriptorPool(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDescriptorPool", reflect.TypeOf((*Device1_2)(nil).CreateDescriptorPool), allocationCallbacks, o)
}

// CreateDescriptorSetLayout mocks base method.
func (m *Device1_2) CreateDescriptorSetLayout(allocationCallbacks *driver.AllocationCallbacks, o core1_0.DescriptorSetLayoutCreateOptions) (core1_0.DescriptorSetLayout, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDescriptorSetLayout", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.DescriptorSetLayout)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDescriptorSetLayout indicates an expected call of CreateDescriptorSetLayout.
func (mr *Device1_2MockRecorder) CreateDescriptorSetLayout(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDescriptorSetLayout", reflect.TypeOf((*Device1_2)(nil).CreateDescriptorSetLayout), allocationCallbacks, o)
}

// CreateDescriptorUpdateTemplate mocks base method.
func (m *Device1_2) CreateDescriptorUpdateTemplate(o core1_1.DescriptorUpdateTemplateCreateOptions, allocator *driver.AllocationCallbacks) (core1_1.DescriptorUpdateTemplate, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDescriptorUpdateTemplate", o, allocator)
	ret0, _ := ret[0].(core1_1.DescriptorUpdateTemplate)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDescriptorUpdateTemplate indicates an expected call of CreateDescriptorUpdateTemplate.
func (mr *Device1_2MockRecorder) CreateDescriptorUpdateTemplate(o, allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDescriptorUpdateTemplate", reflect.TypeOf((*Device1_2)(nil).CreateDescriptorUpdateTemplate), o, allocator)
}

// CreateEvent mocks base method.
func (m *Device1_2) CreateEvent(allocationCallbacks *driver.AllocationCallbacks, options core1_0.EventCreateOptions) (core1_0.Event, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", allocationCallbacks, options)
	ret0, _ := ret[0].(core1_0.Event)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *Device1_2MockRecorder) CreateEvent(allocationCallbacks, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*Device1_2)(nil).CreateEvent), allocationCallbacks, options)
}

// CreateFence mocks base method.
func (m *Device1_2) CreateFence(allocationCallbacks *driver.AllocationCallbacks, o core1_0.FenceCreateOptions) (core1_0.Fence, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFence", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.Fence)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFence indicates an expected call of CreateFence.
func (mr *Device1_2MockRecorder) CreateFence(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFence", reflect.TypeOf((*Device1_2)(nil).CreateFence), allocationCallbacks, o)
}

// CreateFramebuffer mocks base method.
func (m *Device1_2) CreateFramebuffer(allocationCallbacks *driver.AllocationCallbacks, o core1_0.FramebufferCreateOptions) (core1_0.Framebuffer, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFramebuffer", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.Framebuffer)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFramebuffer indicates an expected call of CreateFramebuffer.
func (mr *Device1_2MockRecorder) CreateFramebuffer(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFramebuffer", reflect.TypeOf((*Device1_2)(nil).CreateFramebuffer), allocationCallbacks, o)
}

// CreateGraphicsPipelines mocks base method.
func (m *Device1_2) CreateGraphicsPipelines(pipelineCache core1_0.PipelineCache, allocationCallbacks *driver.AllocationCallbacks, o []core1_0.GraphicsPipelineCreateOptions) ([]core1_0.Pipeline, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphicsPipelines", pipelineCache, allocationCallbacks, o)
	ret0, _ := ret[0].([]core1_0.Pipeline)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGraphicsPipelines indicates an expected call of CreateGraphicsPipelines.
func (mr *Device1_2MockRecorder) CreateGraphicsPipelines(pipelineCache, allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphicsPipelines", reflect.TypeOf((*Device1_2)(nil).CreateGraphicsPipelines), pipelineCache, allocationCallbacks, o)
}

// CreateImage mocks base method.
func (m *Device1_2) CreateImage(allocationCallbacks *driver.AllocationCallbacks, options core1_0.ImageCreateOptions) (core1_0.Image, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", allocationCallbacks, options)
	ret0, _ := ret[0].(core1_0.Image)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateImage indicates an expected call of CreateImage.
func (mr *Device1_2MockRecorder) CreateImage(allocationCallbacks, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*Device1_2)(nil).CreateImage), allocationCallbacks, options)
}

// CreateImageView mocks base method.
func (m *Device1_2) CreateImageView(allocationCallbacks *driver.AllocationCallbacks, o core1_0.ImageViewCreateOptions) (core1_0.ImageView, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageView", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.ImageView)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateImageView indicates an expected call of CreateImageView.
func (mr *Device1_2MockRecorder) CreateImageView(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageView", reflect.TypeOf((*Device1_2)(nil).CreateImageView), allocationCallbacks, o)
}

// CreatePipelineCache mocks base method.
func (m *Device1_2) CreatePipelineCache(allocationCallbacks *driver.AllocationCallbacks, o core1_0.PipelineCacheCreateOptions) (core1_0.PipelineCache, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipelineCache", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.PipelineCache)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePipelineCache indicates an expected call of CreatePipelineCache.
func (mr *Device1_2MockRecorder) CreatePipelineCache(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineCache", reflect.TypeOf((*Device1_2)(nil).CreatePipelineCache), allocationCallbacks, o)
}

// CreatePipelineLayout mocks base method.
func (m *Device1_2) CreatePipelineLayout(allocationCallbacks *driver.AllocationCallbacks, o core1_0.PipelineLayoutCreateOptions) (core1_0.PipelineLayout, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipelineLayout", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.PipelineLayout)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePipelineLayout indicates an expected call of CreatePipelineLayout.
func (mr *Device1_2MockRecorder) CreatePipelineLayout(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineLayout", reflect.TypeOf((*Device1_2)(nil).CreatePipelineLayout), allocationCallbacks, o)
}

// CreateQueryPool mocks base method.
func (m *Device1_2) CreateQueryPool(allocationCallbacks *driver.AllocationCallbacks, o core1_0.QueryPoolCreateOptions) (core1_0.QueryPool, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueryPool", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.QueryPool)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateQueryPool indicates an expected call of CreateQueryPool.
func (mr *Device1_2MockRecorder) CreateQueryPool(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueryPool", reflect.TypeOf((*Device1_2)(nil).CreateQueryPool), allocationCallbacks, o)
}

// CreateRenderPass mocks base method.
func (m *Device1_2) CreateRenderPass(allocationCallbacks *driver.AllocationCallbacks, o core1_0.RenderPassCreateOptions) (core1_0.RenderPass, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRenderPass", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.RenderPass)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRenderPass indicates an expected call of CreateRenderPass.
func (mr *Device1_2MockRecorder) CreateRenderPass(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRenderPass", reflect.TypeOf((*Device1_2)(nil).CreateRenderPass), allocationCallbacks, o)
}

// CreateRenderPass2 mocks base method.
func (m *Device1_2) CreateRenderPass2(allocator *driver.AllocationCallbacks, options core1_2.RenderPassCreateOptions) (core1_0.RenderPass, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRenderPass2", allocator, options)
	ret0, _ := ret[0].(core1_0.RenderPass)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRenderPass2 indicates an expected call of CreateRenderPass2.
func (mr *Device1_2MockRecorder) CreateRenderPass2(allocator, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRenderPass2", reflect.TypeOf((*Device1_2)(nil).CreateRenderPass2), allocator, options)
}

// CreateSampler mocks base method.
func (m *Device1_2) CreateSampler(allocationCallbacks *driver.AllocationCallbacks, o core1_0.SamplerCreateOptions) (core1_0.Sampler, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSampler", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.Sampler)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSampler indicates an expected call of CreateSampler.
func (mr *Device1_2MockRecorder) CreateSampler(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSampler", reflect.TypeOf((*Device1_2)(nil).CreateSampler), allocationCallbacks, o)
}

// CreateSamplerYcbcrConversion mocks base method.
func (m *Device1_2) CreateSamplerYcbcrConversion(o core1_1.SamplerYcbcrConversionCreateOptions, allocator *driver.AllocationCallbacks) (core1_1.SamplerYcbcrConversion, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSamplerYcbcrConversion", o, allocator)
	ret0, _ := ret[0].(core1_1.SamplerYcbcrConversion)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSamplerYcbcrConversion indicates an expected call of CreateSamplerYcbcrConversion.
func (mr *Device1_2MockRecorder) CreateSamplerYcbcrConversion(o, allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSamplerYcbcrConversion", reflect.TypeOf((*Device1_2)(nil).CreateSamplerYcbcrConversion), o, allocator)
}

// CreateSemaphore mocks base method.
func (m *Device1_2) CreateSemaphore(allocationCallbacks *driver.AllocationCallbacks, o core1_0.SemaphoreCreateOptions) (core1_0.Semaphore, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSemaphore", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.Semaphore)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSemaphore indicates an expected call of CreateSemaphore.
func (mr *Device1_2MockRecorder) CreateSemaphore(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSemaphore", reflect.TypeOf((*Device1_2)(nil).CreateSemaphore), allocationCallbacks, o)
}

// CreateShaderModule mocks base method.
func (m *Device1_2) CreateShaderModule(allocationCallbacks *driver.AllocationCallbacks, o core1_0.ShaderModuleCreateOptions) (core1_0.ShaderModule, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShaderModule", allocationCallbacks, o)
	ret0, _ := ret[0].(core1_0.ShaderModule)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateShaderModule indicates an expected call of CreateShaderModule.
func (mr *Device1_2MockRecorder) CreateShaderModule(allocationCallbacks, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShaderModule", reflect.TypeOf((*Device1_2)(nil).CreateShaderModule), allocationCallbacks, o)
}

// DescriptorSetLayoutSupport mocks base method.
func (m *Device1_2) DescriptorSetLayoutSupport(o core1_0.DescriptorSetLayoutCreateOptions, outData *core1_1.DescriptorSetLayoutSupportOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescriptorSetLayoutSupport", o, outData)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescriptorSetLayoutSupport indicates an expected call of DescriptorSetLayoutSupport.
func (mr *Device1_2MockRecorder) DescriptorSetLayoutSupport(o, outData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescriptorSetLayoutSupport", reflect.TypeOf((*Device1_2)(nil).DescriptorSetLayoutSupport), o, outData)
}

// Destroy mocks base method.
func (m *Device1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *Device1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Device1_2)(nil).Destroy), callbacks)
}

// DeviceGroupPeerMemoryFeatures mocks base method.
func (m *Device1_2) DeviceGroupPeerMemoryFeatures(heapIndex, localDeviceIndex, remoteDeviceIndex int) core1_1.PeerMemoryFeatures {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceGroupPeerMemoryFeatures", heapIndex, localDeviceIndex, remoteDeviceIndex)
	ret0, _ := ret[0].(core1_1.PeerMemoryFeatures)
	return ret0
}

// DeviceGroupPeerMemoryFeatures indicates an expected call of DeviceGroupPeerMemoryFeatures.
func (mr *Device1_2MockRecorder) DeviceGroupPeerMemoryFeatures(heapIndex, localDeviceIndex, remoteDeviceIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGroupPeerMemoryFeatures", reflect.TypeOf((*Device1_2)(nil).DeviceGroupPeerMemoryFeatures), heapIndex, localDeviceIndex, remoteDeviceIndex)
}

// Driver mocks base method.
func (m *Device1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *Device1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*Device1_2)(nil).Driver))
}

// FlushMappedMemoryRanges mocks base method.
func (m *Device1_2) FlushMappedMemoryRanges(ranges []core1_0.MappedMemoryRangeOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushMappedMemoryRanges", ranges)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushMappedMemoryRanges indicates an expected call of FlushMappedMemoryRanges.
func (mr *Device1_2MockRecorder) FlushMappedMemoryRanges(ranges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushMappedMemoryRanges", reflect.TypeOf((*Device1_2)(nil).FlushMappedMemoryRanges), ranges)
}

// FreeCommandBuffers mocks base method.
func (m *Device1_2) FreeCommandBuffers(buffers []core1_0.CommandBuffer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FreeCommandBuffers", buffers)
}

// FreeCommandBuffers indicates an expected call of FreeCommandBuffers.
func (mr *Device1_2MockRecorder) FreeCommandBuffers(buffers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeCommandBuffers", reflect.TypeOf((*Device1_2)(nil).FreeCommandBuffers), buffers)
}

// FreeDescriptorSets mocks base method.
func (m *Device1_2) FreeDescriptorSets(sets []core1_0.DescriptorSet) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeDescriptorSets", sets)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FreeDescriptorSets indicates an expected call of FreeDescriptorSets.
func (mr *Device1_2MockRecorder) FreeDescriptorSets(sets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeDescriptorSets", reflect.TypeOf((*Device1_2)(nil).FreeDescriptorSets), sets)
}

// FreeMemory mocks base method.
func (m *Device1_2) FreeMemory(deviceMemory core1_0.DeviceMemory, allocationCallbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FreeMemory", deviceMemory, allocationCallbacks)
}

// FreeMemory indicates an expected call of FreeMemory.
func (mr *Device1_2MockRecorder) FreeMemory(deviceMemory, allocationCallbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeMemory", reflect.TypeOf((*Device1_2)(nil).FreeMemory), deviceMemory, allocationCallbacks)
}

// GetBufferDeviceAddress mocks base method.
func (m *Device1_2) GetBufferDeviceAddress(o core1_2.BufferDeviceAddressOptions) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBufferDeviceAddress", o)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBufferDeviceAddress indicates an expected call of GetBufferDeviceAddress.
func (mr *Device1_2MockRecorder) GetBufferDeviceAddress(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBufferDeviceAddress", reflect.TypeOf((*Device1_2)(nil).GetBufferDeviceAddress), o)
}

// GetBufferOpaqueCaptureAddress mocks base method.
func (m *Device1_2) GetBufferOpaqueCaptureAddress(o core1_2.BufferDeviceAddressOptions) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBufferOpaqueCaptureAddress", o)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBufferOpaqueCaptureAddress indicates an expected call of GetBufferOpaqueCaptureAddress.
func (mr *Device1_2MockRecorder) GetBufferOpaqueCaptureAddress(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBufferOpaqueCaptureAddress", reflect.TypeOf((*Device1_2)(nil).GetBufferOpaqueCaptureAddress), o)
}

// GetDeviceMemoryOpaqueCaptureAddress mocks base method.
func (m *Device1_2) GetDeviceMemoryOpaqueCaptureAddress(o core1_2.DeviceMemoryOpaqueAddressOptions) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceMemoryOpaqueCaptureAddress", o)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceMemoryOpaqueCaptureAddress indicates an expected call of GetDeviceMemoryOpaqueCaptureAddress.
func (mr *Device1_2MockRecorder) GetDeviceMemoryOpaqueCaptureAddress(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceMemoryOpaqueCaptureAddress", reflect.TypeOf((*Device1_2)(nil).GetDeviceMemoryOpaqueCaptureAddress), o)
}

// GetQueue mocks base method.
func (m *Device1_2) GetQueue(queueFamilyIndex, queueIndex int) core1_0.Queue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueue", queueFamilyIndex, queueIndex)
	ret0, _ := ret[0].(core1_0.Queue)
	return ret0
}

// GetQueue indicates an expected call of GetQueue.
func (mr *Device1_2MockRecorder) GetQueue(queueFamilyIndex, queueIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue", reflect.TypeOf((*Device1_2)(nil).GetQueue), queueFamilyIndex, queueIndex)
}

// GetQueue2 mocks base method.
func (m *Device1_2) GetQueue2(o core1_1.DeviceQueueOptions) (core1_0.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueue2", o)
	ret0, _ := ret[0].(core1_0.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueue2 indicates an expected call of GetQueue2.
func (mr *Device1_2MockRecorder) GetQueue2(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue2", reflect.TypeOf((*Device1_2)(nil).GetQueue2), o)
}

// Handle mocks base method.
func (m *Device1_2) Handle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *Device1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Device1_2)(nil).Handle))
}

// ImageMemoryRequirements mocks base method.
func (m *Device1_2) ImageMemoryRequirements(o core1_1.ImageMemoryRequirementsOptions, out *core1_1.MemoryRequirementsOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageMemoryRequirements", o, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImageMemoryRequirements indicates an expected call of ImageMemoryRequirements.
func (mr *Device1_2MockRecorder) ImageMemoryRequirements(o, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageMemoryRequirements", reflect.TypeOf((*Device1_2)(nil).ImageMemoryRequirements), o, out)
}

// InvalidateMappedMemoryRanges mocks base method.
func (m *Device1_2) InvalidateMappedMemoryRanges(ranges []core1_0.MappedMemoryRangeOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateMappedMemoryRanges", ranges)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateMappedMemoryRanges indicates an expected call of InvalidateMappedMemoryRanges.
func (mr *Device1_2MockRecorder) InvalidateMappedMemoryRanges(ranges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateMappedMemoryRanges", reflect.TypeOf((*Device1_2)(nil).InvalidateMappedMemoryRanges), ranges)
}

// IsDeviceExtensionActive mocks base method.
func (m *Device1_2) IsDeviceExtensionActive(extensionName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeviceExtensionActive", extensionName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDeviceExtensionActive indicates an expected call of IsDeviceExtensionActive.
func (mr *Device1_2MockRecorder) IsDeviceExtensionActive(extensionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeviceExtensionActive", reflect.TypeOf((*Device1_2)(nil).IsDeviceExtensionActive), extensionName)
}

// ResetFences mocks base method.
func (m *Device1_2) ResetFences(fences []core1_0.Fence) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetFences", fences)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetFences indicates an expected call of ResetFences.
func (mr *Device1_2MockRecorder) ResetFences(fences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFences", reflect.TypeOf((*Device1_2)(nil).ResetFences), fences)
}

// SignalSemaphore mocks base method.
func (m *Device1_2) SignalSemaphore(o core1_2.SemaphoreSignalOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalSemaphore", o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignalSemaphore indicates an expected call of SignalSemaphore.
func (mr *Device1_2MockRecorder) SignalSemaphore(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalSemaphore", reflect.TypeOf((*Device1_2)(nil).SignalSemaphore), o)
}

// SparseImageMemoryRequirements mocks base method.
func (m *Device1_2) SparseImageMemoryRequirements(o core1_1.ImageSparseMemoryRequirementsOptions, outDataFactory func() *core1_1.SparseImageMemoryRequirementsOutData) ([]*core1_1.SparseImageMemoryRequirementsOutData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SparseImageMemoryRequirements", o, outDataFactory)
	ret0, _ := ret[0].([]*core1_1.SparseImageMemoryRequirementsOutData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SparseImageMemoryRequirements indicates an expected call of SparseImageMemoryRequirements.
func (mr *Device1_2MockRecorder) SparseImageMemoryRequirements(o, outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SparseImageMemoryRequirements", reflect.TypeOf((*Device1_2)(nil).SparseImageMemoryRequirements), o, outDataFactory)
}

// UpdateDescriptorSets mocks base method.
func (m *Device1_2) UpdateDescriptorSets(writes []core1_0.WriteDescriptorSetOptions, copies []core1_0.CopyDescriptorSetOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDescriptorSets", writes, copies)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDescriptorSets indicates an expected call of UpdateDescriptorSets.
func (mr *Device1_2MockRecorder) UpdateDescriptorSets(writes, copies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescriptorSets", reflect.TypeOf((*Device1_2)(nil).UpdateDescriptorSets), writes, copies)
}

// WaitForFences mocks base method.
func (m *Device1_2) WaitForFences(waitForAll bool, timeout time.Duration, fences []core1_0.Fence) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForFences", waitForAll, timeout, fences)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForFences indicates an expected call of WaitForFences.
func (mr *Device1_2MockRecorder) WaitForFences(waitForAll, timeout, fences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForFences", reflect.TypeOf((*Device1_2)(nil).WaitForFences), waitForAll, timeout, fences)
}

// WaitForIdle mocks base method.
func (m *Device1_2) WaitForIdle() (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForIdle")
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForIdle indicates an expected call of WaitForIdle.
func (mr *Device1_2MockRecorder) WaitForIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForIdle", reflect.TypeOf((*Device1_2)(nil).WaitForIdle))
}

// WaitSemaphores mocks base method.
func (m *Device1_2) WaitSemaphores(timeout time.Duration, o core1_2.SemaphoreWaitOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitSemaphores", timeout, o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitSemaphores indicates an expected call of WaitSemaphores.
func (mr *Device1_2MockRecorder) WaitSemaphores(timeout, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitSemaphores", reflect.TypeOf((*Device1_2)(nil).WaitSemaphores), timeout, o)
}

// DeviceMemory1_2 is a mock of DeviceMemory interface.
type DeviceMemory1_2 struct {
	ctrl     *gomock.Controller
	recorder *DeviceMemory1_2MockRecorder
}

// DeviceMemory1_2MockRecorder is the mock recorder for DeviceMemory1_2.
type DeviceMemory1_2MockRecorder struct {
	mock *DeviceMemory1_2
}

// NewDeviceMemory1_2 creates a new mock instance.
func NewDeviceMemory1_2(ctrl *gomock.Controller) *DeviceMemory1_2 {
	mock := &DeviceMemory1_2{ctrl: ctrl}
	mock.recorder = &DeviceMemory1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DeviceMemory1_2) EXPECT() *DeviceMemory1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *DeviceMemory1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *DeviceMemory1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*DeviceMemory1_2)(nil).APIVersion))
}

// Commitment mocks base method.
func (m *DeviceMemory1_2) Commitment() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commitment")
	ret0, _ := ret[0].(int)
	return ret0
}

// Commitment indicates an expected call of Commitment.
func (mr *DeviceMemory1_2MockRecorder) Commitment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commitment", reflect.TypeOf((*DeviceMemory1_2)(nil).Commitment))
}

// DeviceHandle mocks base method.
func (m *DeviceMemory1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *DeviceMemory1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*DeviceMemory1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *DeviceMemory1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *DeviceMemory1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*DeviceMemory1_2)(nil).Driver))
}

// FlushAll mocks base method.
func (m *DeviceMemory1_2) FlushAll() (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll")
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushAll indicates an expected call of FlushAll.
func (mr *DeviceMemory1_2MockRecorder) FlushAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*DeviceMemory1_2)(nil).FlushAll))
}

// Free mocks base method.
func (m *DeviceMemory1_2) Free(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free", callbacks)
}

// Free indicates an expected call of Free.
func (mr *DeviceMemory1_2MockRecorder) Free(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*DeviceMemory1_2)(nil).Free), callbacks)
}

// Handle mocks base method.
func (m *DeviceMemory1_2) Handle() driver.VkDeviceMemory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkDeviceMemory)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *DeviceMemory1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*DeviceMemory1_2)(nil).Handle))
}

// InvalidateAll mocks base method.
func (m *DeviceMemory1_2) InvalidateAll() (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateAll")
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateAll indicates an expected call of InvalidateAll.
func (mr *DeviceMemory1_2MockRecorder) InvalidateAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateAll", reflect.TypeOf((*DeviceMemory1_2)(nil).InvalidateAll))
}

// MapMemory mocks base method.
func (m *DeviceMemory1_2) MapMemory(offset, size int, flags core1_0.MemoryMapFlags) (unsafe.Pointer, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapMemory", offset, size, flags)
	ret0, _ := ret[0].(unsafe.Pointer)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MapMemory indicates an expected call of MapMemory.
func (mr *DeviceMemory1_2MockRecorder) MapMemory(offset, size, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapMemory", reflect.TypeOf((*DeviceMemory1_2)(nil).MapMemory), offset, size, flags)
}

// UnmapMemory mocks base method.
func (m *DeviceMemory1_2) UnmapMemory() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnmapMemory")
}

// UnmapMemory indicates an expected call of UnmapMemory.
func (mr *DeviceMemory1_2MockRecorder) UnmapMemory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmapMemory", reflect.TypeOf((*DeviceMemory1_2)(nil).UnmapMemory))
}

// DescriptorUpdateTemplate1_2 is a mock of DescriptorUpdateTemplate interface.
type DescriptorUpdateTemplate1_2 struct {
	ctrl     *gomock.Controller
	recorder *DescriptorUpdateTemplate1_2MockRecorder
}

// DescriptorUpdateTemplate1_2MockRecorder is the mock recorder for DescriptorUpdateTemplate1_2.
type DescriptorUpdateTemplate1_2MockRecorder struct {
	mock *DescriptorUpdateTemplate1_2
}

// NewDescriptorUpdateTemplate1_2 creates a new mock instance.
func NewDescriptorUpdateTemplate1_2(ctrl *gomock.Controller) *DescriptorUpdateTemplate1_2 {
	mock := &DescriptorUpdateTemplate1_2{ctrl: ctrl}
	mock.recorder = &DescriptorUpdateTemplate1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DescriptorUpdateTemplate1_2) EXPECT() *DescriptorUpdateTemplate1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *DescriptorUpdateTemplate1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *DescriptorUpdateTemplate1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*DescriptorUpdateTemplate1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *DescriptorUpdateTemplate1_2) Destroy(allocator *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", allocator)
}

// Destroy indicates an expected call of Destroy.
func (mr *DescriptorUpdateTemplate1_2MockRecorder) Destroy(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*DescriptorUpdateTemplate1_2)(nil).Destroy), allocator)
}

// DeviceHandle mocks base method.
func (m *DescriptorUpdateTemplate1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *DescriptorUpdateTemplate1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*DescriptorUpdateTemplate1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *DescriptorUpdateTemplate1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *DescriptorUpdateTemplate1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*DescriptorUpdateTemplate1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *DescriptorUpdateTemplate1_2) Handle() driver.VkDescriptorUpdateTemplate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkDescriptorUpdateTemplate)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *DescriptorUpdateTemplate1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*DescriptorUpdateTemplate1_2)(nil).Handle))
}

// UpdateDescriptorSetFromBuffer mocks base method.
func (m *DescriptorUpdateTemplate1_2) UpdateDescriptorSetFromBuffer(descriptorSet core1_0.DescriptorSet, data core1_0.DescriptorBufferInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateDescriptorSetFromBuffer", descriptorSet, data)
}

// UpdateDescriptorSetFromBuffer indicates an expected call of UpdateDescriptorSetFromBuffer.
func (mr *DescriptorUpdateTemplate1_2MockRecorder) UpdateDescriptorSetFromBuffer(descriptorSet, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescriptorSetFromBuffer", reflect.TypeOf((*DescriptorUpdateTemplate1_2)(nil).UpdateDescriptorSetFromBuffer), descriptorSet, data)
}

// UpdateDescriptorSetFromImage mocks base method.
func (m *DescriptorUpdateTemplate1_2) UpdateDescriptorSetFromImage(descriptorSet core1_0.DescriptorSet, data core1_0.DescriptorImageInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateDescriptorSetFromImage", descriptorSet, data)
}

// UpdateDescriptorSetFromImage indicates an expected call of UpdateDescriptorSetFromImage.
func (mr *DescriptorUpdateTemplate1_2MockRecorder) UpdateDescriptorSetFromImage(descriptorSet, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescriptorSetFromImage", reflect.TypeOf((*DescriptorUpdateTemplate1_2)(nil).UpdateDescriptorSetFromImage), descriptorSet, data)
}

// UpdateDescriptorSetFromObjectHandle mocks base method.
func (m *DescriptorUpdateTemplate1_2) UpdateDescriptorSetFromObjectHandle(descriptorSet core1_0.DescriptorSet, data driver.VulkanHandle) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateDescriptorSetFromObjectHandle", descriptorSet, data)
}

// UpdateDescriptorSetFromObjectHandle indicates an expected call of UpdateDescriptorSetFromObjectHandle.
func (mr *DescriptorUpdateTemplate1_2MockRecorder) UpdateDescriptorSetFromObjectHandle(descriptorSet, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescriptorSetFromObjectHandle", reflect.TypeOf((*DescriptorUpdateTemplate1_2)(nil).UpdateDescriptorSetFromObjectHandle), descriptorSet, data)
}

// Event1_2 is a mock of Event interface.
type Event1_2 struct {
	ctrl     *gomock.Controller
	recorder *Event1_2MockRecorder
}

// Event1_2MockRecorder is the mock recorder for Event1_2.
type Event1_2MockRecorder struct {
	mock *Event1_2
}

// NewEvent1_2 creates a new mock instance.
func NewEvent1_2(ctrl *gomock.Controller) *Event1_2 {
	mock := &Event1_2{ctrl: ctrl}
	mock.recorder = &Event1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Event1_2) EXPECT() *Event1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *Event1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *Event1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*Event1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *Event1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *Event1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Event1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *Event1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *Event1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*Event1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *Event1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *Event1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*Event1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *Event1_2) Handle() driver.VkEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkEvent)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *Event1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Event1_2)(nil).Handle))
}

// Reset mocks base method.
func (m *Event1_2) Reset() (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *Event1_2MockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*Event1_2)(nil).Reset))
}

// Set mocks base method.
func (m *Event1_2) Set() (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set")
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *Event1_2MockRecorder) Set() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Event1_2)(nil).Set))
}

// Status mocks base method.
func (m *Event1_2) Status() (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *Event1_2MockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*Event1_2)(nil).Status))
}

// Fence1_2 is a mock of Fence interface.
type Fence1_2 struct {
	ctrl     *gomock.Controller
	recorder *Fence1_2MockRecorder
}

// Fence1_2MockRecorder is the mock recorder for Fence1_2.
type Fence1_2MockRecorder struct {
	mock *Fence1_2
}

// NewFence1_2 creates a new mock instance.
func NewFence1_2(ctrl *gomock.Controller) *Fence1_2 {
	mock := &Fence1_2{ctrl: ctrl}
	mock.recorder = &Fence1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Fence1_2) EXPECT() *Fence1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *Fence1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *Fence1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*Fence1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *Fence1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *Fence1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Fence1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *Fence1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *Fence1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*Fence1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *Fence1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *Fence1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*Fence1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *Fence1_2) Handle() driver.VkFence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkFence)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *Fence1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Fence1_2)(nil).Handle))
}

// Reset mocks base method.
func (m *Fence1_2) Reset() (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *Fence1_2MockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*Fence1_2)(nil).Reset))
}

// Status mocks base method.
func (m *Fence1_2) Status() (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *Fence1_2MockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*Fence1_2)(nil).Status))
}

// Wait mocks base method.
func (m *Fence1_2) Wait(timeout time.Duration) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", timeout)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *Fence1_2MockRecorder) Wait(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*Fence1_2)(nil).Wait), timeout)
}

// Framebuffer1_2 is a mock of Framebuffer interface.
type Framebuffer1_2 struct {
	ctrl     *gomock.Controller
	recorder *Framebuffer1_2MockRecorder
}

// Framebuffer1_2MockRecorder is the mock recorder for Framebuffer1_2.
type Framebuffer1_2MockRecorder struct {
	mock *Framebuffer1_2
}

// NewFramebuffer1_2 creates a new mock instance.
func NewFramebuffer1_2(ctrl *gomock.Controller) *Framebuffer1_2 {
	mock := &Framebuffer1_2{ctrl: ctrl}
	mock.recorder = &Framebuffer1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Framebuffer1_2) EXPECT() *Framebuffer1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *Framebuffer1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *Framebuffer1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*Framebuffer1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *Framebuffer1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *Framebuffer1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Framebuffer1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *Framebuffer1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *Framebuffer1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*Framebuffer1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *Framebuffer1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *Framebuffer1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*Framebuffer1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *Framebuffer1_2) Handle() driver.VkFramebuffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkFramebuffer)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *Framebuffer1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Framebuffer1_2)(nil).Handle))
}

// Image1_2 is a mock of Image interface.
type Image1_2 struct {
	ctrl     *gomock.Controller
	recorder *Image1_2MockRecorder
}

// Image1_2MockRecorder is the mock recorder for Image1_2.
type Image1_2MockRecorder struct {
	mock *Image1_2
}

// NewImage1_2 creates a new mock instance.
func NewImage1_2(ctrl *gomock.Controller) *Image1_2 {
	mock := &Image1_2{ctrl: ctrl}
	mock.recorder = &Image1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Image1_2) EXPECT() *Image1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *Image1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *Image1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*Image1_2)(nil).APIVersion))
}

// BindImageMemory mocks base method.
func (m *Image1_2) BindImageMemory(memory core1_0.DeviceMemory, offset int) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindImageMemory", memory, offset)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindImageMemory indicates an expected call of BindImageMemory.
func (mr *Image1_2MockRecorder) BindImageMemory(memory, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindImageMemory", reflect.TypeOf((*Image1_2)(nil).BindImageMemory), memory, offset)
}

// Destroy mocks base method.
func (m *Image1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *Image1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Image1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *Image1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *Image1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*Image1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *Image1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *Image1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*Image1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *Image1_2) Handle() driver.VkImage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkImage)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *Image1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Image1_2)(nil).Handle))
}

// MemoryRequirements mocks base method.
func (m *Image1_2) MemoryRequirements() *core1_0.MemoryRequirements {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryRequirements")
	ret0, _ := ret[0].(*core1_0.MemoryRequirements)
	return ret0
}

// MemoryRequirements indicates an expected call of MemoryRequirements.
func (mr *Image1_2MockRecorder) MemoryRequirements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRequirements", reflect.TypeOf((*Image1_2)(nil).MemoryRequirements))
}

// SparseMemoryRequirements mocks base method.
func (m *Image1_2) SparseMemoryRequirements() []core1_0.SparseImageMemoryRequirements {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SparseMemoryRequirements")
	ret0, _ := ret[0].([]core1_0.SparseImageMemoryRequirements)
	return ret0
}

// SparseMemoryRequirements indicates an expected call of SparseMemoryRequirements.
func (mr *Image1_2MockRecorder) SparseMemoryRequirements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SparseMemoryRequirements", reflect.TypeOf((*Image1_2)(nil).SparseMemoryRequirements))
}

// SubresourceLayout mocks base method.
func (m *Image1_2) SubresourceLayout(subresource *common.ImageSubresource) *common.SubresourceLayout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubresourceLayout", subresource)
	ret0, _ := ret[0].(*common.SubresourceLayout)
	return ret0
}

// SubresourceLayout indicates an expected call of SubresourceLayout.
func (mr *Image1_2MockRecorder) SubresourceLayout(subresource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubresourceLayout", reflect.TypeOf((*Image1_2)(nil).SubresourceLayout), subresource)
}

// ImageView1_2 is a mock of ImageView interface.
type ImageView1_2 struct {
	ctrl     *gomock.Controller
	recorder *ImageView1_2MockRecorder
}

// ImageView1_2MockRecorder is the mock recorder for ImageView1_2.
type ImageView1_2MockRecorder struct {
	mock *ImageView1_2
}

// NewImageView1_2 creates a new mock instance.
func NewImageView1_2(ctrl *gomock.Controller) *ImageView1_2 {
	mock := &ImageView1_2{ctrl: ctrl}
	mock.recorder = &ImageView1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ImageView1_2) EXPECT() *ImageView1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *ImageView1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *ImageView1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*ImageView1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *ImageView1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *ImageView1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*ImageView1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *ImageView1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *ImageView1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*ImageView1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *ImageView1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *ImageView1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*ImageView1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *ImageView1_2) Handle() driver.VkImageView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkImageView)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *ImageView1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*ImageView1_2)(nil).Handle))
}

// Instance1_2 is a mock of Instance interface.
type Instance1_2 struct {
	ctrl     *gomock.Controller
	recorder *Instance1_2MockRecorder
}

// Instance1_2MockRecorder is the mock recorder for Instance1_2.
type Instance1_2MockRecorder struct {
	mock *Instance1_2
}

// NewInstance1_2 creates a new mock instance.
func NewInstance1_2(ctrl *gomock.Controller) *Instance1_2 {
	mock := &Instance1_2{ctrl: ctrl}
	mock.recorder = &Instance1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Instance1_2) EXPECT() *Instance1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *Instance1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *Instance1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*Instance1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *Instance1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *Instance1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Instance1_2)(nil).Destroy), callbacks)
}

// Driver mocks base method.
func (m *Instance1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *Instance1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*Instance1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *Instance1_2) Handle() driver.VkInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkInstance)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *Instance1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Instance1_2)(nil).Handle))
}

// IsInstanceExtensionActive mocks base method.
func (m *Instance1_2) IsInstanceExtensionActive(extensionName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstanceExtensionActive", extensionName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInstanceExtensionActive indicates an expected call of IsInstanceExtensionActive.
func (mr *Instance1_2MockRecorder) IsInstanceExtensionActive(extensionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstanceExtensionActive", reflect.TypeOf((*Instance1_2)(nil).IsInstanceExtensionActive), extensionName)
}

// PhysicalDeviceGroups mocks base method.
func (m *Instance1_2) PhysicalDeviceGroups(outDataFactory func() *core1_1.DeviceGroupOutData) ([]*core1_1.DeviceGroupOutData, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDeviceGroups", outDataFactory)
	ret0, _ := ret[0].([]*core1_1.DeviceGroupOutData)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PhysicalDeviceGroups indicates an expected call of PhysicalDeviceGroups.
func (mr *Instance1_2MockRecorder) PhysicalDeviceGroups(outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDeviceGroups", reflect.TypeOf((*Instance1_2)(nil).PhysicalDeviceGroups), outDataFactory)
}

// PhysicalDevices mocks base method.
func (m *Instance1_2) PhysicalDevices() ([]core1_0.PhysicalDevice, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDevices")
	ret0, _ := ret[0].([]core1_0.PhysicalDevice)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PhysicalDevices indicates an expected call of PhysicalDevices.
func (mr *Instance1_2MockRecorder) PhysicalDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDevices", reflect.TypeOf((*Instance1_2)(nil).PhysicalDevices))
}

// InstanceScopedPhysicalDevice1_2 is a mock of InstanceScopedPhysicalDevice interface.
type InstanceScopedPhysicalDevice1_2 struct {
	ctrl     *gomock.Controller
	recorder *InstanceScopedPhysicalDevice1_2MockRecorder
}

// InstanceScopedPhysicalDevice1_2MockRecorder is the mock recorder for InstanceScopedPhysicalDevice1_2.
type InstanceScopedPhysicalDevice1_2MockRecorder struct {
	mock *InstanceScopedPhysicalDevice1_2
}

// NewInstanceScopedPhysicalDevice1_2 creates a new mock instance.
func NewInstanceScopedPhysicalDevice1_2(ctrl *gomock.Controller) *InstanceScopedPhysicalDevice1_2 {
	mock := &InstanceScopedPhysicalDevice1_2{ctrl: ctrl}
	mock.recorder = &InstanceScopedPhysicalDevice1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *InstanceScopedPhysicalDevice1_2) EXPECT() *InstanceScopedPhysicalDevice1_2MockRecorder {
	return m.recorder
}

// AvailableExtensions mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) AvailableExtensions() (map[string]*common.ExtensionProperties, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableExtensions")
	ret0, _ := ret[0].(map[string]*common.ExtensionProperties)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableExtensions indicates an expected call of AvailableExtensions.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) AvailableExtensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableExtensions", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).AvailableExtensions))
}

// AvailableExtensionsForLayer mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) AvailableExtensionsForLayer(layerName string) (map[string]*common.ExtensionProperties, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableExtensionsForLayer", layerName)
	ret0, _ := ret[0].(map[string]*common.ExtensionProperties)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableExtensionsForLayer indicates an expected call of AvailableExtensionsForLayer.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) AvailableExtensionsForLayer(layerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableExtensionsForLayer", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).AvailableExtensionsForLayer), layerName)
}

// AvailableLayers mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) AvailableLayers() (map[string]*common.LayerProperties, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableLayers")
	ret0, _ := ret[0].(map[string]*common.LayerProperties)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableLayers indicates an expected call of AvailableLayers.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) AvailableLayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableLayers", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).AvailableLayers))
}

// CreateDevice mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) CreateDevice(allocationCallbacks *driver.AllocationCallbacks, options core1_0.DeviceCreateOptions) (core1_0.Device, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", allocationCallbacks, options)
	ret0, _ := ret[0].(core1_0.Device)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) CreateDevice(allocationCallbacks, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).CreateDevice), allocationCallbacks, options)
}

// DeviceAPIVersion mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) DeviceAPIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceAPIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// DeviceAPIVersion indicates an expected call of DeviceAPIVersion.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) DeviceAPIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceAPIVersion", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).DeviceAPIVersion))
}

// Driver mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).Driver))
}

// ExternalBufferProperties mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) ExternalBufferProperties(o core1_1.ExternalBufferOptions, outData *core1_1.ExternalBufferOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalBufferProperties", o, outData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalBufferProperties indicates an expected call of ExternalBufferProperties.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) ExternalBufferProperties(o, outData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalBufferProperties", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).ExternalBufferProperties), o, outData)
}

// ExternalFenceProperties mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) ExternalFenceProperties(o core1_1.ExternalFenceOptions, outData *core1_1.ExternalFenceOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalFenceProperties", o, outData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalFenceProperties indicates an expected call of ExternalFenceProperties.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) ExternalFenceProperties(o, outData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalFenceProperties", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).ExternalFenceProperties), o, outData)
}

// ExternalSemaphoreProperties mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) ExternalSemaphoreProperties(o core1_1.ExternalSemaphoreOptions, outData *core1_1.ExternalSemaphoreOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalSemaphoreProperties", o, outData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalSemaphoreProperties indicates an expected call of ExternalSemaphoreProperties.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) ExternalSemaphoreProperties(o, outData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalSemaphoreProperties", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).ExternalSemaphoreProperties), o, outData)
}

// Features mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) Features() *core1_0.PhysicalDeviceFeatures {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].(*core1_0.PhysicalDeviceFeatures)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).Features))
}

// Features2 mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) Features2(out *core1_1.DeviceFeaturesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features2", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Features2 indicates an expected call of Features2.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) Features2(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features2", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).Features2), out)
}

// FormatProperties mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) FormatProperties(format common.DataFormat) *core1_0.FormatProperties {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatProperties", format)
	ret0, _ := ret[0].(*core1_0.FormatProperties)
	return ret0
}

// FormatProperties indicates an expected call of FormatProperties.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) FormatProperties(format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatProperties", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).FormatProperties), format)
}

// FormatProperties2 mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) FormatProperties2(format common.DataFormat, out *core1_1.FormatPropertiesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatProperties2", format, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// FormatProperties2 indicates an expected call of FormatProperties2.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) FormatProperties2(format, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatProperties2", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).FormatProperties2), format, out)
}

// Handle mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) Handle() driver.VkPhysicalDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkPhysicalDevice)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).Handle))
}

// ImageFormatProperties mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) ImageFormatProperties(format common.DataFormat, imageType common.ImageType, tiling common.ImageTiling, usages common.ImageUsages, flags common.ImageCreateFlags) (*core1_0.ImageFormatProperties, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageFormatProperties", format, imageType, tiling, usages, flags)
	ret0, _ := ret[0].(*core1_0.ImageFormatProperties)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImageFormatProperties indicates an expected call of ImageFormatProperties.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) ImageFormatProperties(format, imageType, tiling, usages, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageFormatProperties", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).ImageFormatProperties), format, imageType, tiling, usages, flags)
}

// ImageFormatProperties2 mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) ImageFormatProperties2(o core1_1.ImageFormatOptions, out *core1_1.ImageFormatPropertiesOutData) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageFormatProperties2", o, out)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageFormatProperties2 indicates an expected call of ImageFormatProperties2.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) ImageFormatProperties2(o, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageFormatProperties2", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).ImageFormatProperties2), o, out)
}

// InstanceAPIVersion mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) InstanceAPIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceAPIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// InstanceAPIVersion indicates an expected call of InstanceAPIVersion.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) InstanceAPIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceAPIVersion", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).InstanceAPIVersion))
}

// MemoryProperties mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) MemoryProperties() *core1_0.PhysicalDeviceMemoryProperties {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryProperties")
	ret0, _ := ret[0].(*core1_0.PhysicalDeviceMemoryProperties)
	return ret0
}

// MemoryProperties indicates an expected call of MemoryProperties.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) MemoryProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryProperties", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).MemoryProperties))
}

// MemoryProperties2 mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) MemoryProperties2(out *core1_1.MemoryPropertiesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryProperties2", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemoryProperties2 indicates an expected call of MemoryProperties2.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) MemoryProperties2(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryProperties2", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).MemoryProperties2), out)
}

// Properties mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) Properties() (*core1_0.PhysicalDeviceProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties")
	ret0, _ := ret[0].(*core1_0.PhysicalDeviceProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Properties indicates an expected call of Properties.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) Properties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).Properties))
}

// Properties2 mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) Properties2(out *core1_1.DevicePropertiesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties2", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Properties2 indicates an expected call of Properties2.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) Properties2(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties2", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).Properties2), out)
}

// QueueFamilyProperties mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) QueueFamilyProperties() []*core1_0.QueueFamily {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueFamilyProperties")
	ret0, _ := ret[0].([]*core1_0.QueueFamily)
	return ret0
}

// QueueFamilyProperties indicates an expected call of QueueFamilyProperties.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) QueueFamilyProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueFamilyProperties", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).QueueFamilyProperties))
}

// QueueFamilyProperties2 mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) QueueFamilyProperties2(outDataFactory func() *core1_1.QueueFamilyOutData) ([]*core1_1.QueueFamilyOutData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueFamilyProperties2", outDataFactory)
	ret0, _ := ret[0].([]*core1_1.QueueFamilyOutData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueFamilyProperties2 indicates an expected call of QueueFamilyProperties2.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) QueueFamilyProperties2(outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueFamilyProperties2", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).QueueFamilyProperties2), outDataFactory)
}

// SparseImageFormatProperties mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) SparseImageFormatProperties(format common.DataFormat, imageType common.ImageType, samples common.SampleCounts, usages common.ImageUsages, tiling common.ImageTiling) []core1_0.SparseImageFormatProperties {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SparseImageFormatProperties", format, imageType, samples, usages, tiling)
	ret0, _ := ret[0].([]core1_0.SparseImageFormatProperties)
	return ret0
}

// SparseImageFormatProperties indicates an expected call of SparseImageFormatProperties.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) SparseImageFormatProperties(format, imageType, samples, usages, tiling interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SparseImageFormatProperties", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).SparseImageFormatProperties), format, imageType, samples, usages, tiling)
}

// SparseImageFormatProperties2 mocks base method.
func (m *InstanceScopedPhysicalDevice1_2) SparseImageFormatProperties2(o core1_1.SparseImageFormatOptions, outDataFactory func() *core1_1.SparseImageFormatPropertiesOutData) ([]*core1_1.SparseImageFormatPropertiesOutData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SparseImageFormatProperties2", o, outDataFactory)
	ret0, _ := ret[0].([]*core1_1.SparseImageFormatPropertiesOutData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SparseImageFormatProperties2 indicates an expected call of SparseImageFormatProperties2.
func (mr *InstanceScopedPhysicalDevice1_2MockRecorder) SparseImageFormatProperties2(o, outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SparseImageFormatProperties2", reflect.TypeOf((*InstanceScopedPhysicalDevice1_2)(nil).SparseImageFormatProperties2), o, outDataFactory)
}

// PhysicalDevice1_2 is a mock of PhysicalDevice interface.
type PhysicalDevice1_2 struct {
	ctrl     *gomock.Controller
	recorder *PhysicalDevice1_2MockRecorder
}

// PhysicalDevice1_2MockRecorder is the mock recorder for PhysicalDevice1_2.
type PhysicalDevice1_2MockRecorder struct {
	mock *PhysicalDevice1_2
}

// NewPhysicalDevice1_2 creates a new mock instance.
func NewPhysicalDevice1_2(ctrl *gomock.Controller) *PhysicalDevice1_2 {
	mock := &PhysicalDevice1_2{ctrl: ctrl}
	mock.recorder = &PhysicalDevice1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PhysicalDevice1_2) EXPECT() *PhysicalDevice1_2MockRecorder {
	return m.recorder
}

// AvailableExtensions mocks base method.
func (m *PhysicalDevice1_2) AvailableExtensions() (map[string]*common.ExtensionProperties, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableExtensions")
	ret0, _ := ret[0].(map[string]*common.ExtensionProperties)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableExtensions indicates an expected call of AvailableExtensions.
func (mr *PhysicalDevice1_2MockRecorder) AvailableExtensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableExtensions", reflect.TypeOf((*PhysicalDevice1_2)(nil).AvailableExtensions))
}

// AvailableExtensionsForLayer mocks base method.
func (m *PhysicalDevice1_2) AvailableExtensionsForLayer(layerName string) (map[string]*common.ExtensionProperties, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableExtensionsForLayer", layerName)
	ret0, _ := ret[0].(map[string]*common.ExtensionProperties)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableExtensionsForLayer indicates an expected call of AvailableExtensionsForLayer.
func (mr *PhysicalDevice1_2MockRecorder) AvailableExtensionsForLayer(layerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableExtensionsForLayer", reflect.TypeOf((*PhysicalDevice1_2)(nil).AvailableExtensionsForLayer), layerName)
}

// AvailableLayers mocks base method.
func (m *PhysicalDevice1_2) AvailableLayers() (map[string]*common.LayerProperties, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableLayers")
	ret0, _ := ret[0].(map[string]*common.LayerProperties)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableLayers indicates an expected call of AvailableLayers.
func (mr *PhysicalDevice1_2MockRecorder) AvailableLayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableLayers", reflect.TypeOf((*PhysicalDevice1_2)(nil).AvailableLayers))
}

// CreateDevice mocks base method.
func (m *PhysicalDevice1_2) CreateDevice(allocationCallbacks *driver.AllocationCallbacks, options core1_0.DeviceCreateOptions) (core1_0.Device, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", allocationCallbacks, options)
	ret0, _ := ret[0].(core1_0.Device)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *PhysicalDevice1_2MockRecorder) CreateDevice(allocationCallbacks, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*PhysicalDevice1_2)(nil).CreateDevice), allocationCallbacks, options)
}

// DeviceAPIVersion mocks base method.
func (m *PhysicalDevice1_2) DeviceAPIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceAPIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// DeviceAPIVersion indicates an expected call of DeviceAPIVersion.
func (mr *PhysicalDevice1_2MockRecorder) DeviceAPIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceAPIVersion", reflect.TypeOf((*PhysicalDevice1_2)(nil).DeviceAPIVersion))
}

// Driver mocks base method.
func (m *PhysicalDevice1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *PhysicalDevice1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*PhysicalDevice1_2)(nil).Driver))
}

// Features mocks base method.
func (m *PhysicalDevice1_2) Features() *core1_0.PhysicalDeviceFeatures {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].(*core1_0.PhysicalDeviceFeatures)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *PhysicalDevice1_2MockRecorder) Features() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*PhysicalDevice1_2)(nil).Features))
}

// FormatProperties mocks base method.
func (m *PhysicalDevice1_2) FormatProperties(format common.DataFormat) *core1_0.FormatProperties {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatProperties", format)
	ret0, _ := ret[0].(*core1_0.FormatProperties)
	return ret0
}

// FormatProperties indicates an expected call of FormatProperties.
func (mr *PhysicalDevice1_2MockRecorder) FormatProperties(format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatProperties", reflect.TypeOf((*PhysicalDevice1_2)(nil).FormatProperties), format)
}

// Handle mocks base method.
func (m *PhysicalDevice1_2) Handle() driver.VkPhysicalDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkPhysicalDevice)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *PhysicalDevice1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*PhysicalDevice1_2)(nil).Handle))
}

// ImageFormatProperties mocks base method.
func (m *PhysicalDevice1_2) ImageFormatProperties(format common.DataFormat, imageType common.ImageType, tiling common.ImageTiling, usages common.ImageUsages, flags common.ImageCreateFlags) (*core1_0.ImageFormatProperties, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageFormatProperties", format, imageType, tiling, usages, flags)
	ret0, _ := ret[0].(*core1_0.ImageFormatProperties)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImageFormatProperties indicates an expected call of ImageFormatProperties.
func (mr *PhysicalDevice1_2MockRecorder) ImageFormatProperties(format, imageType, tiling, usages, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageFormatProperties", reflect.TypeOf((*PhysicalDevice1_2)(nil).ImageFormatProperties), format, imageType, tiling, usages, flags)
}

// InstanceAPIVersion mocks base method.
func (m *PhysicalDevice1_2) InstanceAPIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceAPIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// InstanceAPIVersion indicates an expected call of InstanceAPIVersion.
func (mr *PhysicalDevice1_2MockRecorder) InstanceAPIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceAPIVersion", reflect.TypeOf((*PhysicalDevice1_2)(nil).InstanceAPIVersion))
}

// InstanceScopedPhysicalDevice1_1 mocks base method.
func (m *PhysicalDevice1_2) InstanceScopedPhysicalDevice1_1() core1_1.InstanceScopedPhysicalDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceScopedPhysicalDevice1_1")
	ret0, _ := ret[0].(core1_1.InstanceScopedPhysicalDevice)
	return ret0
}

// InstanceScopedPhysicalDevice1_1 indicates an expected call of InstanceScopedPhysicalDevice1_1.
func (mr *PhysicalDevice1_2MockRecorder) InstanceScopedPhysicalDevice1_1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceScopedPhysicalDevice1_1", reflect.TypeOf((*PhysicalDevice1_2)(nil).InstanceScopedPhysicalDevice1_1))
}

// InstanceScopedPhysicalDevice1_2 mocks base method.
func (m *PhysicalDevice1_2) InstanceScopedPhysicalDevice1_2() core1_2.InstanceScopedPhysicalDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceScopedPhysicalDevice1_2")
	ret0, _ := ret[0].(core1_2.InstanceScopedPhysicalDevice)
	return ret0
}

// InstanceScopedPhysicalDevice1_2 indicates an expected call of InstanceScopedPhysicalDevice1_2.
func (mr *PhysicalDevice1_2MockRecorder) InstanceScopedPhysicalDevice1_2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceScopedPhysicalDevice1_2", reflect.TypeOf((*PhysicalDevice1_2)(nil).InstanceScopedPhysicalDevice1_2))
}

// MemoryProperties mocks base method.
func (m *PhysicalDevice1_2) MemoryProperties() *core1_0.PhysicalDeviceMemoryProperties {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryProperties")
	ret0, _ := ret[0].(*core1_0.PhysicalDeviceMemoryProperties)
	return ret0
}

// MemoryProperties indicates an expected call of MemoryProperties.
func (mr *PhysicalDevice1_2MockRecorder) MemoryProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryProperties", reflect.TypeOf((*PhysicalDevice1_2)(nil).MemoryProperties))
}

// Properties mocks base method.
func (m *PhysicalDevice1_2) Properties() (*core1_0.PhysicalDeviceProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties")
	ret0, _ := ret[0].(*core1_0.PhysicalDeviceProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Properties indicates an expected call of Properties.
func (mr *PhysicalDevice1_2MockRecorder) Properties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties", reflect.TypeOf((*PhysicalDevice1_2)(nil).Properties))
}

// QueueFamilyProperties mocks base method.
func (m *PhysicalDevice1_2) QueueFamilyProperties() []*core1_0.QueueFamily {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueFamilyProperties")
	ret0, _ := ret[0].([]*core1_0.QueueFamily)
	return ret0
}

// QueueFamilyProperties indicates an expected call of QueueFamilyProperties.
func (mr *PhysicalDevice1_2MockRecorder) QueueFamilyProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueFamilyProperties", reflect.TypeOf((*PhysicalDevice1_2)(nil).QueueFamilyProperties))
}

// SparseImageFormatProperties mocks base method.
func (m *PhysicalDevice1_2) SparseImageFormatProperties(format common.DataFormat, imageType common.ImageType, samples common.SampleCounts, usages common.ImageUsages, tiling common.ImageTiling) []core1_0.SparseImageFormatProperties {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SparseImageFormatProperties", format, imageType, samples, usages, tiling)
	ret0, _ := ret[0].([]core1_0.SparseImageFormatProperties)
	return ret0
}

// SparseImageFormatProperties indicates an expected call of SparseImageFormatProperties.
func (mr *PhysicalDevice1_2MockRecorder) SparseImageFormatProperties(format, imageType, samples, usages, tiling interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SparseImageFormatProperties", reflect.TypeOf((*PhysicalDevice1_2)(nil).SparseImageFormatProperties), format, imageType, samples, usages, tiling)
}

// Pipeline1_2 is a mock of Pipeline interface.
type Pipeline1_2 struct {
	ctrl     *gomock.Controller
	recorder *Pipeline1_2MockRecorder
}

// Pipeline1_2MockRecorder is the mock recorder for Pipeline1_2.
type Pipeline1_2MockRecorder struct {
	mock *Pipeline1_2
}

// NewPipeline1_2 creates a new mock instance.
func NewPipeline1_2(ctrl *gomock.Controller) *Pipeline1_2 {
	mock := &Pipeline1_2{ctrl: ctrl}
	mock.recorder = &Pipeline1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Pipeline1_2) EXPECT() *Pipeline1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *Pipeline1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *Pipeline1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*Pipeline1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *Pipeline1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *Pipeline1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Pipeline1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *Pipeline1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *Pipeline1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*Pipeline1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *Pipeline1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *Pipeline1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*Pipeline1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *Pipeline1_2) Handle() driver.VkPipeline {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkPipeline)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *Pipeline1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Pipeline1_2)(nil).Handle))
}

// PipelineCache1_2 is a mock of PipelineCache interface.
type PipelineCache1_2 struct {
	ctrl     *gomock.Controller
	recorder *PipelineCache1_2MockRecorder
}

// PipelineCache1_2MockRecorder is the mock recorder for PipelineCache1_2.
type PipelineCache1_2MockRecorder struct {
	mock *PipelineCache1_2
}

// NewPipelineCache1_2 creates a new mock instance.
func NewPipelineCache1_2(ctrl *gomock.Controller) *PipelineCache1_2 {
	mock := &PipelineCache1_2{ctrl: ctrl}
	mock.recorder = &PipelineCache1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PipelineCache1_2) EXPECT() *PipelineCache1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *PipelineCache1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *PipelineCache1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*PipelineCache1_2)(nil).APIVersion))
}

// CacheData mocks base method.
func (m *PipelineCache1_2) CacheData() ([]byte, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheData")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CacheData indicates an expected call of CacheData.
func (mr *PipelineCache1_2MockRecorder) CacheData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheData", reflect.TypeOf((*PipelineCache1_2)(nil).CacheData))
}

// Destroy mocks base method.
func (m *PipelineCache1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *PipelineCache1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*PipelineCache1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *PipelineCache1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *PipelineCache1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*PipelineCache1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *PipelineCache1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *PipelineCache1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*PipelineCache1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *PipelineCache1_2) Handle() driver.VkPipelineCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkPipelineCache)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *PipelineCache1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*PipelineCache1_2)(nil).Handle))
}

// MergePipelineCaches mocks base method.
func (m *PipelineCache1_2) MergePipelineCaches(srcCaches []core1_0.PipelineCache) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePipelineCaches", srcCaches)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergePipelineCaches indicates an expected call of MergePipelineCaches.
func (mr *PipelineCache1_2MockRecorder) MergePipelineCaches(srcCaches interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePipelineCaches", reflect.TypeOf((*PipelineCache1_2)(nil).MergePipelineCaches), srcCaches)
}

// PipelineLayout1_2 is a mock of PipelineLayout interface.
type PipelineLayout1_2 struct {
	ctrl     *gomock.Controller
	recorder *PipelineLayout1_2MockRecorder
}

// PipelineLayout1_2MockRecorder is the mock recorder for PipelineLayout1_2.
type PipelineLayout1_2MockRecorder struct {
	mock *PipelineLayout1_2
}

// NewPipelineLayout1_2 creates a new mock instance.
func NewPipelineLayout1_2(ctrl *gomock.Controller) *PipelineLayout1_2 {
	mock := &PipelineLayout1_2{ctrl: ctrl}
	mock.recorder = &PipelineLayout1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PipelineLayout1_2) EXPECT() *PipelineLayout1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *PipelineLayout1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *PipelineLayout1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*PipelineLayout1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *PipelineLayout1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *PipelineLayout1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*PipelineLayout1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *PipelineLayout1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *PipelineLayout1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*PipelineLayout1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *PipelineLayout1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *PipelineLayout1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*PipelineLayout1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *PipelineLayout1_2) Handle() driver.VkPipelineLayout {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkPipelineLayout)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *PipelineLayout1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*PipelineLayout1_2)(nil).Handle))
}

// QueryPool1_2 is a mock of QueryPool interface.
type QueryPool1_2 struct {
	ctrl     *gomock.Controller
	recorder *QueryPool1_2MockRecorder
}

// QueryPool1_2MockRecorder is the mock recorder for QueryPool1_2.
type QueryPool1_2MockRecorder struct {
	mock *QueryPool1_2
}

// NewQueryPool1_2 creates a new mock instance.
func NewQueryPool1_2(ctrl *gomock.Controller) *QueryPool1_2 {
	mock := &QueryPool1_2{ctrl: ctrl}
	mock.recorder = &QueryPool1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *QueryPool1_2) EXPECT() *QueryPool1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *QueryPool1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *QueryPool1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*QueryPool1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *QueryPool1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *QueryPool1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*QueryPool1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *QueryPool1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *QueryPool1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*QueryPool1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *QueryPool1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *QueryPool1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*QueryPool1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *QueryPool1_2) Handle() driver.VkQueryPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkQueryPool)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *QueryPool1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*QueryPool1_2)(nil).Handle))
}

// PopulateResults mocks base method.
func (m *QueryPool1_2) PopulateResults(firstQuery, queryCount int, results []byte, resultStride int, flags common.QueryResultFlags) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateResults", firstQuery, queryCount, results, resultStride, flags)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PopulateResults indicates an expected call of PopulateResults.
func (mr *QueryPool1_2MockRecorder) PopulateResults(firstQuery, queryCount, results, resultStride, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateResults", reflect.TypeOf((*QueryPool1_2)(nil).PopulateResults), firstQuery, queryCount, results, resultStride, flags)
}

// Reset mocks base method.
func (m *QueryPool1_2) Reset(firstQuery, queryCount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", firstQuery, queryCount)
}

// Reset indicates an expected call of Reset.
func (mr *QueryPool1_2MockRecorder) Reset(firstQuery, queryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*QueryPool1_2)(nil).Reset), firstQuery, queryCount)
}

// Queue1_2 is a mock of Queue interface.
type Queue1_2 struct {
	ctrl     *gomock.Controller
	recorder *Queue1_2MockRecorder
}

// Queue1_2MockRecorder is the mock recorder for Queue1_2.
type Queue1_2MockRecorder struct {
	mock *Queue1_2
}

// NewQueue1_2 creates a new mock instance.
func NewQueue1_2(ctrl *gomock.Controller) *Queue1_2 {
	mock := &Queue1_2{ctrl: ctrl}
	mock.recorder = &Queue1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Queue1_2) EXPECT() *Queue1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *Queue1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *Queue1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*Queue1_2)(nil).APIVersion))
}

// BindSparse mocks base method.
func (m *Queue1_2) BindSparse(fence core1_0.Fence, bindInfos []core1_0.BindSparseOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindSparse", fence, bindInfos)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindSparse indicates an expected call of BindSparse.
func (mr *Queue1_2MockRecorder) BindSparse(fence, bindInfos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSparse", reflect.TypeOf((*Queue1_2)(nil).BindSparse), fence, bindInfos)
}

// DeviceHandle mocks base method.
func (m *Queue1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *Queue1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*Queue1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *Queue1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *Queue1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*Queue1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *Queue1_2) Handle() driver.VkQueue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkQueue)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *Queue1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Queue1_2)(nil).Handle))
}

// SubmitToQueue mocks base method.
func (m *Queue1_2) SubmitToQueue(fence core1_0.Fence, o []core1_0.SubmitOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitToQueue", fence, o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitToQueue indicates an expected call of SubmitToQueue.
func (mr *Queue1_2MockRecorder) SubmitToQueue(fence, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitToQueue", reflect.TypeOf((*Queue1_2)(nil).SubmitToQueue), fence, o)
}

// WaitForIdle mocks base method.
func (m *Queue1_2) WaitForIdle() (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForIdle")
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForIdle indicates an expected call of WaitForIdle.
func (mr *Queue1_2MockRecorder) WaitForIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForIdle", reflect.TypeOf((*Queue1_2)(nil).WaitForIdle))
}

// RenderPass1_2 is a mock of RenderPass interface.
type RenderPass1_2 struct {
	ctrl     *gomock.Controller
	recorder *RenderPass1_2MockRecorder
}

// RenderPass1_2MockRecorder is the mock recorder for RenderPass1_2.
type RenderPass1_2MockRecorder struct {
	mock *RenderPass1_2
}

// NewRenderPass1_2 creates a new mock instance.
func NewRenderPass1_2(ctrl *gomock.Controller) *RenderPass1_2 {
	mock := &RenderPass1_2{ctrl: ctrl}
	mock.recorder = &RenderPass1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RenderPass1_2) EXPECT() *RenderPass1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *RenderPass1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *RenderPass1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*RenderPass1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *RenderPass1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *RenderPass1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*RenderPass1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *RenderPass1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *RenderPass1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*RenderPass1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *RenderPass1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *RenderPass1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*RenderPass1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *RenderPass1_2) Handle() driver.VkRenderPass {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkRenderPass)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *RenderPass1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*RenderPass1_2)(nil).Handle))
}

// RenderAreaGranularity mocks base method.
func (m *RenderPass1_2) RenderAreaGranularity() common.Extent2D {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderAreaGranularity")
	ret0, _ := ret[0].(common.Extent2D)
	return ret0
}

// RenderAreaGranularity indicates an expected call of RenderAreaGranularity.
func (mr *RenderPass1_2MockRecorder) RenderAreaGranularity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderAreaGranularity", reflect.TypeOf((*RenderPass1_2)(nil).RenderAreaGranularity))
}

// Sampler1_2 is a mock of Sampler interface.
type Sampler1_2 struct {
	ctrl     *gomock.Controller
	recorder *Sampler1_2MockRecorder
}

// Sampler1_2MockRecorder is the mock recorder for Sampler1_2.
type Sampler1_2MockRecorder struct {
	mock *Sampler1_2
}

// NewSampler1_2 creates a new mock instance.
func NewSampler1_2(ctrl *gomock.Controller) *Sampler1_2 {
	mock := &Sampler1_2{ctrl: ctrl}
	mock.recorder = &Sampler1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Sampler1_2) EXPECT() *Sampler1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *Sampler1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *Sampler1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*Sampler1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *Sampler1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *Sampler1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Sampler1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *Sampler1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *Sampler1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*Sampler1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *Sampler1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *Sampler1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*Sampler1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *Sampler1_2) Handle() driver.VkSampler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkSampler)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *Sampler1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Sampler1_2)(nil).Handle))
}

// SamplerYcbcrConversion1_2 is a mock of SamplerYcbcrConversion interface.
type SamplerYcbcrConversion1_2 struct {
	ctrl     *gomock.Controller
	recorder *SamplerYcbcrConversion1_2MockRecorder
}

// SamplerYcbcrConversion1_2MockRecorder is the mock recorder for SamplerYcbcrConversion1_2.
type SamplerYcbcrConversion1_2MockRecorder struct {
	mock *SamplerYcbcrConversion1_2
}

// NewSamplerYcbcrConversion1_2 creates a new mock instance.
func NewSamplerYcbcrConversion1_2(ctrl *gomock.Controller) *SamplerYcbcrConversion1_2 {
	mock := &SamplerYcbcrConversion1_2{ctrl: ctrl}
	mock.recorder = &SamplerYcbcrConversion1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SamplerYcbcrConversion1_2) EXPECT() *SamplerYcbcrConversion1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *SamplerYcbcrConversion1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *SamplerYcbcrConversion1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*SamplerYcbcrConversion1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *SamplerYcbcrConversion1_2) Destroy(allocator *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", allocator)
}

// Destroy indicates an expected call of Destroy.
func (mr *SamplerYcbcrConversion1_2MockRecorder) Destroy(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*SamplerYcbcrConversion1_2)(nil).Destroy), allocator)
}

// DeviceHandle mocks base method.
func (m *SamplerYcbcrConversion1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *SamplerYcbcrConversion1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*SamplerYcbcrConversion1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *SamplerYcbcrConversion1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *SamplerYcbcrConversion1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*SamplerYcbcrConversion1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *SamplerYcbcrConversion1_2) Handle() driver.VkSamplerYcbcrConversion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkSamplerYcbcrConversion)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *SamplerYcbcrConversion1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*SamplerYcbcrConversion1_2)(nil).Handle))
}

// Semaphore1_2 is a mock of Semaphore interface.
type Semaphore1_2 struct {
	ctrl     *gomock.Controller
	recorder *Semaphore1_2MockRecorder
}

// Semaphore1_2MockRecorder is the mock recorder for Semaphore1_2.
type Semaphore1_2MockRecorder struct {
	mock *Semaphore1_2
}

// NewSemaphore1_2 creates a new mock instance.
func NewSemaphore1_2(ctrl *gomock.Controller) *Semaphore1_2 {
	mock := &Semaphore1_2{ctrl: ctrl}
	mock.recorder = &Semaphore1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Semaphore1_2) EXPECT() *Semaphore1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *Semaphore1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *Semaphore1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*Semaphore1_2)(nil).APIVersion))
}

// CounterValue mocks base method.
func (m *Semaphore1_2) CounterValue() (uint64, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CounterValue")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CounterValue indicates an expected call of CounterValue.
func (mr *Semaphore1_2MockRecorder) CounterValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterValue", reflect.TypeOf((*Semaphore1_2)(nil).CounterValue))
}

// Destroy mocks base method.
func (m *Semaphore1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *Semaphore1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Semaphore1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *Semaphore1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *Semaphore1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*Semaphore1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *Semaphore1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *Semaphore1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*Semaphore1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *Semaphore1_2) Handle() driver.VkSemaphore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkSemaphore)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *Semaphore1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Semaphore1_2)(nil).Handle))
}

// ShaderModule1_2 is a mock of ShaderModule interface.
type ShaderModule1_2 struct {
	ctrl     *gomock.Controller
	recorder *ShaderModule1_2MockRecorder
}

// ShaderModule1_2MockRecorder is the mock recorder for ShaderModule1_2.
type ShaderModule1_2MockRecorder struct {
	mock *ShaderModule1_2
}

// NewShaderModule1_2 creates a new mock instance.
func NewShaderModule1_2(ctrl *gomock.Controller) *ShaderModule1_2 {
	mock := &ShaderModule1_2{ctrl: ctrl}
	mock.recorder = &ShaderModule1_2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ShaderModule1_2) EXPECT() *ShaderModule1_2MockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *ShaderModule1_2) APIVersion() common.APIVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion")
	ret0, _ := ret[0].(common.APIVersion)
	return ret0
}

// APIVersion indicates an expected call of APIVersion.
func (mr *ShaderModule1_2MockRecorder) APIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*ShaderModule1_2)(nil).APIVersion))
}

// Destroy mocks base method.
func (m *ShaderModule1_2) Destroy(callbacks *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", callbacks)
}

// Destroy indicates an expected call of Destroy.
func (mr *ShaderModule1_2MockRecorder) Destroy(callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*ShaderModule1_2)(nil).Destroy), callbacks)
}

// DeviceHandle mocks base method.
func (m *ShaderModule1_2) DeviceHandle() driver.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceHandle")
	ret0, _ := ret[0].(driver.VkDevice)
	return ret0
}

// DeviceHandle indicates an expected call of DeviceHandle.
func (mr *ShaderModule1_2MockRecorder) DeviceHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceHandle", reflect.TypeOf((*ShaderModule1_2)(nil).DeviceHandle))
}

// Driver mocks base method.
func (m *ShaderModule1_2) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *ShaderModule1_2MockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*ShaderModule1_2)(nil).Driver))
}

// Handle mocks base method.
func (m *ShaderModule1_2) Handle() driver.VkShaderModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkShaderModule)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *ShaderModule1_2MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*ShaderModule1_2)(nil).Handle))
}
