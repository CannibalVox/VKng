// Code generated by MockGen. DO NOT EDIT.
// Source: ./iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// MockBuffer1_1 is a mock of Buffer interface.
type MockBuffer1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockBuffer1_1MockRecorder
}

// MockBuffer1_1MockRecorder is the mock recorder for MockBuffer1_1.
type MockBuffer1_1MockRecorder struct {
	mock *MockBuffer1_1
}

// NewMockBuffer1_1 creates a new mock instance.
func NewMockBuffer1_1(ctrl *gomock.Controller) *MockBuffer1_1 {
	mock := &MockBuffer1_1{ctrl: ctrl}
	mock.recorder = &MockBuffer1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuffer1_1) EXPECT() *MockBuffer1_1MockRecorder {
	return m.recorder
}

// MockBufferView1_1 is a mock of BufferView interface.
type MockBufferView1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockBufferView1_1MockRecorder
}

// MockBufferView1_1MockRecorder is the mock recorder for MockBufferView1_1.
type MockBufferView1_1MockRecorder struct {
	mock *MockBufferView1_1
}

// NewMockBufferView1_1 creates a new mock instance.
func NewMockBufferView1_1(ctrl *gomock.Controller) *MockBufferView1_1 {
	mock := &MockBufferView1_1{ctrl: ctrl}
	mock.recorder = &MockBufferView1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBufferView1_1) EXPECT() *MockBufferView1_1MockRecorder {
	return m.recorder
}

// MockCommandBuffer1_1 is a mock of CommandBuffer interface.
type MockCommandBuffer1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBuffer1_1MockRecorder
}

// MockCommandBuffer1_1MockRecorder is the mock recorder for MockCommandBuffer1_1.
type MockCommandBuffer1_1MockRecorder struct {
	mock *MockCommandBuffer1_1
}

// NewMockCommandBuffer1_1 creates a new mock instance.
func NewMockCommandBuffer1_1(ctrl *gomock.Controller) *MockCommandBuffer1_1 {
	mock := &MockCommandBuffer1_1{ctrl: ctrl}
	mock.recorder = &MockCommandBuffer1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandBuffer1_1) EXPECT() *MockCommandBuffer1_1MockRecorder {
	return m.recorder
}

// MockCommandPool1_1 is a mock of CommandPool interface.
type MockCommandPool1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockCommandPool1_1MockRecorder
}

// MockCommandPool1_1MockRecorder is the mock recorder for MockCommandPool1_1.
type MockCommandPool1_1MockRecorder struct {
	mock *MockCommandPool1_1
}

// NewMockCommandPool1_1 creates a new mock instance.
func NewMockCommandPool1_1(ctrl *gomock.Controller) *MockCommandPool1_1 {
	mock := &MockCommandPool1_1{ctrl: ctrl}
	mock.recorder = &MockCommandPool1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandPool1_1) EXPECT() *MockCommandPool1_1MockRecorder {
	return m.recorder
}

// MockDescriptorPool1_1 is a mock of DescriptorPool interface.
type MockDescriptorPool1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockDescriptorPool1_1MockRecorder
}

// MockDescriptorPool1_1MockRecorder is the mock recorder for MockDescriptorPool1_1.
type MockDescriptorPool1_1MockRecorder struct {
	mock *MockDescriptorPool1_1
}

// NewMockDescriptorPool1_1 creates a new mock instance.
func NewMockDescriptorPool1_1(ctrl *gomock.Controller) *MockDescriptorPool1_1 {
	mock := &MockDescriptorPool1_1{ctrl: ctrl}
	mock.recorder = &MockDescriptorPool1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriptorPool1_1) EXPECT() *MockDescriptorPool1_1MockRecorder {
	return m.recorder
}

// MockDescriptorSet1_1 is a mock of DescriptorSet interface.
type MockDescriptorSet1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockDescriptorSet1_1MockRecorder
}

// MockDescriptorSet1_1MockRecorder is the mock recorder for MockDescriptorSet1_1.
type MockDescriptorSet1_1MockRecorder struct {
	mock *MockDescriptorSet1_1
}

// NewMockDescriptorSet1_1 creates a new mock instance.
func NewMockDescriptorSet1_1(ctrl *gomock.Controller) *MockDescriptorSet1_1 {
	mock := &MockDescriptorSet1_1{ctrl: ctrl}
	mock.recorder = &MockDescriptorSet1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriptorSet1_1) EXPECT() *MockDescriptorSet1_1MockRecorder {
	return m.recorder
}

// MockDescriptorSetLayout1_1 is a mock of DescriptorSetLayout interface.
type MockDescriptorSetLayout1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockDescriptorSetLayout1_1MockRecorder
}

// MockDescriptorSetLayout1_1MockRecorder is the mock recorder for MockDescriptorSetLayout1_1.
type MockDescriptorSetLayout1_1MockRecorder struct {
	mock *MockDescriptorSetLayout1_1
}

// NewMockDescriptorSetLayout1_1 creates a new mock instance.
func NewMockDescriptorSetLayout1_1(ctrl *gomock.Controller) *MockDescriptorSetLayout1_1 {
	mock := &MockDescriptorSetLayout1_1{ctrl: ctrl}
	mock.recorder = &MockDescriptorSetLayout1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriptorSetLayout1_1) EXPECT() *MockDescriptorSetLayout1_1MockRecorder {
	return m.recorder
}

// MockDeviceMemory1_1 is a mock of DeviceMemory interface.
type MockDeviceMemory1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMemory1_1MockRecorder
}

// MockDeviceMemory1_1MockRecorder is the mock recorder for MockDeviceMemory1_1.
type MockDeviceMemory1_1MockRecorder struct {
	mock *MockDeviceMemory1_1
}

// NewMockDeviceMemory1_1 creates a new mock instance.
func NewMockDeviceMemory1_1(ctrl *gomock.Controller) *MockDeviceMemory1_1 {
	mock := &MockDeviceMemory1_1{ctrl: ctrl}
	mock.recorder = &MockDeviceMemory1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceMemory1_1) EXPECT() *MockDeviceMemory1_1MockRecorder {
	return m.recorder
}

// MockDevice1_1 is a mock of Device interface.
type MockDevice1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockDevice1_1MockRecorder
}

// MockDevice1_1MockRecorder is the mock recorder for MockDevice1_1.
type MockDevice1_1MockRecorder struct {
	mock *MockDevice1_1
}

// NewMockDevice1_1 creates a new mock instance.
func NewMockDevice1_1(ctrl *gomock.Controller) *MockDevice1_1 {
	mock := &MockDevice1_1{ctrl: ctrl}
	mock.recorder = &MockDevice1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice1_1) EXPECT() *MockDevice1_1MockRecorder {
	return m.recorder
}

// MockEvent1_1 is a mock of Event interface.
type MockEvent1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockEvent1_1MockRecorder
}

// MockEvent1_1MockRecorder is the mock recorder for MockEvent1_1.
type MockEvent1_1MockRecorder struct {
	mock *MockEvent1_1
}

// NewMockEvent1_1 creates a new mock instance.
func NewMockEvent1_1(ctrl *gomock.Controller) *MockEvent1_1 {
	mock := &MockEvent1_1{ctrl: ctrl}
	mock.recorder = &MockEvent1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent1_1) EXPECT() *MockEvent1_1MockRecorder {
	return m.recorder
}

// MockFence1_1 is a mock of Fence interface.
type MockFence1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockFence1_1MockRecorder
}

// MockFence1_1MockRecorder is the mock recorder for MockFence1_1.
type MockFence1_1MockRecorder struct {
	mock *MockFence1_1
}

// NewMockFence1_1 creates a new mock instance.
func NewMockFence1_1(ctrl *gomock.Controller) *MockFence1_1 {
	mock := &MockFence1_1{ctrl: ctrl}
	mock.recorder = &MockFence1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFence1_1) EXPECT() *MockFence1_1MockRecorder {
	return m.recorder
}

// MockFramebuffer1_1 is a mock of Framebuffer interface.
type MockFramebuffer1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockFramebuffer1_1MockRecorder
}

// MockFramebuffer1_1MockRecorder is the mock recorder for MockFramebuffer1_1.
type MockFramebuffer1_1MockRecorder struct {
	mock *MockFramebuffer1_1
}

// NewMockFramebuffer1_1 creates a new mock instance.
func NewMockFramebuffer1_1(ctrl *gomock.Controller) *MockFramebuffer1_1 {
	mock := &MockFramebuffer1_1{ctrl: ctrl}
	mock.recorder = &MockFramebuffer1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFramebuffer1_1) EXPECT() *MockFramebuffer1_1MockRecorder {
	return m.recorder
}

// MockImage1_1 is a mock of Image interface.
type MockImage1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockImage1_1MockRecorder
}

// MockImage1_1MockRecorder is the mock recorder for MockImage1_1.
type MockImage1_1MockRecorder struct {
	mock *MockImage1_1
}

// NewMockImage1_1 creates a new mock instance.
func NewMockImage1_1(ctrl *gomock.Controller) *MockImage1_1 {
	mock := &MockImage1_1{ctrl: ctrl}
	mock.recorder = &MockImage1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImage1_1) EXPECT() *MockImage1_1MockRecorder {
	return m.recorder
}

// MockImageView1_1 is a mock of ImageView interface.
type MockImageView1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockImageView1_1MockRecorder
}

// MockImageView1_1MockRecorder is the mock recorder for MockImageView1_1.
type MockImageView1_1MockRecorder struct {
	mock *MockImageView1_1
}

// NewMockImageView1_1 creates a new mock instance.
func NewMockImageView1_1(ctrl *gomock.Controller) *MockImageView1_1 {
	mock := &MockImageView1_1{ctrl: ctrl}
	mock.recorder = &MockImageView1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageView1_1) EXPECT() *MockImageView1_1MockRecorder {
	return m.recorder
}

// MockInstance1_1 is a mock of Instance interface.
type MockInstance1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockInstance1_1MockRecorder
}

// MockInstance1_1MockRecorder is the mock recorder for MockInstance1_1.
type MockInstance1_1MockRecorder struct {
	mock *MockInstance1_1
}

// NewMockInstance1_1 creates a new mock instance.
func NewMockInstance1_1(ctrl *gomock.Controller) *MockInstance1_1 {
	mock := &MockInstance1_1{ctrl: ctrl}
	mock.recorder = &MockInstance1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance1_1) EXPECT() *MockInstance1_1MockRecorder {
	return m.recorder
}

// MockPhysicalDevice1_1 is a mock of PhysicalDevice interface.
type MockPhysicalDevice1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockPhysicalDevice1_1MockRecorder
}

// MockPhysicalDevice1_1MockRecorder is the mock recorder for MockPhysicalDevice1_1.
type MockPhysicalDevice1_1MockRecorder struct {
	mock *MockPhysicalDevice1_1
}

// NewMockPhysicalDevice1_1 creates a new mock instance.
func NewMockPhysicalDevice1_1(ctrl *gomock.Controller) *MockPhysicalDevice1_1 {
	mock := &MockPhysicalDevice1_1{ctrl: ctrl}
	mock.recorder = &MockPhysicalDevice1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhysicalDevice1_1) EXPECT() *MockPhysicalDevice1_1MockRecorder {
	return m.recorder
}

// MockPipeline1_1 is a mock of Pipeline interface.
type MockPipeline1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockPipeline1_1MockRecorder
}

// MockPipeline1_1MockRecorder is the mock recorder for MockPipeline1_1.
type MockPipeline1_1MockRecorder struct {
	mock *MockPipeline1_1
}

// NewMockPipeline1_1 creates a new mock instance.
func NewMockPipeline1_1(ctrl *gomock.Controller) *MockPipeline1_1 {
	mock := &MockPipeline1_1{ctrl: ctrl}
	mock.recorder = &MockPipeline1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeline1_1) EXPECT() *MockPipeline1_1MockRecorder {
	return m.recorder
}

// MockPipelineCache1_1 is a mock of PipelineCache interface.
type MockPipelineCache1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineCache1_1MockRecorder
}

// MockPipelineCache1_1MockRecorder is the mock recorder for MockPipelineCache1_1.
type MockPipelineCache1_1MockRecorder struct {
	mock *MockPipelineCache1_1
}

// NewMockPipelineCache1_1 creates a new mock instance.
func NewMockPipelineCache1_1(ctrl *gomock.Controller) *MockPipelineCache1_1 {
	mock := &MockPipelineCache1_1{ctrl: ctrl}
	mock.recorder = &MockPipelineCache1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineCache1_1) EXPECT() *MockPipelineCache1_1MockRecorder {
	return m.recorder
}

// MockPipelineLayout1_1 is a mock of PipelineLayout interface.
type MockPipelineLayout1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineLayout1_1MockRecorder
}

// MockPipelineLayout1_1MockRecorder is the mock recorder for MockPipelineLayout1_1.
type MockPipelineLayout1_1MockRecorder struct {
	mock *MockPipelineLayout1_1
}

// NewMockPipelineLayout1_1 creates a new mock instance.
func NewMockPipelineLayout1_1(ctrl *gomock.Controller) *MockPipelineLayout1_1 {
	mock := &MockPipelineLayout1_1{ctrl: ctrl}
	mock.recorder = &MockPipelineLayout1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineLayout1_1) EXPECT() *MockPipelineLayout1_1MockRecorder {
	return m.recorder
}

// MockQueryPool1_1 is a mock of QueryPool interface.
type MockQueryPool1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockQueryPool1_1MockRecorder
}

// MockQueryPool1_1MockRecorder is the mock recorder for MockQueryPool1_1.
type MockQueryPool1_1MockRecorder struct {
	mock *MockQueryPool1_1
}

// NewMockQueryPool1_1 creates a new mock instance.
func NewMockQueryPool1_1(ctrl *gomock.Controller) *MockQueryPool1_1 {
	mock := &MockQueryPool1_1{ctrl: ctrl}
	mock.recorder = &MockQueryPool1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryPool1_1) EXPECT() *MockQueryPool1_1MockRecorder {
	return m.recorder
}

// MockQueue1_1 is a mock of Queue interface.
type MockQueue1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockQueue1_1MockRecorder
}

// MockQueue1_1MockRecorder is the mock recorder for MockQueue1_1.
type MockQueue1_1MockRecorder struct {
	mock *MockQueue1_1
}

// NewMockQueue1_1 creates a new mock instance.
func NewMockQueue1_1(ctrl *gomock.Controller) *MockQueue1_1 {
	mock := &MockQueue1_1{ctrl: ctrl}
	mock.recorder = &MockQueue1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue1_1) EXPECT() *MockQueue1_1MockRecorder {
	return m.recorder
}

// MockRenderPass1_1 is a mock of RenderPass interface.
type MockRenderPass1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockRenderPass1_1MockRecorder
}

// MockRenderPass1_1MockRecorder is the mock recorder for MockRenderPass1_1.
type MockRenderPass1_1MockRecorder struct {
	mock *MockRenderPass1_1
}

// NewMockRenderPass1_1 creates a new mock instance.
func NewMockRenderPass1_1(ctrl *gomock.Controller) *MockRenderPass1_1 {
	mock := &MockRenderPass1_1{ctrl: ctrl}
	mock.recorder = &MockRenderPass1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderPass1_1) EXPECT() *MockRenderPass1_1MockRecorder {
	return m.recorder
}

// MockSemaphore1_1 is a mock of Semaphore interface.
type MockSemaphore1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockSemaphore1_1MockRecorder
}

// MockSemaphore1_1MockRecorder is the mock recorder for MockSemaphore1_1.
type MockSemaphore1_1MockRecorder struct {
	mock *MockSemaphore1_1
}

// NewMockSemaphore1_1 creates a new mock instance.
func NewMockSemaphore1_1(ctrl *gomock.Controller) *MockSemaphore1_1 {
	mock := &MockSemaphore1_1{ctrl: ctrl}
	mock.recorder = &MockSemaphore1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSemaphore1_1) EXPECT() *MockSemaphore1_1MockRecorder {
	return m.recorder
}

// MockShaderModule1_1 is a mock of ShaderModule interface.
type MockShaderModule1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockShaderModule1_1MockRecorder
}

// MockShaderModule1_1MockRecorder is the mock recorder for MockShaderModule1_1.
type MockShaderModule1_1MockRecorder struct {
	mock *MockShaderModule1_1
}

// NewMockShaderModule1_1 creates a new mock instance.
func NewMockShaderModule1_1(ctrl *gomock.Controller) *MockShaderModule1_1 {
	mock := &MockShaderModule1_1{ctrl: ctrl}
	mock.recorder = &MockShaderModule1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShaderModule1_1) EXPECT() *MockShaderModule1_1MockRecorder {
	return m.recorder
}

// MockSampler1_1 is a mock of Sampler interface.
type MockSampler1_1 struct {
	ctrl     *gomock.Controller
	recorder *MockSampler1_1MockRecorder
}

// MockSampler1_1MockRecorder is the mock recorder for MockSampler1_1.
type MockSampler1_1MockRecorder struct {
	mock *MockSampler1_1
}

// NewMockSampler1_1 creates a new mock instance.
func NewMockSampler1_1(ctrl *gomock.Controller) *MockSampler1_1 {
	mock := &MockSampler1_1{ctrl: ctrl}
	mock.recorder = &MockSampler1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSampler1_1) EXPECT() *MockSampler1_1MockRecorder {
	return m.recorder
}
