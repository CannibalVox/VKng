// Code generated by MockGen. DO NOT EDIT.
// Source: ./iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	common "github.com/CannibalVox/VKng/core/common"
	core1_0 "github.com/CannibalVox/VKng/core/core1_0"
	core1_1 "github.com/CannibalVox/VKng/core/core1_1"
	driver "github.com/CannibalVox/VKng/core/driver"
	gomock "github.com/golang/mock/gomock"
)

// CommandBuffer1_1 is a mock of CommandBuffer interface.
type CommandBuffer1_1 struct {
	ctrl     *gomock.Controller
	recorder *CommandBuffer1_1MockRecorder
}

// CommandBuffer1_1MockRecorder is the mock recorder for CommandBuffer1_1.
type CommandBuffer1_1MockRecorder struct {
	mock *CommandBuffer1_1
}

// NewCommandBuffer1_1 creates a new mock instance.
func NewCommandBuffer1_1(ctrl *gomock.Controller) *CommandBuffer1_1 {
	mock := &CommandBuffer1_1{ctrl: ctrl}
	mock.recorder = &CommandBuffer1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CommandBuffer1_1) EXPECT() *CommandBuffer1_1MockRecorder {
	return m.recorder
}

// CmdDispatchBase mocks base method.
func (m *CommandBuffer1_1) CmdDispatchBase(baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdDispatchBase", baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
}

// CmdDispatchBase indicates an expected call of CmdDispatchBase.
func (mr *CommandBuffer1_1MockRecorder) CmdDispatchBase(baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdDispatchBase", reflect.TypeOf((*CommandBuffer1_1)(nil).CmdDispatchBase), baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
}

// CmdSetDeviceMask mocks base method.
func (m *CommandBuffer1_1) CmdSetDeviceMask(deviceMask uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmdSetDeviceMask", deviceMask)
}

// CmdSetDeviceMask indicates an expected call of CmdSetDeviceMask.
func (mr *CommandBuffer1_1MockRecorder) CmdSetDeviceMask(deviceMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmdSetDeviceMask", reflect.TypeOf((*CommandBuffer1_1)(nil).CmdSetDeviceMask), deviceMask)
}

// CommandPool1_1 is a mock of CommandPool interface.
type CommandPool1_1 struct {
	ctrl     *gomock.Controller
	recorder *CommandPool1_1MockRecorder
}

// CommandPool1_1MockRecorder is the mock recorder for CommandPool1_1.
type CommandPool1_1MockRecorder struct {
	mock *CommandPool1_1
}

// NewCommandPool1_1 creates a new mock instance.
func NewCommandPool1_1(ctrl *gomock.Controller) *CommandPool1_1 {
	mock := &CommandPool1_1{ctrl: ctrl}
	mock.recorder = &CommandPool1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CommandPool1_1) EXPECT() *CommandPool1_1MockRecorder {
	return m.recorder
}

// TrimCommandPool mocks base method.
func (m *CommandPool1_1) TrimCommandPool(flags core1_1.CommandPoolTrimFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrimCommandPool", flags)
}

// TrimCommandPool indicates an expected call of TrimCommandPool.
func (mr *CommandPool1_1MockRecorder) TrimCommandPool(flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrimCommandPool", reflect.TypeOf((*CommandPool1_1)(nil).TrimCommandPool), flags)
}

// Device1_1 is a mock of Device interface.
type Device1_1 struct {
	ctrl     *gomock.Controller
	recorder *Device1_1MockRecorder
}

// Device1_1MockRecorder is the mock recorder for Device1_1.
type Device1_1MockRecorder struct {
	mock *Device1_1
}

// NewDevice1_1 creates a new mock instance.
func NewDevice1_1(ctrl *gomock.Controller) *Device1_1 {
	mock := &Device1_1{ctrl: ctrl}
	mock.recorder = &Device1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Device1_1) EXPECT() *Device1_1MockRecorder {
	return m.recorder
}

// BindBufferMemory mocks base method.
func (m *Device1_1) BindBufferMemory(o []core1_1.BindBufferMemoryOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindBufferMemory", o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindBufferMemory indicates an expected call of BindBufferMemory.
func (mr *Device1_1MockRecorder) BindBufferMemory(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindBufferMemory", reflect.TypeOf((*Device1_1)(nil).BindBufferMemory), o)
}

// BindImageMemory mocks base method.
func (m *Device1_1) BindImageMemory(o []core1_1.BindImageMemoryOptions) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindImageMemory", o)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindImageMemory indicates an expected call of BindImageMemory.
func (mr *Device1_1MockRecorder) BindImageMemory(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindImageMemory", reflect.TypeOf((*Device1_1)(nil).BindImageMemory), o)
}

// BufferMemoryRequirements mocks base method.
func (m *Device1_1) BufferMemoryRequirements(o core1_1.BufferMemoryRequirementsOptions, out *core1_1.MemoryRequirementsOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BufferMemoryRequirements", o, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// BufferMemoryRequirements indicates an expected call of BufferMemoryRequirements.
func (mr *Device1_1MockRecorder) BufferMemoryRequirements(o, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferMemoryRequirements", reflect.TypeOf((*Device1_1)(nil).BufferMemoryRequirements), o, out)
}

// DescriptorSetLayoutSupport mocks base method.
func (m *Device1_1) DescriptorSetLayoutSupport(o core1_0.DescriptorSetLayoutCreateOptions, outData *core1_1.DescriptorSetLayoutSupportOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescriptorSetLayoutSupport", o, outData)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescriptorSetLayoutSupport indicates an expected call of DescriptorSetLayoutSupport.
func (mr *Device1_1MockRecorder) DescriptorSetLayoutSupport(o, outData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescriptorSetLayoutSupport", reflect.TypeOf((*Device1_1)(nil).DescriptorSetLayoutSupport), o, outData)
}

// ImageMemoryRequirements mocks base method.
func (m *Device1_1) ImageMemoryRequirements(o core1_1.ImageMemoryRequirementsOptions, out *core1_1.MemoryRequirementsOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageMemoryRequirements", o, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImageMemoryRequirements indicates an expected call of ImageMemoryRequirements.
func (mr *Device1_1MockRecorder) ImageMemoryRequirements(o, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageMemoryRequirements", reflect.TypeOf((*Device1_1)(nil).ImageMemoryRequirements), o, out)
}

// SparseImageMemoryRequirements mocks base method.
func (m *Device1_1) SparseImageMemoryRequirements(o core1_1.ImageSparseMemoryRequirementsOptions, outDataFactory func() *core1_1.SparseImageMemoryRequirementsOutData) ([]*core1_1.SparseImageMemoryRequirementsOutData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SparseImageMemoryRequirements", o, outDataFactory)
	ret0, _ := ret[0].([]*core1_1.SparseImageMemoryRequirementsOutData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SparseImageMemoryRequirements indicates an expected call of SparseImageMemoryRequirements.
func (mr *Device1_1MockRecorder) SparseImageMemoryRequirements(o, outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SparseImageMemoryRequirements", reflect.TypeOf((*Device1_1)(nil).SparseImageMemoryRequirements), o, outDataFactory)
}

// DescriptorUpdateTemplate1_1 is a mock of DescriptorUpdateTemplate interface.
type DescriptorUpdateTemplate1_1 struct {
	ctrl     *gomock.Controller
	recorder *DescriptorUpdateTemplate1_1MockRecorder
}

// DescriptorUpdateTemplate1_1MockRecorder is the mock recorder for DescriptorUpdateTemplate1_1.
type DescriptorUpdateTemplate1_1MockRecorder struct {
	mock *DescriptorUpdateTemplate1_1
}

// NewDescriptorUpdateTemplate1_1 creates a new mock instance.
func NewDescriptorUpdateTemplate1_1(ctrl *gomock.Controller) *DescriptorUpdateTemplate1_1 {
	mock := &DescriptorUpdateTemplate1_1{ctrl: ctrl}
	mock.recorder = &DescriptorUpdateTemplate1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DescriptorUpdateTemplate1_1) EXPECT() *DescriptorUpdateTemplate1_1MockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *DescriptorUpdateTemplate1_1) Destroy(allocator *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", allocator)
}

// Destroy indicates an expected call of Destroy.
func (mr *DescriptorUpdateTemplate1_1MockRecorder) Destroy(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*DescriptorUpdateTemplate1_1)(nil).Destroy), allocator)
}

// Handle mocks base method.
func (m *DescriptorUpdateTemplate1_1) Handle() driver.VkDescriptorUpdateTemplate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkDescriptorUpdateTemplate)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *DescriptorUpdateTemplate1_1MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*DescriptorUpdateTemplate1_1)(nil).Handle))
}

// UpdateDescriptorSetFromBuffer mocks base method.
func (m *DescriptorUpdateTemplate1_1) UpdateDescriptorSetFromBuffer(descriptorSet core1_0.DescriptorSet, data core1_0.DescriptorBufferInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateDescriptorSetFromBuffer", descriptorSet, data)
}

// UpdateDescriptorSetFromBuffer indicates an expected call of UpdateDescriptorSetFromBuffer.
func (mr *DescriptorUpdateTemplate1_1MockRecorder) UpdateDescriptorSetFromBuffer(descriptorSet, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescriptorSetFromBuffer", reflect.TypeOf((*DescriptorUpdateTemplate1_1)(nil).UpdateDescriptorSetFromBuffer), descriptorSet, data)
}

// UpdateDescriptorSetFromImage mocks base method.
func (m *DescriptorUpdateTemplate1_1) UpdateDescriptorSetFromImage(descriptorSet core1_0.DescriptorSet, data core1_0.DescriptorImageInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateDescriptorSetFromImage", descriptorSet, data)
}

// UpdateDescriptorSetFromImage indicates an expected call of UpdateDescriptorSetFromImage.
func (mr *DescriptorUpdateTemplate1_1MockRecorder) UpdateDescriptorSetFromImage(descriptorSet, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescriptorSetFromImage", reflect.TypeOf((*DescriptorUpdateTemplate1_1)(nil).UpdateDescriptorSetFromImage), descriptorSet, data)
}

// UpdateDescriptorSetFromObjectHandle mocks base method.
func (m *DescriptorUpdateTemplate1_1) UpdateDescriptorSetFromObjectHandle(descriptorSet core1_0.DescriptorSet, data driver.VulkanHandle) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateDescriptorSetFromObjectHandle", descriptorSet, data)
}

// UpdateDescriptorSetFromObjectHandle indicates an expected call of UpdateDescriptorSetFromObjectHandle.
func (mr *DescriptorUpdateTemplate1_1MockRecorder) UpdateDescriptorSetFromObjectHandle(descriptorSet, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDescriptorSetFromObjectHandle", reflect.TypeOf((*DescriptorUpdateTemplate1_1)(nil).UpdateDescriptorSetFromObjectHandle), descriptorSet, data)
}

// Instance1_1 is a mock of Instance interface.
type Instance1_1 struct {
	ctrl     *gomock.Controller
	recorder *Instance1_1MockRecorder
}

// Instance1_1MockRecorder is the mock recorder for Instance1_1.
type Instance1_1MockRecorder struct {
	mock *Instance1_1
}

// NewInstance1_1 creates a new mock instance.
func NewInstance1_1(ctrl *gomock.Controller) *Instance1_1 {
	mock := &Instance1_1{ctrl: ctrl}
	mock.recorder = &Instance1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Instance1_1) EXPECT() *Instance1_1MockRecorder {
	return m.recorder
}

// PhysicalDeviceGroups mocks base method.
func (m *Instance1_1) PhysicalDeviceGroups(outDataFactory func() *core1_1.DeviceGroupOutData) ([]*core1_1.DeviceGroupOutData, common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDeviceGroups", outDataFactory)
	ret0, _ := ret[0].([]*core1_1.DeviceGroupOutData)
	ret1, _ := ret[1].(common.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnumeratePhysicalDeviceGroups indicates an expected call of EnumeratePhysicalDeviceGroups.
func (mr *Instance1_1MockRecorder) EnumeratePhysicalDeviceGroups(outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDeviceGroups", reflect.TypeOf((*Instance1_1)(nil).PhysicalDeviceGroups), outDataFactory)
}

// MockInstancePhysicalDevice is a mock of InstancePhysicalDevice interface.
type MockInstancePhysicalDevice struct {
	ctrl     *gomock.Controller
	recorder *MockInstancePhysicalDeviceMockRecorder
}

// MockInstancePhysicalDeviceMockRecorder is the mock recorder for MockInstancePhysicalDevice.
type MockInstancePhysicalDeviceMockRecorder struct {
	mock *MockInstancePhysicalDevice
}

// NewMockInstancePhysicalDevice creates a new mock instance.
func NewMockInstancePhysicalDevice(ctrl *gomock.Controller) *MockInstancePhysicalDevice {
	mock := &MockInstancePhysicalDevice{ctrl: ctrl}
	mock.recorder = &MockInstancePhysicalDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancePhysicalDevice) EXPECT() *MockInstancePhysicalDeviceMockRecorder {
	return m.recorder
}

// ExternalBufferProperties mocks base method.
func (m *MockInstancePhysicalDevice) ExternalBufferProperties(o core1_1.ExternalBufferOptions, outData *core1_1.ExternalBufferOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalBufferProperties", o, outData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalBufferProperties indicates an expected call of ExternalBufferProperties.
func (mr *MockInstancePhysicalDeviceMockRecorder) ExternalBufferProperties(o, outData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalBufferProperties", reflect.TypeOf((*MockInstancePhysicalDevice)(nil).ExternalBufferProperties), o, outData)
}

// ExternalFenceProperties mocks base method.
func (m *MockInstancePhysicalDevice) ExternalFenceProperties(o core1_1.ExternalFenceOptions, outData *core1_1.ExternalFenceOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalFenceProperties", o, outData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalFenceProperties indicates an expected call of ExternalFenceProperties.
func (mr *MockInstancePhysicalDeviceMockRecorder) ExternalFenceProperties(o, outData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalFenceProperties", reflect.TypeOf((*MockInstancePhysicalDevice)(nil).ExternalFenceProperties), o, outData)
}

// ExternalSemaphoreProperties mocks base method.
func (m *MockInstancePhysicalDevice) ExternalSemaphoreProperties(o core1_1.ExternalSemaphoreOptions, outData *core1_1.ExternalSemaphoreOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalSemaphoreProperties", o, outData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExternalSemaphoreProperties indicates an expected call of ExternalSemaphoreProperties.
func (mr *MockInstancePhysicalDeviceMockRecorder) ExternalSemaphoreProperties(o, outData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalSemaphoreProperties", reflect.TypeOf((*MockInstancePhysicalDevice)(nil).ExternalSemaphoreProperties), o, outData)
}

// Features mocks base method.
func (m *MockInstancePhysicalDevice) Features(out *core1_1.DeviceFeaturesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Features indicates an expected call of Features.
func (mr *MockInstancePhysicalDeviceMockRecorder) Features(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockInstancePhysicalDevice)(nil).Features), out)
}

// FormatProperties mocks base method.
func (m *MockInstancePhysicalDevice) FormatProperties(format common.DataFormat, out *core1_1.FormatPropertiesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatProperties", format, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// FormatProperties indicates an expected call of FormatProperties.
func (mr *MockInstancePhysicalDeviceMockRecorder) FormatProperties(format, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatProperties", reflect.TypeOf((*MockInstancePhysicalDevice)(nil).FormatProperties), format, out)
}

// ImageFormatProperties mocks base method.
func (m *MockInstancePhysicalDevice) ImageFormatProperties(o core1_1.ImageFormatOptions, out *core1_1.ImageFormatPropertiesOutData) (common.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageFormatProperties", o, out)
	ret0, _ := ret[0].(common.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageFormatProperties indicates an expected call of ImageFormatProperties.
func (mr *MockInstancePhysicalDeviceMockRecorder) ImageFormatProperties(o, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageFormatProperties", reflect.TypeOf((*MockInstancePhysicalDevice)(nil).ImageFormatProperties), o, out)
}

// MemoryProperties mocks base method.
func (m *MockInstancePhysicalDevice) MemoryProperties(out *core1_1.MemoryPropertiesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryProperties", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemoryProperties indicates an expected call of MemoryProperties.
func (mr *MockInstancePhysicalDeviceMockRecorder) MemoryProperties(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryProperties", reflect.TypeOf((*MockInstancePhysicalDevice)(nil).MemoryProperties), out)
}

// Properties mocks base method.
func (m *MockInstancePhysicalDevice) Properties(out *core1_1.DevicePropertiesOutData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Properties indicates an expected call of Properties.
func (mr *MockInstancePhysicalDeviceMockRecorder) Properties(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties", reflect.TypeOf((*MockInstancePhysicalDevice)(nil).Properties), out)
}

// QueueFamilyProperties mocks base method.
func (m *MockInstancePhysicalDevice) QueueFamilyProperties(outDataFactory func() *core1_1.QueueFamilyOutData) ([]*core1_1.QueueFamilyOutData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueFamilyProperties", outDataFactory)
	ret0, _ := ret[0].([]*core1_1.QueueFamilyOutData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueFamilyProperties indicates an expected call of QueueFamilyProperties.
func (mr *MockInstancePhysicalDeviceMockRecorder) QueueFamilyProperties(outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueFamilyProperties", reflect.TypeOf((*MockInstancePhysicalDevice)(nil).QueueFamilyProperties), outDataFactory)
}

// SparseImageFormatProperties mocks base method.
func (m *MockInstancePhysicalDevice) SparseImageFormatProperties(o core1_1.SparseImageFormatOptions, outDataFactory func() *core1_1.SparseImageFormatPropertiesOutData) ([]*core1_1.SparseImageFormatPropertiesOutData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SparseImageFormatProperties", o, outDataFactory)
	ret0, _ := ret[0].([]*core1_1.SparseImageFormatPropertiesOutData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SparseImageFormatProperties indicates an expected call of SparseImageFormatProperties.
func (mr *MockInstancePhysicalDeviceMockRecorder) SparseImageFormatProperties(o, outDataFactory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SparseImageFormatProperties", reflect.TypeOf((*MockInstancePhysicalDevice)(nil).SparseImageFormatProperties), o, outDataFactory)
}

// SamplerYcbcrConversion1_1 is a mock of SamplerYcbcrConversion interface.
type SamplerYcbcrConversion1_1 struct {
	ctrl     *gomock.Controller
	recorder *SamplerYcbcrConversion1_1MockRecorder
}

// SamplerYcbcrConversion1_1MockRecorder is the mock recorder for SamplerYcbcrConversion1_1.
type SamplerYcbcrConversion1_1MockRecorder struct {
	mock *SamplerYcbcrConversion1_1
}

// NewSamplerYcbcrConversion1_1 creates a new mock instance.
func NewSamplerYcbcrConversion1_1(ctrl *gomock.Controller) *SamplerYcbcrConversion1_1 {
	mock := &SamplerYcbcrConversion1_1{ctrl: ctrl}
	mock.recorder = &SamplerYcbcrConversion1_1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SamplerYcbcrConversion1_1) EXPECT() *SamplerYcbcrConversion1_1MockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *SamplerYcbcrConversion1_1) Destroy(allocator *driver.AllocationCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", allocator)
}

// Destroy indicates an expected call of Destroy.
func (mr *SamplerYcbcrConversion1_1MockRecorder) Destroy(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*SamplerYcbcrConversion1_1)(nil).Destroy), allocator)
}

// Handle mocks base method.
func (m *SamplerYcbcrConversion1_1) Handle() driver.VkSamplerYcbcrConversion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(driver.VkSamplerYcbcrConversion)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *SamplerYcbcrConversion1_1MockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*SamplerYcbcrConversion1_1)(nil).Handle))
}
