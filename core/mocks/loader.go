// Code generated by MockGen. DO NOT EDIT.
// Source: loader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	unsafe "unsafe"

	loader "github.com/CannibalVox/VKng/core/loader"
	gomock "github.com/golang/mock/gomock"
)

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// CreateDeviceLoader mocks base method.
func (m *MockLoader) CreateDeviceLoader(device loader.VkDevice) (loader.Loader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceLoader", device)
	ret0, _ := ret[0].(loader.Loader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeviceLoader indicates an expected call of CreateDeviceLoader.
func (mr *MockLoaderMockRecorder) CreateDeviceLoader(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceLoader", reflect.TypeOf((*MockLoader)(nil).CreateDeviceLoader), device)
}

// CreateInstanceLoader mocks base method.
func (m *MockLoader) CreateInstanceLoader(instance loader.VkInstance) (loader.Loader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceLoader", instance)
	ret0, _ := ret[0].(loader.Loader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceLoader indicates an expected call of CreateInstanceLoader.
func (mr *MockLoaderMockRecorder) CreateInstanceLoader(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceLoader", reflect.TypeOf((*MockLoader)(nil).CreateInstanceLoader), instance)
}

// Destroy mocks base method.
func (m *MockLoader) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockLoaderMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockLoader)(nil).Destroy))
}

// LoadProcAddr mocks base method.
func (m *MockLoader) LoadProcAddr(name *loader.Char) unsafe.Pointer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProcAddr", name)
	ret0, _ := ret[0].(unsafe.Pointer)
	return ret0
}

// LoadProcAddr indicates an expected call of LoadProcAddr.
func (mr *MockLoaderMockRecorder) LoadProcAddr(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProcAddr", reflect.TypeOf((*MockLoader)(nil).LoadProcAddr), name)
}

// VkAllocateCommandBuffers mocks base method.
func (m *MockLoader) VkAllocateCommandBuffers(device loader.VkDevice, pAllocateInfo *loader.VkCommandBufferAllocateInfo, pCommandBuffers *loader.VkCommandBuffer) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkAllocateCommandBuffers", device, pAllocateInfo, pCommandBuffers)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkAllocateCommandBuffers indicates an expected call of VkAllocateCommandBuffers.
func (mr *MockLoaderMockRecorder) VkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkAllocateCommandBuffers", reflect.TypeOf((*MockLoader)(nil).VkAllocateCommandBuffers), device, pAllocateInfo, pCommandBuffers)
}

// VkAllocateDescriptorSets mocks base method.
func (m *MockLoader) VkAllocateDescriptorSets(device loader.VkDevice, pAllocateInfo *loader.VkDescriptorSetAllocateInfo, pDescriptorSets *loader.VkDescriptorSet) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkAllocateDescriptorSets", device, pAllocateInfo, pDescriptorSets)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkAllocateDescriptorSets indicates an expected call of VkAllocateDescriptorSets.
func (mr *MockLoaderMockRecorder) VkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkAllocateDescriptorSets", reflect.TypeOf((*MockLoader)(nil).VkAllocateDescriptorSets), device, pAllocateInfo, pDescriptorSets)
}

// VkAllocateMemory mocks base method.
func (m *MockLoader) VkAllocateMemory(device loader.VkDevice, pAllocateInfo *loader.VkMemoryAllocateInfo, pAllocator *loader.VkAllocationCallbacks, pMemory *loader.VkDeviceMemory) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkAllocateMemory", device, pAllocateInfo, pAllocator, pMemory)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkAllocateMemory indicates an expected call of VkAllocateMemory.
func (mr *MockLoaderMockRecorder) VkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkAllocateMemory", reflect.TypeOf((*MockLoader)(nil).VkAllocateMemory), device, pAllocateInfo, pAllocator, pMemory)
}

// VkBeginCommandBuffer mocks base method.
func (m *MockLoader) VkBeginCommandBuffer(commandBuffer loader.VkCommandBuffer, pBeginInfo *loader.VkCommandBufferBeginInfo) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkBeginCommandBuffer", commandBuffer, pBeginInfo)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkBeginCommandBuffer indicates an expected call of VkBeginCommandBuffer.
func (mr *MockLoaderMockRecorder) VkBeginCommandBuffer(commandBuffer, pBeginInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkBeginCommandBuffer", reflect.TypeOf((*MockLoader)(nil).VkBeginCommandBuffer), commandBuffer, pBeginInfo)
}

// VkBindBufferMemory mocks base method.
func (m *MockLoader) VkBindBufferMemory(device loader.VkDevice, buffer loader.VkBuffer, memory loader.VkDeviceMemory, memoryOffset loader.VkDeviceSize) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkBindBufferMemory", device, buffer, memory, memoryOffset)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkBindBufferMemory indicates an expected call of VkBindBufferMemory.
func (mr *MockLoaderMockRecorder) VkBindBufferMemory(device, buffer, memory, memoryOffset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkBindBufferMemory", reflect.TypeOf((*MockLoader)(nil).VkBindBufferMemory), device, buffer, memory, memoryOffset)
}

// VkBindImageMemory mocks base method.
func (m *MockLoader) VkBindImageMemory(device loader.VkDevice, image loader.VkImage, memory loader.VkDeviceMemory, memoryOffset loader.VkDeviceSize) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkBindImageMemory", device, image, memory, memoryOffset)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkBindImageMemory indicates an expected call of VkBindImageMemory.
func (mr *MockLoaderMockRecorder) VkBindImageMemory(device, image, memory, memoryOffset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkBindImageMemory", reflect.TypeOf((*MockLoader)(nil).VkBindImageMemory), device, image, memory, memoryOffset)
}

// VkCmdBeginQuery mocks base method.
func (m *MockLoader) VkCmdBeginQuery(commandBuffer loader.VkCommandBuffer, queryPool loader.VkQueryPool, query loader.Uint32, flags loader.VkQueryControlFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBeginQuery", commandBuffer, queryPool, query, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBeginQuery indicates an expected call of VkCmdBeginQuery.
func (mr *MockLoaderMockRecorder) VkCmdBeginQuery(commandBuffer, queryPool, query, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBeginQuery", reflect.TypeOf((*MockLoader)(nil).VkCmdBeginQuery), commandBuffer, queryPool, query, flags)
}

// VkCmdBeginRenderPass mocks base method.
func (m *MockLoader) VkCmdBeginRenderPass(commandBuffer loader.VkCommandBuffer, pRenderPassBegin *loader.VkRenderPassBeginInfo, contents loader.VkSubpassContents) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBeginRenderPass", commandBuffer, pRenderPassBegin, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBeginRenderPass indicates an expected call of VkCmdBeginRenderPass.
func (mr *MockLoaderMockRecorder) VkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBeginRenderPass", reflect.TypeOf((*MockLoader)(nil).VkCmdBeginRenderPass), commandBuffer, pRenderPassBegin, contents)
}

// VkCmdBindDescriptorSets mocks base method.
func (m *MockLoader) VkCmdBindDescriptorSets(commandBuffer loader.VkCommandBuffer, pipelineBindPoint loader.VkPipelineBindPoint, layout loader.VkPipelineLayout, firstSet, descriptorSetCount loader.Uint32, pDescriptorSets *loader.VkDescriptorSet, dynamicOffsetCount loader.Uint32, pDynamicOffsets *loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBindDescriptorSets", commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBindDescriptorSets indicates an expected call of VkCmdBindDescriptorSets.
func (mr *MockLoaderMockRecorder) VkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBindDescriptorSets", reflect.TypeOf((*MockLoader)(nil).VkCmdBindDescriptorSets), commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets)
}

// VkCmdBindIndexBuffer mocks base method.
func (m *MockLoader) VkCmdBindIndexBuffer(commandBuffer loader.VkCommandBuffer, buffer loader.VkBuffer, offset loader.VkDeviceSize, indexType loader.VkIndexType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBindIndexBuffer", commandBuffer, buffer, offset, indexType)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBindIndexBuffer indicates an expected call of VkCmdBindIndexBuffer.
func (mr *MockLoaderMockRecorder) VkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBindIndexBuffer", reflect.TypeOf((*MockLoader)(nil).VkCmdBindIndexBuffer), commandBuffer, buffer, offset, indexType)
}

// VkCmdBindPipeline mocks base method.
func (m *MockLoader) VkCmdBindPipeline(commandBuffer loader.VkCommandBuffer, pipelineBindPoint loader.VkPipelineBindPoint, pipeline loader.VkPipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBindPipeline", commandBuffer, pipelineBindPoint, pipeline)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBindPipeline indicates an expected call of VkCmdBindPipeline.
func (mr *MockLoaderMockRecorder) VkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBindPipeline", reflect.TypeOf((*MockLoader)(nil).VkCmdBindPipeline), commandBuffer, pipelineBindPoint, pipeline)
}

// VkCmdBindVertexBuffers mocks base method.
func (m *MockLoader) VkCmdBindVertexBuffers(commandBuffer loader.VkCommandBuffer, firstBinding, bindingCount loader.Uint32, pBuffers *loader.VkBuffer, pOffsets *loader.VkDeviceSize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBindVertexBuffers", commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBindVertexBuffers indicates an expected call of VkCmdBindVertexBuffers.
func (mr *MockLoaderMockRecorder) VkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBindVertexBuffers", reflect.TypeOf((*MockLoader)(nil).VkCmdBindVertexBuffers), commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets)
}

// VkCmdBlitImage mocks base method.
func (m *MockLoader) VkCmdBlitImage(commandBuffer loader.VkCommandBuffer, srcImage loader.VkImage, srcImageLayout loader.VkImageLayout, dstImage loader.VkImage, dstImageLayout loader.VkImageLayout, regionCount loader.Uint32, pRegions *loader.VkImageBlit, filter loader.VkFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdBlitImage", commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdBlitImage indicates an expected call of VkCmdBlitImage.
func (mr *MockLoaderMockRecorder) VkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdBlitImage", reflect.TypeOf((*MockLoader)(nil).VkCmdBlitImage), commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter)
}

// VkCmdClearAttachments mocks base method.
func (m *MockLoader) VkCmdClearAttachments(commandBuffer loader.VkCommandBuffer, attachmentCount loader.Uint32, pAttachments *loader.VkClearAttachment, rectCount loader.Uint32, pRects *loader.VkClearRect) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdClearAttachments", commandBuffer, attachmentCount, pAttachments, rectCount, pRects)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdClearAttachments indicates an expected call of VkCmdClearAttachments.
func (mr *MockLoaderMockRecorder) VkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdClearAttachments", reflect.TypeOf((*MockLoader)(nil).VkCmdClearAttachments), commandBuffer, attachmentCount, pAttachments, rectCount, pRects)
}

// VkCmdClearColorImage mocks base method.
func (m *MockLoader) VkCmdClearColorImage(commandBuffer loader.VkCommandBuffer, image loader.VkImage, imageLayout loader.VkImageLayout, pColor *loader.VkClearColorValue, rangeCount loader.Uint32, pRanges *loader.VkImageSubresourceRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdClearColorImage", commandBuffer, image, imageLayout, pColor, rangeCount, pRanges)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdClearColorImage indicates an expected call of VkCmdClearColorImage.
func (mr *MockLoaderMockRecorder) VkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdClearColorImage", reflect.TypeOf((*MockLoader)(nil).VkCmdClearColorImage), commandBuffer, image, imageLayout, pColor, rangeCount, pRanges)
}

// VkCmdClearDepthStencilImage mocks base method.
func (m *MockLoader) VkCmdClearDepthStencilImage(commandBuffer loader.VkCommandBuffer, image loader.VkImage, imageLayout loader.VkImageLayout, pDepthStencil *loader.VkClearDepthStencilValue, rangeCount loader.Uint32, pRanges *loader.VkImageSubresourceRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdClearDepthStencilImage", commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdClearDepthStencilImage indicates an expected call of VkCmdClearDepthStencilImage.
func (mr *MockLoaderMockRecorder) VkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdClearDepthStencilImage", reflect.TypeOf((*MockLoader)(nil).VkCmdClearDepthStencilImage), commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges)
}

// VkCmdCopyBuffer mocks base method.
func (m *MockLoader) VkCmdCopyBuffer(commandBuffer loader.VkCommandBuffer, srcBuffer, dstBuffer loader.VkBuffer, regionCount loader.Uint32, pRegions *loader.VkBufferCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdCopyBuffer", commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdCopyBuffer indicates an expected call of VkCmdCopyBuffer.
func (mr *MockLoaderMockRecorder) VkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdCopyBuffer", reflect.TypeOf((*MockLoader)(nil).VkCmdCopyBuffer), commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions)
}

// VkCmdCopyBufferToImage mocks base method.
func (m *MockLoader) VkCmdCopyBufferToImage(commandBuffer loader.VkCommandBuffer, srcBuffer loader.VkBuffer, dstImage loader.VkImage, dstImageLayout loader.VkImageLayout, regionCount loader.Uint32, pRegions *loader.VkBufferImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdCopyBufferToImage", commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdCopyBufferToImage indicates an expected call of VkCmdCopyBufferToImage.
func (mr *MockLoaderMockRecorder) VkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdCopyBufferToImage", reflect.TypeOf((*MockLoader)(nil).VkCmdCopyBufferToImage), commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions)
}

// VkCmdCopyImage mocks base method.
func (m *MockLoader) VkCmdCopyImage(commandBuffer loader.VkCommandBuffer, srcImage loader.VkImage, srcImageLayout loader.VkImageLayout, dstImage loader.VkImage, dstImageLayout loader.VkImageLayout, regionCount loader.Uint32, pRegions *loader.VkImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdCopyImage", commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdCopyImage indicates an expected call of VkCmdCopyImage.
func (mr *MockLoaderMockRecorder) VkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdCopyImage", reflect.TypeOf((*MockLoader)(nil).VkCmdCopyImage), commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)
}

// VkCmdCopyImageToBuffer mocks base method.
func (m *MockLoader) VkCmdCopyImageToBuffer(commandBuffer loader.VkCommandBuffer, srcImage loader.VkImage, srcImageLayout loader.VkImageLayout, dstBuffer loader.VkBuffer, regionCount loader.Uint32, pRegions *loader.VkBufferImageCopy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdCopyImageToBuffer", commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdCopyImageToBuffer indicates an expected call of VkCmdCopyImageToBuffer.
func (mr *MockLoaderMockRecorder) VkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdCopyImageToBuffer", reflect.TypeOf((*MockLoader)(nil).VkCmdCopyImageToBuffer), commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions)
}

// VkCmdCopyQueryPoolResults mocks base method.
func (m *MockLoader) VkCmdCopyQueryPoolResults(commandBuffer loader.VkCommandBuffer, queryPool loader.VkQueryPool, firstQuery, queryCount loader.Uint32, dstBuffer loader.VkBuffer, dstOffset, stride loader.VkDeviceSize, flags loader.VkQueryResultFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdCopyQueryPoolResults", commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdCopyQueryPoolResults indicates an expected call of VkCmdCopyQueryPoolResults.
func (mr *MockLoaderMockRecorder) VkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdCopyQueryPoolResults", reflect.TypeOf((*MockLoader)(nil).VkCmdCopyQueryPoolResults), commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags)
}

// VkCmdDispatch mocks base method.
func (m *MockLoader) VkCmdDispatch(commandBuffer loader.VkCommandBuffer, groupCountX, groupCountY, groupCountZ loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDispatch", commandBuffer, groupCountX, groupCountY, groupCountZ)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDispatch indicates an expected call of VkCmdDispatch.
func (mr *MockLoaderMockRecorder) VkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDispatch", reflect.TypeOf((*MockLoader)(nil).VkCmdDispatch), commandBuffer, groupCountX, groupCountY, groupCountZ)
}

// VkCmdDispatchIndirect mocks base method.
func (m *MockLoader) VkCmdDispatchIndirect(commandBuffer loader.VkCommandBuffer, buffer loader.VkBuffer, offset loader.VkDeviceSize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDispatchIndirect", commandBuffer, buffer, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDispatchIndirect indicates an expected call of VkCmdDispatchIndirect.
func (mr *MockLoaderMockRecorder) VkCmdDispatchIndirect(commandBuffer, buffer, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDispatchIndirect", reflect.TypeOf((*MockLoader)(nil).VkCmdDispatchIndirect), commandBuffer, buffer, offset)
}

// VkCmdDraw mocks base method.
func (m *MockLoader) VkCmdDraw(commandBuffer loader.VkCommandBuffer, vertexCount, instanceCount, firstVertex, firstInstance loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDraw", commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDraw indicates an expected call of VkCmdDraw.
func (mr *MockLoaderMockRecorder) VkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDraw", reflect.TypeOf((*MockLoader)(nil).VkCmdDraw), commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance)
}

// VkCmdDrawIndexed mocks base method.
func (m *MockLoader) VkCmdDrawIndexed(commandBuffer loader.VkCommandBuffer, indexCount, instanceCount, firstIndex loader.Uint32, vertexOffset loader.Int32, firstInstance loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDrawIndexed", commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDrawIndexed indicates an expected call of VkCmdDrawIndexed.
func (mr *MockLoaderMockRecorder) VkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDrawIndexed", reflect.TypeOf((*MockLoader)(nil).VkCmdDrawIndexed), commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)
}

// VkCmdDrawIndexedIndirect mocks base method.
func (m *MockLoader) VkCmdDrawIndexedIndirect(commandBuffer loader.VkCommandBuffer, buffer loader.VkBuffer, offset loader.VkDeviceSize, drawCount, stride loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDrawIndexedIndirect", commandBuffer, buffer, offset, drawCount, stride)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDrawIndexedIndirect indicates an expected call of VkCmdDrawIndexedIndirect.
func (mr *MockLoaderMockRecorder) VkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDrawIndexedIndirect", reflect.TypeOf((*MockLoader)(nil).VkCmdDrawIndexedIndirect), commandBuffer, buffer, offset, drawCount, stride)
}

// VkCmdDrawIndirect mocks base method.
func (m *MockLoader) VkCmdDrawIndirect(commandBuffer loader.VkCommandBuffer, buffer loader.VkBuffer, offset loader.VkDeviceSize, drawCount, stride loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdDrawIndirect", commandBuffer, buffer, offset, drawCount, stride)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdDrawIndirect indicates an expected call of VkCmdDrawIndirect.
func (mr *MockLoaderMockRecorder) VkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdDrawIndirect", reflect.TypeOf((*MockLoader)(nil).VkCmdDrawIndirect), commandBuffer, buffer, offset, drawCount, stride)
}

// VkCmdEndQuery mocks base method.
func (m *MockLoader) VkCmdEndQuery(commandBuffer loader.VkCommandBuffer, queryPool loader.VkQueryPool, query loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdEndQuery", commandBuffer, queryPool, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdEndQuery indicates an expected call of VkCmdEndQuery.
func (mr *MockLoaderMockRecorder) VkCmdEndQuery(commandBuffer, queryPool, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdEndQuery", reflect.TypeOf((*MockLoader)(nil).VkCmdEndQuery), commandBuffer, queryPool, query)
}

// VkCmdEndRenderPass mocks base method.
func (m *MockLoader) VkCmdEndRenderPass(commandBuffer loader.VkCommandBuffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdEndRenderPass", commandBuffer)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdEndRenderPass indicates an expected call of VkCmdEndRenderPass.
func (mr *MockLoaderMockRecorder) VkCmdEndRenderPass(commandBuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdEndRenderPass", reflect.TypeOf((*MockLoader)(nil).VkCmdEndRenderPass), commandBuffer)
}

// VkCmdExecuteCommands mocks base method.
func (m *MockLoader) VkCmdExecuteCommands(commandBuffer loader.VkCommandBuffer, commandBufferCount loader.Uint32, pCommandBuffers *loader.VkCommandBuffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdExecuteCommands", commandBuffer, commandBufferCount, pCommandBuffers)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdExecuteCommands indicates an expected call of VkCmdExecuteCommands.
func (mr *MockLoaderMockRecorder) VkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdExecuteCommands", reflect.TypeOf((*MockLoader)(nil).VkCmdExecuteCommands), commandBuffer, commandBufferCount, pCommandBuffers)
}

// VkCmdFillBuffer mocks base method.
func (m *MockLoader) VkCmdFillBuffer(commandBuffer loader.VkCommandBuffer, dstBuffer loader.VkBuffer, dstOffset, size loader.VkDeviceSize, data loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdFillBuffer", commandBuffer, dstBuffer, dstOffset, size, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdFillBuffer indicates an expected call of VkCmdFillBuffer.
func (mr *MockLoaderMockRecorder) VkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdFillBuffer", reflect.TypeOf((*MockLoader)(nil).VkCmdFillBuffer), commandBuffer, dstBuffer, dstOffset, size, data)
}

// VkCmdNextSubpass mocks base method.
func (m *MockLoader) VkCmdNextSubpass(commandBuffer loader.VkCommandBuffer, contents loader.VkSubpassContents) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdNextSubpass", commandBuffer, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdNextSubpass indicates an expected call of VkCmdNextSubpass.
func (mr *MockLoaderMockRecorder) VkCmdNextSubpass(commandBuffer, contents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdNextSubpass", reflect.TypeOf((*MockLoader)(nil).VkCmdNextSubpass), commandBuffer, contents)
}

// VkCmdPipelineBarrier mocks base method.
func (m *MockLoader) VkCmdPipelineBarrier(commandBuffer loader.VkCommandBuffer, srcStageMask, dstStageMask loader.VkPipelineStageFlags, dependencyFlags loader.VkDependencyFlags, memoryBarrierCount loader.Uint32, pMemoryBarriers *loader.VkMemoryBarrier, bufferMemoryBarrierCount loader.Uint32, pBufferMemoryBarriers *loader.VkBufferMemoryBarrier, imageMemoryBarrierCount loader.Uint32, pImageMemoryBarriers *loader.VkImageMemoryBarrier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdPipelineBarrier", commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdPipelineBarrier indicates an expected call of VkCmdPipelineBarrier.
func (mr *MockLoaderMockRecorder) VkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdPipelineBarrier", reflect.TypeOf((*MockLoader)(nil).VkCmdPipelineBarrier), commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)
}

// VkCmdPushConstants mocks base method.
func (m *MockLoader) VkCmdPushConstants(commandBuffer loader.VkCommandBuffer, layout loader.VkPipelineLayout, stageFlags loader.VkShaderStageFlags, offset, size loader.Uint32, pValues unsafe.Pointer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdPushConstants", commandBuffer, layout, stageFlags, offset, size, pValues)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdPushConstants indicates an expected call of VkCmdPushConstants.
func (mr *MockLoaderMockRecorder) VkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdPushConstants", reflect.TypeOf((*MockLoader)(nil).VkCmdPushConstants), commandBuffer, layout, stageFlags, offset, size, pValues)
}

// VkCmdResetEvent mocks base method.
func (m *MockLoader) VkCmdResetEvent(commandBuffer loader.VkCommandBuffer, event loader.VkEvent, stageMask loader.VkPipelineStageFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdResetEvent", commandBuffer, event, stageMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdResetEvent indicates an expected call of VkCmdResetEvent.
func (mr *MockLoaderMockRecorder) VkCmdResetEvent(commandBuffer, event, stageMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdResetEvent", reflect.TypeOf((*MockLoader)(nil).VkCmdResetEvent), commandBuffer, event, stageMask)
}

// VkCmdResetQueryPool mocks base method.
func (m *MockLoader) VkCmdResetQueryPool(commandBuffer loader.VkCommandBuffer, queryPool loader.VkQueryPool, firstQuery, queryCount loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdResetQueryPool", commandBuffer, queryPool, firstQuery, queryCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdResetQueryPool indicates an expected call of VkCmdResetQueryPool.
func (mr *MockLoaderMockRecorder) VkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdResetQueryPool", reflect.TypeOf((*MockLoader)(nil).VkCmdResetQueryPool), commandBuffer, queryPool, firstQuery, queryCount)
}

// VkCmdResolveImage mocks base method.
func (m *MockLoader) VkCmdResolveImage(commandBuffer loader.VkCommandBuffer, srcImage loader.VkImage, srcImageLayout loader.VkImageLayout, dstImage loader.VkImage, dstImageLayout loader.VkImageLayout, regionCount loader.Uint32, pRegions *loader.VkImageResolve) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdResolveImage", commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdResolveImage indicates an expected call of VkCmdResolveImage.
func (mr *MockLoaderMockRecorder) VkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdResolveImage", reflect.TypeOf((*MockLoader)(nil).VkCmdResolveImage), commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)
}

// VkCmdSetBlendConstants mocks base method.
func (m *MockLoader) VkCmdSetBlendConstants(commandBuffer loader.VkCommandBuffer, blendConstants *loader.Float) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetBlendConstants", commandBuffer, blendConstants)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetBlendConstants indicates an expected call of VkCmdSetBlendConstants.
func (mr *MockLoaderMockRecorder) VkCmdSetBlendConstants(commandBuffer, blendConstants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetBlendConstants", reflect.TypeOf((*MockLoader)(nil).VkCmdSetBlendConstants), commandBuffer, blendConstants)
}

// VkCmdSetDepthBias mocks base method.
func (m *MockLoader) VkCmdSetDepthBias(commandBuffer loader.VkCommandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor loader.Float) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetDepthBias", commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetDepthBias indicates an expected call of VkCmdSetDepthBias.
func (mr *MockLoaderMockRecorder) VkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetDepthBias", reflect.TypeOf((*MockLoader)(nil).VkCmdSetDepthBias), commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor)
}

// VkCmdSetDepthBounds mocks base method.
func (m *MockLoader) VkCmdSetDepthBounds(commandBuffer loader.VkCommandBuffer, minDepthBounds, maxDepthBounds loader.Float) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetDepthBounds", commandBuffer, minDepthBounds, maxDepthBounds)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetDepthBounds indicates an expected call of VkCmdSetDepthBounds.
func (mr *MockLoaderMockRecorder) VkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetDepthBounds", reflect.TypeOf((*MockLoader)(nil).VkCmdSetDepthBounds), commandBuffer, minDepthBounds, maxDepthBounds)
}

// VkCmdSetEvent mocks base method.
func (m *MockLoader) VkCmdSetEvent(commandBuffer loader.VkCommandBuffer, event loader.VkEvent, stageMask loader.VkPipelineStageFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetEvent", commandBuffer, event, stageMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetEvent indicates an expected call of VkCmdSetEvent.
func (mr *MockLoaderMockRecorder) VkCmdSetEvent(commandBuffer, event, stageMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetEvent", reflect.TypeOf((*MockLoader)(nil).VkCmdSetEvent), commandBuffer, event, stageMask)
}

// VkCmdSetLineWidth mocks base method.
func (m *MockLoader) VkCmdSetLineWidth(commandBuffer loader.VkCommandBuffer, lineWidth loader.Float) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetLineWidth", commandBuffer, lineWidth)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetLineWidth indicates an expected call of VkCmdSetLineWidth.
func (mr *MockLoaderMockRecorder) VkCmdSetLineWidth(commandBuffer, lineWidth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetLineWidth", reflect.TypeOf((*MockLoader)(nil).VkCmdSetLineWidth), commandBuffer, lineWidth)
}

// VkCmdSetScissor mocks base method.
func (m *MockLoader) VkCmdSetScissor(commandBuffer loader.VkCommandBuffer, firstScissor, scissorCount loader.Uint32, pScissors *loader.VkRect2D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetScissor", commandBuffer, firstScissor, scissorCount, pScissors)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetScissor indicates an expected call of VkCmdSetScissor.
func (mr *MockLoaderMockRecorder) VkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetScissor", reflect.TypeOf((*MockLoader)(nil).VkCmdSetScissor), commandBuffer, firstScissor, scissorCount, pScissors)
}

// VkCmdSetStencilCompareMask mocks base method.
func (m *MockLoader) VkCmdSetStencilCompareMask(commandBuffer loader.VkCommandBuffer, faceMask loader.VkStencilFaceFlags, compareMask loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetStencilCompareMask", commandBuffer, faceMask, compareMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetStencilCompareMask indicates an expected call of VkCmdSetStencilCompareMask.
func (mr *MockLoaderMockRecorder) VkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetStencilCompareMask", reflect.TypeOf((*MockLoader)(nil).VkCmdSetStencilCompareMask), commandBuffer, faceMask, compareMask)
}

// VkCmdSetStencilReference mocks base method.
func (m *MockLoader) VkCmdSetStencilReference(commandBuffer loader.VkCommandBuffer, faceMask loader.VkStencilFaceFlags, reference loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetStencilReference", commandBuffer, faceMask, reference)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetStencilReference indicates an expected call of VkCmdSetStencilReference.
func (mr *MockLoaderMockRecorder) VkCmdSetStencilReference(commandBuffer, faceMask, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetStencilReference", reflect.TypeOf((*MockLoader)(nil).VkCmdSetStencilReference), commandBuffer, faceMask, reference)
}

// VkCmdSetStencilWriteMask mocks base method.
func (m *MockLoader) VkCmdSetStencilWriteMask(commandBuffer loader.VkCommandBuffer, faceMask loader.VkStencilFaceFlags, writeMask loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetStencilWriteMask", commandBuffer, faceMask, writeMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetStencilWriteMask indicates an expected call of VkCmdSetStencilWriteMask.
func (mr *MockLoaderMockRecorder) VkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetStencilWriteMask", reflect.TypeOf((*MockLoader)(nil).VkCmdSetStencilWriteMask), commandBuffer, faceMask, writeMask)
}

// VkCmdSetViewport mocks base method.
func (m *MockLoader) VkCmdSetViewport(commandBuffer loader.VkCommandBuffer, firstViewport, viewportCount loader.Uint32, pViewports *loader.VkViewport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdSetViewport", commandBuffer, firstViewport, viewportCount, pViewports)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdSetViewport indicates an expected call of VkCmdSetViewport.
func (mr *MockLoaderMockRecorder) VkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdSetViewport", reflect.TypeOf((*MockLoader)(nil).VkCmdSetViewport), commandBuffer, firstViewport, viewportCount, pViewports)
}

// VkCmdUpdateBuffer mocks base method.
func (m *MockLoader) VkCmdUpdateBuffer(commandBuffer loader.VkCommandBuffer, dstBuffer loader.VkBuffer, dstOffset, dataSize loader.VkDeviceSize, pData unsafe.Pointer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdUpdateBuffer", commandBuffer, dstBuffer, dstOffset, dataSize, pData)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdUpdateBuffer indicates an expected call of VkCmdUpdateBuffer.
func (mr *MockLoaderMockRecorder) VkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdUpdateBuffer", reflect.TypeOf((*MockLoader)(nil).VkCmdUpdateBuffer), commandBuffer, dstBuffer, dstOffset, dataSize, pData)
}

// VkCmdWaitEvents mocks base method.
func (m *MockLoader) VkCmdWaitEvents(commandBuffer loader.VkCommandBuffer, eventCount loader.Uint32, pEvents *loader.VkEvent, srcStageMask, dstStageMask loader.VkPipelineStageFlags, memoryBarrierCount loader.Uint32, pMemoryBarriers *loader.VkMemoryBarrier, bufferMemoryBarrierCount loader.Uint32, pBufferMemoryBarriers *loader.VkBufferMemoryBarrier, imageMemoryBarrierCount loader.Uint32, pImageMemoryBarriers *loader.VkImageMemoryBarrier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdWaitEvents", commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdWaitEvents indicates an expected call of VkCmdWaitEvents.
func (mr *MockLoaderMockRecorder) VkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdWaitEvents", reflect.TypeOf((*MockLoader)(nil).VkCmdWaitEvents), commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)
}

// VkCmdWriteTimestamp mocks base method.
func (m *MockLoader) VkCmdWriteTimestamp(commandBuffer loader.VkCommandBuffer, pipelineStage loader.VkPipelineStageFlags, queryPool loader.VkQueryPool, query loader.Uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCmdWriteTimestamp", commandBuffer, pipelineStage, queryPool, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkCmdWriteTimestamp indicates an expected call of VkCmdWriteTimestamp.
func (mr *MockLoaderMockRecorder) VkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCmdWriteTimestamp", reflect.TypeOf((*MockLoader)(nil).VkCmdWriteTimestamp), commandBuffer, pipelineStage, queryPool, query)
}

// VkCreateBuffer mocks base method.
func (m *MockLoader) VkCreateBuffer(device loader.VkDevice, pCreateInfo *loader.VkBufferCreateInfo, pAllocator *loader.VkAllocationCallbacks, pBuffer *loader.VkBuffer) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateBuffer", device, pCreateInfo, pAllocator, pBuffer)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateBuffer indicates an expected call of VkCreateBuffer.
func (mr *MockLoaderMockRecorder) VkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateBuffer", reflect.TypeOf((*MockLoader)(nil).VkCreateBuffer), device, pCreateInfo, pAllocator, pBuffer)
}

// VkCreateBufferView mocks base method.
func (m *MockLoader) VkCreateBufferView(device loader.VkDevice, pCreateInfo *loader.VkBufferViewCreateInfo, pAllocator *loader.VkAllocationCallbacks, pView *loader.VkBufferView) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateBufferView", device, pCreateInfo, pAllocator, pView)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateBufferView indicates an expected call of VkCreateBufferView.
func (mr *MockLoaderMockRecorder) VkCreateBufferView(device, pCreateInfo, pAllocator, pView interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateBufferView", reflect.TypeOf((*MockLoader)(nil).VkCreateBufferView), device, pCreateInfo, pAllocator, pView)
}

// VkCreateCommandPool mocks base method.
func (m *MockLoader) VkCreateCommandPool(device loader.VkDevice, pCreateInfo *loader.VkCommandPoolCreateInfo, pAllocator *loader.VkAllocationCallbacks, pCommandPool *loader.VkCommandPool) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateCommandPool", device, pCreateInfo, pAllocator, pCommandPool)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateCommandPool indicates an expected call of VkCreateCommandPool.
func (mr *MockLoaderMockRecorder) VkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateCommandPool", reflect.TypeOf((*MockLoader)(nil).VkCreateCommandPool), device, pCreateInfo, pAllocator, pCommandPool)
}

// VkCreateComputePipelines mocks base method.
func (m *MockLoader) VkCreateComputePipelines(device loader.VkDevice, pipelineCache loader.VkPipelineCache, createInfoCount loader.Uint32, pCreateInfos *loader.VkComputePipelineCreateInfo, pAllocator *loader.VkAllocationCallbacks, pPipelines *loader.VkPipeline) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateComputePipelines", device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateComputePipelines indicates an expected call of VkCreateComputePipelines.
func (mr *MockLoaderMockRecorder) VkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateComputePipelines", reflect.TypeOf((*MockLoader)(nil).VkCreateComputePipelines), device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
}

// VkCreateDescriptorPool mocks base method.
func (m *MockLoader) VkCreateDescriptorPool(device loader.VkDevice, pCreateInfo *loader.VkDescriptorPoolCreateInfo, pAllocator *loader.VkAllocationCallbacks, pDescriptorPool *loader.VkDescriptorPool) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateDescriptorPool", device, pCreateInfo, pAllocator, pDescriptorPool)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateDescriptorPool indicates an expected call of VkCreateDescriptorPool.
func (mr *MockLoaderMockRecorder) VkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateDescriptorPool", reflect.TypeOf((*MockLoader)(nil).VkCreateDescriptorPool), device, pCreateInfo, pAllocator, pDescriptorPool)
}

// VkCreateDescriptorSetLayout mocks base method.
func (m *MockLoader) VkCreateDescriptorSetLayout(device loader.VkDevice, pCreateInfo *loader.VkDescriptorSetLayoutCreateInfo, pAllocator *loader.VkAllocationCallbacks, pSetLayout *loader.VkDescriptorSetLayout) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateDescriptorSetLayout", device, pCreateInfo, pAllocator, pSetLayout)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateDescriptorSetLayout indicates an expected call of VkCreateDescriptorSetLayout.
func (mr *MockLoaderMockRecorder) VkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateDescriptorSetLayout", reflect.TypeOf((*MockLoader)(nil).VkCreateDescriptorSetLayout), device, pCreateInfo, pAllocator, pSetLayout)
}

// VkCreateDevice mocks base method.
func (m *MockLoader) VkCreateDevice(physicalDevice loader.VkPhysicalDevice, pCreateInfo *loader.VkDeviceCreateInfo, pAllocator *loader.VkAllocationCallbacks, pDevice *loader.VkDevice) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateDevice", physicalDevice, pCreateInfo, pAllocator, pDevice)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateDevice indicates an expected call of VkCreateDevice.
func (mr *MockLoaderMockRecorder) VkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateDevice", reflect.TypeOf((*MockLoader)(nil).VkCreateDevice), physicalDevice, pCreateInfo, pAllocator, pDevice)
}

// VkCreateEvent mocks base method.
func (m *MockLoader) VkCreateEvent(device loader.VkDevice, pCreateInfo *loader.VkEventCreateInfo, pAllocator *loader.VkAllocationCallbacks, pEvent *loader.VkEvent) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateEvent", device, pCreateInfo, pAllocator, pEvent)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateEvent indicates an expected call of VkCreateEvent.
func (mr *MockLoaderMockRecorder) VkCreateEvent(device, pCreateInfo, pAllocator, pEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateEvent", reflect.TypeOf((*MockLoader)(nil).VkCreateEvent), device, pCreateInfo, pAllocator, pEvent)
}

// VkCreateFence mocks base method.
func (m *MockLoader) VkCreateFence(device loader.VkDevice, pCreateInfo *loader.VkFenceCreateInfo, pAllocator *loader.VkAllocationCallbacks, pFence *loader.VkFence) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateFence", device, pCreateInfo, pAllocator, pFence)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateFence indicates an expected call of VkCreateFence.
func (mr *MockLoaderMockRecorder) VkCreateFence(device, pCreateInfo, pAllocator, pFence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateFence", reflect.TypeOf((*MockLoader)(nil).VkCreateFence), device, pCreateInfo, pAllocator, pFence)
}

// VkCreateFramebuffer mocks base method.
func (m *MockLoader) VkCreateFramebuffer(device loader.VkDevice, pCreateInfo *loader.VkFramebufferCreateInfo, pAllocator *loader.VkAllocationCallbacks, pFramebuffer *loader.VkFramebuffer) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateFramebuffer", device, pCreateInfo, pAllocator, pFramebuffer)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateFramebuffer indicates an expected call of VkCreateFramebuffer.
func (mr *MockLoaderMockRecorder) VkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateFramebuffer", reflect.TypeOf((*MockLoader)(nil).VkCreateFramebuffer), device, pCreateInfo, pAllocator, pFramebuffer)
}

// VkCreateGraphicsPipelines mocks base method.
func (m *MockLoader) VkCreateGraphicsPipelines(device loader.VkDevice, pipelineCache loader.VkPipelineCache, createInfoCount loader.Uint32, pCreateInfos *loader.VkGraphicsPipelineCreateInfo, pAllocator *loader.VkAllocationCallbacks, pPipelines *loader.VkPipeline) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateGraphicsPipelines", device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateGraphicsPipelines indicates an expected call of VkCreateGraphicsPipelines.
func (mr *MockLoaderMockRecorder) VkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateGraphicsPipelines", reflect.TypeOf((*MockLoader)(nil).VkCreateGraphicsPipelines), device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
}

// VkCreateImage mocks base method.
func (m *MockLoader) VkCreateImage(device loader.VkDevice, pCreateInfo *loader.VkImageCreateInfo, pAllocator *loader.VkAllocationCallbacks, pImage *loader.VkImage) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateImage", device, pCreateInfo, pAllocator, pImage)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateImage indicates an expected call of VkCreateImage.
func (mr *MockLoaderMockRecorder) VkCreateImage(device, pCreateInfo, pAllocator, pImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateImage", reflect.TypeOf((*MockLoader)(nil).VkCreateImage), device, pCreateInfo, pAllocator, pImage)
}

// VkCreateImageView mocks base method.
func (m *MockLoader) VkCreateImageView(device loader.VkDevice, pCreateInfo *loader.VkImageViewCreateInfo, pAllocator *loader.VkAllocationCallbacks, pView *loader.VkImageView) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateImageView", device, pCreateInfo, pAllocator, pView)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateImageView indicates an expected call of VkCreateImageView.
func (mr *MockLoaderMockRecorder) VkCreateImageView(device, pCreateInfo, pAllocator, pView interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateImageView", reflect.TypeOf((*MockLoader)(nil).VkCreateImageView), device, pCreateInfo, pAllocator, pView)
}

// VkCreateInstance mocks base method.
func (m *MockLoader) VkCreateInstance(pCreateInfo *loader.VkInstanceCreateInfo, pAllocator *loader.VkAllocationCallbacks, pInstance *loader.VkInstance) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateInstance", pCreateInfo, pAllocator, pInstance)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateInstance indicates an expected call of VkCreateInstance.
func (mr *MockLoaderMockRecorder) VkCreateInstance(pCreateInfo, pAllocator, pInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateInstance", reflect.TypeOf((*MockLoader)(nil).VkCreateInstance), pCreateInfo, pAllocator, pInstance)
}

// VkCreatePipelineCache mocks base method.
func (m *MockLoader) VkCreatePipelineCache(device loader.VkDevice, pCreateInfo *loader.VkPipelineCacheCreateInfo, pAllocator *loader.VkAllocationCallbacks, pPipelineCache *loader.VkPipelineCache) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreatePipelineCache", device, pCreateInfo, pAllocator, pPipelineCache)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreatePipelineCache indicates an expected call of VkCreatePipelineCache.
func (mr *MockLoaderMockRecorder) VkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreatePipelineCache", reflect.TypeOf((*MockLoader)(nil).VkCreatePipelineCache), device, pCreateInfo, pAllocator, pPipelineCache)
}

// VkCreatePipelineLayout mocks base method.
func (m *MockLoader) VkCreatePipelineLayout(device loader.VkDevice, pCreateInfo *loader.VkPipelineLayoutCreateInfo, pAllocator *loader.VkAllocationCallbacks, pPipelineLayout *loader.VkPipelineLayout) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreatePipelineLayout", device, pCreateInfo, pAllocator, pPipelineLayout)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreatePipelineLayout indicates an expected call of VkCreatePipelineLayout.
func (mr *MockLoaderMockRecorder) VkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreatePipelineLayout", reflect.TypeOf((*MockLoader)(nil).VkCreatePipelineLayout), device, pCreateInfo, pAllocator, pPipelineLayout)
}

// VkCreateQueryPool mocks base method.
func (m *MockLoader) VkCreateQueryPool(device loader.VkDevice, pCreateInfo *loader.VkQueryPoolCreateInfo, pAllocator *loader.VkAllocationCallbacks, pQueryPool *loader.VkQueryPool) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateQueryPool", device, pCreateInfo, pAllocator, pQueryPool)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateQueryPool indicates an expected call of VkCreateQueryPool.
func (mr *MockLoaderMockRecorder) VkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateQueryPool", reflect.TypeOf((*MockLoader)(nil).VkCreateQueryPool), device, pCreateInfo, pAllocator, pQueryPool)
}

// VkCreateRenderPass mocks base method.
func (m *MockLoader) VkCreateRenderPass(device loader.VkDevice, pCreateInfo *loader.VkRenderPassCreateInfo, pAllocator *loader.VkAllocationCallbacks, pRenderPass *loader.VkRenderPass) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateRenderPass", device, pCreateInfo, pAllocator, pRenderPass)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateRenderPass indicates an expected call of VkCreateRenderPass.
func (mr *MockLoaderMockRecorder) VkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateRenderPass", reflect.TypeOf((*MockLoader)(nil).VkCreateRenderPass), device, pCreateInfo, pAllocator, pRenderPass)
}

// VkCreateSampler mocks base method.
func (m *MockLoader) VkCreateSampler(device loader.VkDevice, pCreateInfo *loader.VkSamplerCreateInfo, pAllocator *loader.VkAllocationCallbacks, pSampler *loader.VkSampler) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateSampler", device, pCreateInfo, pAllocator, pSampler)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateSampler indicates an expected call of VkCreateSampler.
func (mr *MockLoaderMockRecorder) VkCreateSampler(device, pCreateInfo, pAllocator, pSampler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateSampler", reflect.TypeOf((*MockLoader)(nil).VkCreateSampler), device, pCreateInfo, pAllocator, pSampler)
}

// VkCreateSemaphore mocks base method.
func (m *MockLoader) VkCreateSemaphore(device loader.VkDevice, pCreateInfo *loader.VkSemaphoreCreateInfo, pAllocator *loader.VkAllocationCallbacks, pSemaphore *loader.VkSemaphore) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateSemaphore", device, pCreateInfo, pAllocator, pSemaphore)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateSemaphore indicates an expected call of VkCreateSemaphore.
func (mr *MockLoaderMockRecorder) VkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateSemaphore", reflect.TypeOf((*MockLoader)(nil).VkCreateSemaphore), device, pCreateInfo, pAllocator, pSemaphore)
}

// VkCreateShaderModule mocks base method.
func (m *MockLoader) VkCreateShaderModule(device loader.VkDevice, pCreateInfo *loader.VkShaderModuleCreateInfo, pAllocator *loader.VkAllocationCallbacks, pShaderModule *loader.VkShaderModule) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkCreateShaderModule", device, pCreateInfo, pAllocator, pShaderModule)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkCreateShaderModule indicates an expected call of VkCreateShaderModule.
func (mr *MockLoaderMockRecorder) VkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkCreateShaderModule", reflect.TypeOf((*MockLoader)(nil).VkCreateShaderModule), device, pCreateInfo, pAllocator, pShaderModule)
}

// VkDestroyBuffer mocks base method.
func (m *MockLoader) VkDestroyBuffer(device loader.VkDevice, buffer loader.VkBuffer, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyBuffer", device, buffer, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyBuffer indicates an expected call of VkDestroyBuffer.
func (mr *MockLoaderMockRecorder) VkDestroyBuffer(device, buffer, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyBuffer", reflect.TypeOf((*MockLoader)(nil).VkDestroyBuffer), device, buffer, pAllocator)
}

// VkDestroyBufferView mocks base method.
func (m *MockLoader) VkDestroyBufferView(device loader.VkDevice, bufferView loader.VkBufferView, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyBufferView", device, bufferView, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyBufferView indicates an expected call of VkDestroyBufferView.
func (mr *MockLoaderMockRecorder) VkDestroyBufferView(device, bufferView, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyBufferView", reflect.TypeOf((*MockLoader)(nil).VkDestroyBufferView), device, bufferView, pAllocator)
}

// VkDestroyCommandPool mocks base method.
func (m *MockLoader) VkDestroyCommandPool(device loader.VkDevice, commandPool loader.VkCommandPool, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyCommandPool", device, commandPool, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyCommandPool indicates an expected call of VkDestroyCommandPool.
func (mr *MockLoaderMockRecorder) VkDestroyCommandPool(device, commandPool, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyCommandPool", reflect.TypeOf((*MockLoader)(nil).VkDestroyCommandPool), device, commandPool, pAllocator)
}

// VkDestroyDescriptorPool mocks base method.
func (m *MockLoader) VkDestroyDescriptorPool(device loader.VkDevice, descriptorPool loader.VkDescriptorPool, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyDescriptorPool", device, descriptorPool, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyDescriptorPool indicates an expected call of VkDestroyDescriptorPool.
func (mr *MockLoaderMockRecorder) VkDestroyDescriptorPool(device, descriptorPool, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyDescriptorPool", reflect.TypeOf((*MockLoader)(nil).VkDestroyDescriptorPool), device, descriptorPool, pAllocator)
}

// VkDestroyDescriptorSetLayout mocks base method.
func (m *MockLoader) VkDestroyDescriptorSetLayout(device loader.VkDevice, descriptorSetLayout loader.VkDescriptorSetLayout, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyDescriptorSetLayout", device, descriptorSetLayout, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyDescriptorSetLayout indicates an expected call of VkDestroyDescriptorSetLayout.
func (mr *MockLoaderMockRecorder) VkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyDescriptorSetLayout", reflect.TypeOf((*MockLoader)(nil).VkDestroyDescriptorSetLayout), device, descriptorSetLayout, pAllocator)
}

// VkDestroyDevice mocks base method.
func (m *MockLoader) VkDestroyDevice(device loader.VkDevice, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyDevice", device, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyDevice indicates an expected call of VkDestroyDevice.
func (mr *MockLoaderMockRecorder) VkDestroyDevice(device, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyDevice", reflect.TypeOf((*MockLoader)(nil).VkDestroyDevice), device, pAllocator)
}

// VkDestroyEvent mocks base method.
func (m *MockLoader) VkDestroyEvent(device loader.VkDevice, event loader.VkEvent, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyEvent", device, event, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyEvent indicates an expected call of VkDestroyEvent.
func (mr *MockLoaderMockRecorder) VkDestroyEvent(device, event, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyEvent", reflect.TypeOf((*MockLoader)(nil).VkDestroyEvent), device, event, pAllocator)
}

// VkDestroyFence mocks base method.
func (m *MockLoader) VkDestroyFence(device loader.VkDevice, fence loader.VkFence, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyFence", device, fence, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyFence indicates an expected call of VkDestroyFence.
func (mr *MockLoaderMockRecorder) VkDestroyFence(device, fence, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyFence", reflect.TypeOf((*MockLoader)(nil).VkDestroyFence), device, fence, pAllocator)
}

// VkDestroyFramebuffer mocks base method.
func (m *MockLoader) VkDestroyFramebuffer(device loader.VkDevice, framebuffer loader.VkFramebuffer, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyFramebuffer", device, framebuffer, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyFramebuffer indicates an expected call of VkDestroyFramebuffer.
func (mr *MockLoaderMockRecorder) VkDestroyFramebuffer(device, framebuffer, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyFramebuffer", reflect.TypeOf((*MockLoader)(nil).VkDestroyFramebuffer), device, framebuffer, pAllocator)
}

// VkDestroyImage mocks base method.
func (m *MockLoader) VkDestroyImage(device loader.VkDevice, image loader.VkImage, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyImage", device, image, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyImage indicates an expected call of VkDestroyImage.
func (mr *MockLoaderMockRecorder) VkDestroyImage(device, image, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyImage", reflect.TypeOf((*MockLoader)(nil).VkDestroyImage), device, image, pAllocator)
}

// VkDestroyImageView mocks base method.
func (m *MockLoader) VkDestroyImageView(device loader.VkDevice, imageView loader.VkImageView, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyImageView", device, imageView, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyImageView indicates an expected call of VkDestroyImageView.
func (mr *MockLoaderMockRecorder) VkDestroyImageView(device, imageView, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyImageView", reflect.TypeOf((*MockLoader)(nil).VkDestroyImageView), device, imageView, pAllocator)
}

// VkDestroyInstance mocks base method.
func (m *MockLoader) VkDestroyInstance(instance loader.VkInstance, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyInstance", instance, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyInstance indicates an expected call of VkDestroyInstance.
func (mr *MockLoaderMockRecorder) VkDestroyInstance(instance, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyInstance", reflect.TypeOf((*MockLoader)(nil).VkDestroyInstance), instance, pAllocator)
}

// VkDestroyPipeline mocks base method.
func (m *MockLoader) VkDestroyPipeline(device loader.VkDevice, pipeline loader.VkPipeline, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyPipeline", device, pipeline, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyPipeline indicates an expected call of VkDestroyPipeline.
func (mr *MockLoaderMockRecorder) VkDestroyPipeline(device, pipeline, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyPipeline", reflect.TypeOf((*MockLoader)(nil).VkDestroyPipeline), device, pipeline, pAllocator)
}

// VkDestroyPipelineCache mocks base method.
func (m *MockLoader) VkDestroyPipelineCache(device loader.VkDevice, pipelineCache loader.VkPipelineCache, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyPipelineCache", device, pipelineCache, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyPipelineCache indicates an expected call of VkDestroyPipelineCache.
func (mr *MockLoaderMockRecorder) VkDestroyPipelineCache(device, pipelineCache, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyPipelineCache", reflect.TypeOf((*MockLoader)(nil).VkDestroyPipelineCache), device, pipelineCache, pAllocator)
}

// VkDestroyPipelineLayout mocks base method.
func (m *MockLoader) VkDestroyPipelineLayout(device loader.VkDevice, pipelineLayout loader.VkPipelineLayout, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyPipelineLayout", device, pipelineLayout, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyPipelineLayout indicates an expected call of VkDestroyPipelineLayout.
func (mr *MockLoaderMockRecorder) VkDestroyPipelineLayout(device, pipelineLayout, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyPipelineLayout", reflect.TypeOf((*MockLoader)(nil).VkDestroyPipelineLayout), device, pipelineLayout, pAllocator)
}

// VkDestroyQueryPool mocks base method.
func (m *MockLoader) VkDestroyQueryPool(device loader.VkDevice, queryPool loader.VkQueryPool, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyQueryPool", device, queryPool, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyQueryPool indicates an expected call of VkDestroyQueryPool.
func (mr *MockLoaderMockRecorder) VkDestroyQueryPool(device, queryPool, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyQueryPool", reflect.TypeOf((*MockLoader)(nil).VkDestroyQueryPool), device, queryPool, pAllocator)
}

// VkDestroyRenderPass mocks base method.
func (m *MockLoader) VkDestroyRenderPass(device loader.VkDevice, renderPass loader.VkRenderPass, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyRenderPass", device, renderPass, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyRenderPass indicates an expected call of VkDestroyRenderPass.
func (mr *MockLoaderMockRecorder) VkDestroyRenderPass(device, renderPass, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyRenderPass", reflect.TypeOf((*MockLoader)(nil).VkDestroyRenderPass), device, renderPass, pAllocator)
}

// VkDestroySampler mocks base method.
func (m *MockLoader) VkDestroySampler(device loader.VkDevice, sampler loader.VkSampler, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroySampler", device, sampler, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroySampler indicates an expected call of VkDestroySampler.
func (mr *MockLoaderMockRecorder) VkDestroySampler(device, sampler, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroySampler", reflect.TypeOf((*MockLoader)(nil).VkDestroySampler), device, sampler, pAllocator)
}

// VkDestroySemaphore mocks base method.
func (m *MockLoader) VkDestroySemaphore(device loader.VkDevice, semaphore loader.VkSemaphore, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroySemaphore", device, semaphore, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroySemaphore indicates an expected call of VkDestroySemaphore.
func (mr *MockLoaderMockRecorder) VkDestroySemaphore(device, semaphore, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroySemaphore", reflect.TypeOf((*MockLoader)(nil).VkDestroySemaphore), device, semaphore, pAllocator)
}

// VkDestroyShaderModule mocks base method.
func (m *MockLoader) VkDestroyShaderModule(device loader.VkDevice, shaderModule loader.VkShaderModule, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDestroyShaderModule", device, shaderModule, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkDestroyShaderModule indicates an expected call of VkDestroyShaderModule.
func (mr *MockLoaderMockRecorder) VkDestroyShaderModule(device, shaderModule, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDestroyShaderModule", reflect.TypeOf((*MockLoader)(nil).VkDestroyShaderModule), device, shaderModule, pAllocator)
}

// VkDeviceWaitIdle mocks base method.
func (m *MockLoader) VkDeviceWaitIdle(device loader.VkDevice) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkDeviceWaitIdle", device)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkDeviceWaitIdle indicates an expected call of VkDeviceWaitIdle.
func (mr *MockLoaderMockRecorder) VkDeviceWaitIdle(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkDeviceWaitIdle", reflect.TypeOf((*MockLoader)(nil).VkDeviceWaitIdle), device)
}

// VkEndCommandBuffer mocks base method.
func (m *MockLoader) VkEndCommandBuffer(commandBuffer loader.VkCommandBuffer) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEndCommandBuffer", commandBuffer)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEndCommandBuffer indicates an expected call of VkEndCommandBuffer.
func (mr *MockLoaderMockRecorder) VkEndCommandBuffer(commandBuffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEndCommandBuffer", reflect.TypeOf((*MockLoader)(nil).VkEndCommandBuffer), commandBuffer)
}

// VkEnumerateDeviceExtensionProperties mocks base method.
func (m *MockLoader) VkEnumerateDeviceExtensionProperties(physicalDevice loader.VkPhysicalDevice, pLayerName *loader.Char, pPropertyCount *loader.Uint32, pProperties *loader.VkExtensionProperties) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumerateDeviceExtensionProperties", physicalDevice, pLayerName, pPropertyCount, pProperties)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumerateDeviceExtensionProperties indicates an expected call of VkEnumerateDeviceExtensionProperties.
func (mr *MockLoaderMockRecorder) VkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumerateDeviceExtensionProperties", reflect.TypeOf((*MockLoader)(nil).VkEnumerateDeviceExtensionProperties), physicalDevice, pLayerName, pPropertyCount, pProperties)
}

// VkEnumerateDeviceLayerProperties mocks base method.
func (m *MockLoader) VkEnumerateDeviceLayerProperties(physicalDevice loader.VkPhysicalDevice, pPropertyCount *loader.Uint32, pProperties *loader.VkLayerProperties) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumerateDeviceLayerProperties", physicalDevice, pPropertyCount, pProperties)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumerateDeviceLayerProperties indicates an expected call of VkEnumerateDeviceLayerProperties.
func (mr *MockLoaderMockRecorder) VkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumerateDeviceLayerProperties", reflect.TypeOf((*MockLoader)(nil).VkEnumerateDeviceLayerProperties), physicalDevice, pPropertyCount, pProperties)
}

// VkEnumerateInstanceExtensionProperties mocks base method.
func (m *MockLoader) VkEnumerateInstanceExtensionProperties(pLayerName *loader.Char, pPropertyCount *loader.Uint32, pProperties *loader.VkExtensionProperties) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumerateInstanceExtensionProperties", pLayerName, pPropertyCount, pProperties)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumerateInstanceExtensionProperties indicates an expected call of VkEnumerateInstanceExtensionProperties.
func (mr *MockLoaderMockRecorder) VkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumerateInstanceExtensionProperties", reflect.TypeOf((*MockLoader)(nil).VkEnumerateInstanceExtensionProperties), pLayerName, pPropertyCount, pProperties)
}

// VkEnumerateInstanceLayerProperties mocks base method.
func (m *MockLoader) VkEnumerateInstanceLayerProperties(pPropertyCount *loader.Uint32, pProperties *loader.VkLayerProperties) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumerateInstanceLayerProperties", pPropertyCount, pProperties)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumerateInstanceLayerProperties indicates an expected call of VkEnumerateInstanceLayerProperties.
func (mr *MockLoaderMockRecorder) VkEnumerateInstanceLayerProperties(pPropertyCount, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumerateInstanceLayerProperties", reflect.TypeOf((*MockLoader)(nil).VkEnumerateInstanceLayerProperties), pPropertyCount, pProperties)
}

// VkEnumeratePhysicalDevices mocks base method.
func (m *MockLoader) VkEnumeratePhysicalDevices(instance loader.VkInstance, pPhysicalDeviceCount *loader.Uint32, pPhysicalDevices *loader.VkPhysicalDevice) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkEnumeratePhysicalDevices", instance, pPhysicalDeviceCount, pPhysicalDevices)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkEnumeratePhysicalDevices indicates an expected call of VkEnumeratePhysicalDevices.
func (mr *MockLoaderMockRecorder) VkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkEnumeratePhysicalDevices", reflect.TypeOf((*MockLoader)(nil).VkEnumeratePhysicalDevices), instance, pPhysicalDeviceCount, pPhysicalDevices)
}

// VkFlushMappedMemoryRanges mocks base method.
func (m *MockLoader) VkFlushMappedMemoryRanges(device loader.VkDevice, memoryRangeCount loader.Uint32, pMemoryRanges *loader.VkMappedMemoryRange) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkFlushMappedMemoryRanges", device, memoryRangeCount, pMemoryRanges)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkFlushMappedMemoryRanges indicates an expected call of VkFlushMappedMemoryRanges.
func (mr *MockLoaderMockRecorder) VkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkFlushMappedMemoryRanges", reflect.TypeOf((*MockLoader)(nil).VkFlushMappedMemoryRanges), device, memoryRangeCount, pMemoryRanges)
}

// VkFreeCommandBuffers mocks base method.
func (m *MockLoader) VkFreeCommandBuffers(device loader.VkDevice, commandPool loader.VkCommandPool, commandBufferCount loader.Uint32, pCommandBuffers *loader.VkCommandBuffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkFreeCommandBuffers", device, commandPool, commandBufferCount, pCommandBuffers)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkFreeCommandBuffers indicates an expected call of VkFreeCommandBuffers.
func (mr *MockLoaderMockRecorder) VkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkFreeCommandBuffers", reflect.TypeOf((*MockLoader)(nil).VkFreeCommandBuffers), device, commandPool, commandBufferCount, pCommandBuffers)
}

// VkFreeDescriptorSets mocks base method.
func (m *MockLoader) VkFreeDescriptorSets(device loader.VkDevice, descriptorPool loader.VkDescriptorPool, descriptorSetCount loader.Uint32, pDescriptorSets *loader.VkDescriptorSet) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkFreeDescriptorSets", device, descriptorPool, descriptorSetCount, pDescriptorSets)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkFreeDescriptorSets indicates an expected call of VkFreeDescriptorSets.
func (mr *MockLoaderMockRecorder) VkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkFreeDescriptorSets", reflect.TypeOf((*MockLoader)(nil).VkFreeDescriptorSets), device, descriptorPool, descriptorSetCount, pDescriptorSets)
}

// VkFreeMemory mocks base method.
func (m *MockLoader) VkFreeMemory(device loader.VkDevice, memory loader.VkDeviceMemory, pAllocator *loader.VkAllocationCallbacks) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkFreeMemory", device, memory, pAllocator)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkFreeMemory indicates an expected call of VkFreeMemory.
func (mr *MockLoaderMockRecorder) VkFreeMemory(device, memory, pAllocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkFreeMemory", reflect.TypeOf((*MockLoader)(nil).VkFreeMemory), device, memory, pAllocator)
}

// VkGetBufferMemoryRequirements mocks base method.
func (m *MockLoader) VkGetBufferMemoryRequirements(device loader.VkDevice, buffer loader.VkBuffer, pMemoryRequirements *loader.VkMemoryRequirements) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetBufferMemoryRequirements", device, buffer, pMemoryRequirements)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetBufferMemoryRequirements indicates an expected call of VkGetBufferMemoryRequirements.
func (mr *MockLoaderMockRecorder) VkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetBufferMemoryRequirements", reflect.TypeOf((*MockLoader)(nil).VkGetBufferMemoryRequirements), device, buffer, pMemoryRequirements)
}

// VkGetDeviceMemoryCommitment mocks base method.
func (m *MockLoader) VkGetDeviceMemoryCommitment(device loader.VkDevice, memory loader.VkDeviceMemory, pCommittedMemoryInBytes *loader.VkDeviceSize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetDeviceMemoryCommitment", device, memory, pCommittedMemoryInBytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetDeviceMemoryCommitment indicates an expected call of VkGetDeviceMemoryCommitment.
func (mr *MockLoaderMockRecorder) VkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetDeviceMemoryCommitment", reflect.TypeOf((*MockLoader)(nil).VkGetDeviceMemoryCommitment), device, memory, pCommittedMemoryInBytes)
}

// VkGetDeviceQueue mocks base method.
func (m *MockLoader) VkGetDeviceQueue(device loader.VkDevice, queueFamilyIndex, queueIndex loader.Uint32, pQueue *loader.VkQueue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetDeviceQueue", device, queueFamilyIndex, queueIndex, pQueue)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetDeviceQueue indicates an expected call of VkGetDeviceQueue.
func (mr *MockLoaderMockRecorder) VkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetDeviceQueue", reflect.TypeOf((*MockLoader)(nil).VkGetDeviceQueue), device, queueFamilyIndex, queueIndex, pQueue)
}

// VkGetEventStatus mocks base method.
func (m *MockLoader) VkGetEventStatus(device loader.VkDevice, event loader.VkEvent) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetEventStatus", device, event)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetEventStatus indicates an expected call of VkGetEventStatus.
func (mr *MockLoaderMockRecorder) VkGetEventStatus(device, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetEventStatus", reflect.TypeOf((*MockLoader)(nil).VkGetEventStatus), device, event)
}

// VkGetFenceStatus mocks base method.
func (m *MockLoader) VkGetFenceStatus(device loader.VkDevice, fence loader.VkFence) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetFenceStatus", device, fence)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetFenceStatus indicates an expected call of VkGetFenceStatus.
func (mr *MockLoaderMockRecorder) VkGetFenceStatus(device, fence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetFenceStatus", reflect.TypeOf((*MockLoader)(nil).VkGetFenceStatus), device, fence)
}

// VkGetImageMemoryRequirements mocks base method.
func (m *MockLoader) VkGetImageMemoryRequirements(device loader.VkDevice, image loader.VkImage, pMemoryRequirements *loader.VkMemoryRequirements) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetImageMemoryRequirements", device, image, pMemoryRequirements)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetImageMemoryRequirements indicates an expected call of VkGetImageMemoryRequirements.
func (mr *MockLoaderMockRecorder) VkGetImageMemoryRequirements(device, image, pMemoryRequirements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetImageMemoryRequirements", reflect.TypeOf((*MockLoader)(nil).VkGetImageMemoryRequirements), device, image, pMemoryRequirements)
}

// VkGetImageSparseMemoryRequirements mocks base method.
func (m *MockLoader) VkGetImageSparseMemoryRequirements(device loader.VkDevice, image loader.VkImage, pSparseMemoryRequirementCount *loader.Uint32, pSparseMemoryRequirements *loader.VkSparseImageMemoryRequirements) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetImageSparseMemoryRequirements", device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetImageSparseMemoryRequirements indicates an expected call of VkGetImageSparseMemoryRequirements.
func (mr *MockLoaderMockRecorder) VkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetImageSparseMemoryRequirements", reflect.TypeOf((*MockLoader)(nil).VkGetImageSparseMemoryRequirements), device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
}

// VkGetImageSubresourceLayout mocks base method.
func (m *MockLoader) VkGetImageSubresourceLayout(device loader.VkDevice, image loader.VkImage, pSubresource *loader.VkImageSubresource, pLayout *loader.VkSubresourceLayout) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetImageSubresourceLayout", device, image, pSubresource, pLayout)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetImageSubresourceLayout indicates an expected call of VkGetImageSubresourceLayout.
func (mr *MockLoaderMockRecorder) VkGetImageSubresourceLayout(device, image, pSubresource, pLayout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetImageSubresourceLayout", reflect.TypeOf((*MockLoader)(nil).VkGetImageSubresourceLayout), device, image, pSubresource, pLayout)
}

// VkGetPhysicalDeviceFeatures mocks base method.
func (m *MockLoader) VkGetPhysicalDeviceFeatures(physicalDevice loader.VkPhysicalDevice, pFeatures *loader.VkPhysicalDeviceFeatures) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceFeatures", physicalDevice, pFeatures)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceFeatures indicates an expected call of VkGetPhysicalDeviceFeatures.
func (mr *MockLoaderMockRecorder) VkGetPhysicalDeviceFeatures(physicalDevice, pFeatures interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceFeatures", reflect.TypeOf((*MockLoader)(nil).VkGetPhysicalDeviceFeatures), physicalDevice, pFeatures)
}

// VkGetPhysicalDeviceFormatProperties mocks base method.
func (m *MockLoader) VkGetPhysicalDeviceFormatProperties(physicalDevice loader.VkPhysicalDevice, format loader.VkFormat, pFormatProperties *loader.VkFormatProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceFormatProperties", physicalDevice, format, pFormatProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceFormatProperties indicates an expected call of VkGetPhysicalDeviceFormatProperties.
func (mr *MockLoaderMockRecorder) VkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceFormatProperties", reflect.TypeOf((*MockLoader)(nil).VkGetPhysicalDeviceFormatProperties), physicalDevice, format, pFormatProperties)
}

// VkGetPhysicalDeviceImageFormatProperties mocks base method.
func (m *MockLoader) VkGetPhysicalDeviceImageFormatProperties(physicalDevice loader.VkPhysicalDevice, format loader.VkFormat, t loader.VkImageType, tiling loader.VkImageTiling, usage loader.VkImageUsageFlags, flags loader.VkImageCreateFlags, pImageFormatProperties *loader.VkImageFormatProperties) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceImageFormatProperties", physicalDevice, format, t, tiling, usage, flags, pImageFormatProperties)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetPhysicalDeviceImageFormatProperties indicates an expected call of VkGetPhysicalDeviceImageFormatProperties.
func (mr *MockLoaderMockRecorder) VkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, t, tiling, usage, flags, pImageFormatProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceImageFormatProperties", reflect.TypeOf((*MockLoader)(nil).VkGetPhysicalDeviceImageFormatProperties), physicalDevice, format, t, tiling, usage, flags, pImageFormatProperties)
}

// VkGetPhysicalDeviceMemoryProperties mocks base method.
func (m *MockLoader) VkGetPhysicalDeviceMemoryProperties(physicalDevice loader.VkPhysicalDevice, pMemoryProperties *loader.VkPhysicalDeviceMemoryProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceMemoryProperties", physicalDevice, pMemoryProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceMemoryProperties indicates an expected call of VkGetPhysicalDeviceMemoryProperties.
func (mr *MockLoaderMockRecorder) VkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceMemoryProperties", reflect.TypeOf((*MockLoader)(nil).VkGetPhysicalDeviceMemoryProperties), physicalDevice, pMemoryProperties)
}

// VkGetPhysicalDeviceProperties mocks base method.
func (m *MockLoader) VkGetPhysicalDeviceProperties(physicalDevice loader.VkPhysicalDevice, pProperties *loader.VkPhysicalDeviceProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceProperties", physicalDevice, pProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceProperties indicates an expected call of VkGetPhysicalDeviceProperties.
func (mr *MockLoaderMockRecorder) VkGetPhysicalDeviceProperties(physicalDevice, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceProperties", reflect.TypeOf((*MockLoader)(nil).VkGetPhysicalDeviceProperties), physicalDevice, pProperties)
}

// VkGetPhysicalDeviceQueueFamilyProperties mocks base method.
func (m *MockLoader) VkGetPhysicalDeviceQueueFamilyProperties(physicalDevice loader.VkPhysicalDevice, pQueueFamilyPropertyCount *loader.Uint32, pQueueFamilyProperties *loader.VkQueueFamilyProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceQueueFamilyProperties", physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceQueueFamilyProperties indicates an expected call of VkGetPhysicalDeviceQueueFamilyProperties.
func (mr *MockLoaderMockRecorder) VkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceQueueFamilyProperties", reflect.TypeOf((*MockLoader)(nil).VkGetPhysicalDeviceQueueFamilyProperties), physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
}

// VkGetPhysicalDeviceSparseImageFormatProperties mocks base method.
func (m *MockLoader) VkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice loader.VkPhysicalDevice, format loader.VkFormat, t loader.VkImageType, samples loader.VkSampleCountFlagBits, usage loader.VkImageUsageFlags, tiling loader.VkImageTiling, pPropertyCount *loader.Uint32, pProperties *loader.VkSparseImageFormatProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPhysicalDeviceSparseImageFormatProperties", physicalDevice, format, t, samples, usage, tiling, pPropertyCount, pProperties)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetPhysicalDeviceSparseImageFormatProperties indicates an expected call of VkGetPhysicalDeviceSparseImageFormatProperties.
func (mr *MockLoaderMockRecorder) VkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, t, samples, usage, tiling, pPropertyCount, pProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPhysicalDeviceSparseImageFormatProperties", reflect.TypeOf((*MockLoader)(nil).VkGetPhysicalDeviceSparseImageFormatProperties), physicalDevice, format, t, samples, usage, tiling, pPropertyCount, pProperties)
}

// VkGetPipelineCacheData mocks base method.
func (m *MockLoader) VkGetPipelineCacheData(device loader.VkDevice, pipelineCache loader.VkPipelineCache, pDataSize *loader.Size, pData unsafe.Pointer) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetPipelineCacheData", device, pipelineCache, pDataSize, pData)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetPipelineCacheData indicates an expected call of VkGetPipelineCacheData.
func (mr *MockLoaderMockRecorder) VkGetPipelineCacheData(device, pipelineCache, pDataSize, pData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetPipelineCacheData", reflect.TypeOf((*MockLoader)(nil).VkGetPipelineCacheData), device, pipelineCache, pDataSize, pData)
}

// VkGetQueryPoolResults mocks base method.
func (m *MockLoader) VkGetQueryPoolResults(device loader.VkDevice, queryPool loader.VkQueryPool, firstQuery, queryCount loader.Uint32, dataSize loader.Size, pData unsafe.Pointer, stride loader.VkDeviceSize, flags loader.VkQueryResultFlags) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetQueryPoolResults", device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkGetQueryPoolResults indicates an expected call of VkGetQueryPoolResults.
func (mr *MockLoaderMockRecorder) VkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetQueryPoolResults", reflect.TypeOf((*MockLoader)(nil).VkGetQueryPoolResults), device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags)
}

// VkGetRenderAreaGranularity mocks base method.
func (m *MockLoader) VkGetRenderAreaGranularity(device loader.VkDevice, renderPass loader.VkRenderPass, pGranularity *loader.VkExtent2D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkGetRenderAreaGranularity", device, renderPass, pGranularity)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkGetRenderAreaGranularity indicates an expected call of VkGetRenderAreaGranularity.
func (mr *MockLoaderMockRecorder) VkGetRenderAreaGranularity(device, renderPass, pGranularity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkGetRenderAreaGranularity", reflect.TypeOf((*MockLoader)(nil).VkGetRenderAreaGranularity), device, renderPass, pGranularity)
}

// VkInvalidateMappedMemoryRanges mocks base method.
func (m *MockLoader) VkInvalidateMappedMemoryRanges(device loader.VkDevice, memoryRangeCount loader.Uint32, pMemoryRanges *loader.VkMappedMemoryRange) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkInvalidateMappedMemoryRanges", device, memoryRangeCount, pMemoryRanges)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkInvalidateMappedMemoryRanges indicates an expected call of VkInvalidateMappedMemoryRanges.
func (mr *MockLoaderMockRecorder) VkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkInvalidateMappedMemoryRanges", reflect.TypeOf((*MockLoader)(nil).VkInvalidateMappedMemoryRanges), device, memoryRangeCount, pMemoryRanges)
}

// VkMapMemory mocks base method.
func (m *MockLoader) VkMapMemory(device loader.VkDevice, memory loader.VkDeviceMemory, offset, size loader.VkDeviceSize, flags loader.VkMemoryMapFlags, ppData *unsafe.Pointer) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkMapMemory", device, memory, offset, size, flags, ppData)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkMapMemory indicates an expected call of VkMapMemory.
func (mr *MockLoaderMockRecorder) VkMapMemory(device, memory, offset, size, flags, ppData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkMapMemory", reflect.TypeOf((*MockLoader)(nil).VkMapMemory), device, memory, offset, size, flags, ppData)
}

// VkMergePipelineCaches mocks base method.
func (m *MockLoader) VkMergePipelineCaches(device loader.VkDevice, dstCache loader.VkPipelineCache, srcCacheCount loader.Uint32, pSrcCaches *loader.VkPipelineCache) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkMergePipelineCaches", device, dstCache, srcCacheCount, pSrcCaches)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkMergePipelineCaches indicates an expected call of VkMergePipelineCaches.
func (mr *MockLoaderMockRecorder) VkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkMergePipelineCaches", reflect.TypeOf((*MockLoader)(nil).VkMergePipelineCaches), device, dstCache, srcCacheCount, pSrcCaches)
}

// VkQueueBindSparse mocks base method.
func (m *MockLoader) VkQueueBindSparse(queue loader.VkQueue, bindInfoCount loader.Uint32, pBindInfo *loader.VkBindSparseInfo, fence loader.VkFence) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkQueueBindSparse", queue, bindInfoCount, pBindInfo, fence)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkQueueBindSparse indicates an expected call of VkQueueBindSparse.
func (mr *MockLoaderMockRecorder) VkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkQueueBindSparse", reflect.TypeOf((*MockLoader)(nil).VkQueueBindSparse), queue, bindInfoCount, pBindInfo, fence)
}

// VkQueueSubmit mocks base method.
func (m *MockLoader) VkQueueSubmit(queue loader.VkQueue, submitCount loader.Uint32, pSubmits *loader.VkSubmitInfo, fence loader.VkFence) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkQueueSubmit", queue, submitCount, pSubmits, fence)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkQueueSubmit indicates an expected call of VkQueueSubmit.
func (mr *MockLoaderMockRecorder) VkQueueSubmit(queue, submitCount, pSubmits, fence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkQueueSubmit", reflect.TypeOf((*MockLoader)(nil).VkQueueSubmit), queue, submitCount, pSubmits, fence)
}

// VkQueueWaitIdle mocks base method.
func (m *MockLoader) VkQueueWaitIdle(queue loader.VkQueue) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkQueueWaitIdle", queue)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkQueueWaitIdle indicates an expected call of VkQueueWaitIdle.
func (mr *MockLoaderMockRecorder) VkQueueWaitIdle(queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkQueueWaitIdle", reflect.TypeOf((*MockLoader)(nil).VkQueueWaitIdle), queue)
}

// VkResetCommandBuffer mocks base method.
func (m *MockLoader) VkResetCommandBuffer(commandBuffer loader.VkCommandBuffer, flags loader.VkCommandBufferResetFlags) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkResetCommandBuffer", commandBuffer, flags)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkResetCommandBuffer indicates an expected call of VkResetCommandBuffer.
func (mr *MockLoaderMockRecorder) VkResetCommandBuffer(commandBuffer, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkResetCommandBuffer", reflect.TypeOf((*MockLoader)(nil).VkResetCommandBuffer), commandBuffer, flags)
}

// VkResetCommandPool mocks base method.
func (m *MockLoader) VkResetCommandPool(device loader.VkDevice, commandPool loader.VkCommandPool, flags loader.VkCommandPoolResetFlags) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkResetCommandPool", device, commandPool, flags)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkResetCommandPool indicates an expected call of VkResetCommandPool.
func (mr *MockLoaderMockRecorder) VkResetCommandPool(device, commandPool, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkResetCommandPool", reflect.TypeOf((*MockLoader)(nil).VkResetCommandPool), device, commandPool, flags)
}

// VkResetDescriptorPool mocks base method.
func (m *MockLoader) VkResetDescriptorPool(device loader.VkDevice, descriptorPool loader.VkDescriptorPool, flags loader.VkDescriptorPoolResetFlags) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkResetDescriptorPool", device, descriptorPool, flags)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkResetDescriptorPool indicates an expected call of VkResetDescriptorPool.
func (mr *MockLoaderMockRecorder) VkResetDescriptorPool(device, descriptorPool, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkResetDescriptorPool", reflect.TypeOf((*MockLoader)(nil).VkResetDescriptorPool), device, descriptorPool, flags)
}

// VkResetEvent mocks base method.
func (m *MockLoader) VkResetEvent(device loader.VkDevice, event loader.VkEvent) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkResetEvent", device, event)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkResetEvent indicates an expected call of VkResetEvent.
func (mr *MockLoaderMockRecorder) VkResetEvent(device, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkResetEvent", reflect.TypeOf((*MockLoader)(nil).VkResetEvent), device, event)
}

// VkResetFences mocks base method.
func (m *MockLoader) VkResetFences(device loader.VkDevice, fenceCount loader.Uint32, pFences *loader.VkFence) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkResetFences", device, fenceCount, pFences)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkResetFences indicates an expected call of VkResetFences.
func (mr *MockLoaderMockRecorder) VkResetFences(device, fenceCount, pFences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkResetFences", reflect.TypeOf((*MockLoader)(nil).VkResetFences), device, fenceCount, pFences)
}

// VkSetEvent mocks base method.
func (m *MockLoader) VkSetEvent(device loader.VkDevice, event loader.VkEvent) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkSetEvent", device, event)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkSetEvent indicates an expected call of VkSetEvent.
func (mr *MockLoaderMockRecorder) VkSetEvent(device, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkSetEvent", reflect.TypeOf((*MockLoader)(nil).VkSetEvent), device, event)
}

// VkUnmapMemory mocks base method.
func (m *MockLoader) VkUnmapMemory(device loader.VkDevice, memory loader.VkDeviceMemory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkUnmapMemory", device, memory)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkUnmapMemory indicates an expected call of VkUnmapMemory.
func (mr *MockLoaderMockRecorder) VkUnmapMemory(device, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkUnmapMemory", reflect.TypeOf((*MockLoader)(nil).VkUnmapMemory), device, memory)
}

// VkUpdateDescriptorSets mocks base method.
func (m *MockLoader) VkUpdateDescriptorSets(device loader.VkDevice, descriptorWriteCount loader.Uint32, pDescriptorWrites *loader.VkWriteDescriptorSet, descriptorCopyCount loader.Uint32, pDescriptorCopies *loader.VkCopyDescriptorSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkUpdateDescriptorSets", device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies)
	ret0, _ := ret[0].(error)
	return ret0
}

// VkUpdateDescriptorSets indicates an expected call of VkUpdateDescriptorSets.
func (mr *MockLoaderMockRecorder) VkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkUpdateDescriptorSets", reflect.TypeOf((*MockLoader)(nil).VkUpdateDescriptorSets), device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies)
}

// VkWaitForFences mocks base method.
func (m *MockLoader) VkWaitForFences(device loader.VkDevice, fenceCount loader.Uint32, pFences *loader.VkFence, waitAll loader.VkBool32, timeout loader.Uint64) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VkWaitForFences", device, fenceCount, pFences, waitAll, timeout)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VkWaitForFences indicates an expected call of VkWaitForFences.
func (mr *MockLoaderMockRecorder) VkWaitForFences(device, fenceCount, pFences, waitAll, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VkWaitForFences", reflect.TypeOf((*MockLoader)(nil).VkWaitForFences), device, fenceCount, pFences, waitAll, timeout)
}
