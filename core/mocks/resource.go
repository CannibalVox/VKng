// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	unsafe "unsafe"

	core "github.com/CannibalVox/VKng/core"
	loader "github.com/CannibalVox/VKng/core/loader"
	resource "github.com/CannibalVox/VKng/core/resource"
	cgoalloc "github.com/CannibalVox/cgoalloc"
	gomock "github.com/golang/mock/gomock"
)

// MockBuffer is a mock of Buffer interface.
type MockBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockBufferMockRecorder
}

// MockBufferMockRecorder is the mock recorder for MockBuffer.
type MockBufferMockRecorder struct {
	mock *MockBuffer
}

// NewMockBuffer creates a new mock instance.
func NewMockBuffer(ctrl *gomock.Controller) *MockBuffer {
	mock := &MockBuffer{ctrl: ctrl}
	mock.recorder = &MockBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuffer) EXPECT() *MockBufferMockRecorder {
	return m.recorder
}

// BindBufferMemory mocks base method.
func (m *MockBuffer) BindBufferMemory(memory resource.DeviceMemory, offset int) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindBufferMemory", memory, offset)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindBufferMemory indicates an expected call of BindBufferMemory.
func (mr *MockBufferMockRecorder) BindBufferMemory(memory, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindBufferMemory", reflect.TypeOf((*MockBuffer)(nil).BindBufferMemory), memory, offset)
}

// Destroy mocks base method.
func (m *MockBuffer) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockBufferMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockBuffer)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockBuffer) Handle() loader.VkBuffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkBuffer)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockBufferMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockBuffer)(nil).Handle))
}

// MemoryRequirements mocks base method.
func (m *MockBuffer) MemoryRequirements(allocator cgoalloc.Allocator) (*core.MemoryRequirements, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryRequirements", allocator)
	ret0, _ := ret[0].(*core.MemoryRequirements)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryRequirements indicates an expected call of MemoryRequirements.
func (mr *MockBufferMockRecorder) MemoryRequirements(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRequirements", reflect.TypeOf((*MockBuffer)(nil).MemoryRequirements), allocator)
}

// MockDeviceMemory is a mock of DeviceMemory interface.
type MockDeviceMemory struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMemoryMockRecorder
}

// MockDeviceMemoryMockRecorder is the mock recorder for MockDeviceMemory.
type MockDeviceMemoryMockRecorder struct {
	mock *MockDeviceMemory
}

// NewMockDeviceMemory creates a new mock instance.
func NewMockDeviceMemory(ctrl *gomock.Controller) *MockDeviceMemory {
	mock := &MockDeviceMemory{ctrl: ctrl}
	mock.recorder = &MockDeviceMemoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceMemory) EXPECT() *MockDeviceMemoryMockRecorder {
	return m.recorder
}

// Free mocks base method.
func (m *MockDeviceMemory) Free() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Free")
	ret0, _ := ret[0].(error)
	return ret0
}

// Free indicates an expected call of Free.
func (mr *MockDeviceMemoryMockRecorder) Free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockDeviceMemory)(nil).Free))
}

// Handle mocks base method.
func (m *MockDeviceMemory) Handle() loader.VkDeviceMemory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkDeviceMemory)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDeviceMemoryMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDeviceMemory)(nil).Handle))
}

// MapMemory mocks base method.
func (m *MockDeviceMemory) MapMemory(offset, size int) (unsafe.Pointer, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapMemory", offset, size)
	ret0, _ := ret[0].(unsafe.Pointer)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MapMemory indicates an expected call of MapMemory.
func (mr *MockDeviceMemoryMockRecorder) MapMemory(offset, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapMemory", reflect.TypeOf((*MockDeviceMemory)(nil).MapMemory), offset, size)
}

// UnmapMemory mocks base method.
func (m *MockDeviceMemory) UnmapMemory() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmapMemory")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmapMemory indicates an expected call of UnmapMemory.
func (mr *MockDeviceMemoryMockRecorder) UnmapMemory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmapMemory", reflect.TypeOf((*MockDeviceMemory)(nil).UnmapMemory))
}

// WriteData mocks base method.
func (m *MockDeviceMemory) WriteData(offset int, data interface{}) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteData", offset, data)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteData indicates an expected call of WriteData.
func (mr *MockDeviceMemoryMockRecorder) WriteData(offset, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteData", reflect.TypeOf((*MockDeviceMemory)(nil).WriteData), offset, data)
}

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// AllocateMemory mocks base method.
func (m *MockDevice) AllocateMemory(allocator cgoalloc.Allocator, o *resource.DeviceMemoryOptions) (resource.DeviceMemory, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateMemory", allocator, o)
	ret0, _ := ret[0].(resource.DeviceMemory)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateMemory indicates an expected call of AllocateMemory.
func (mr *MockDeviceMockRecorder) AllocateMemory(allocator, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateMemory", reflect.TypeOf((*MockDevice)(nil).AllocateMemory), allocator, o)
}

// CreateBuffer mocks base method.
func (m *MockDevice) CreateBuffer(allocator cgoalloc.Allocator, o *resource.BufferOptions) (resource.Buffer, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuffer", allocator, o)
	ret0, _ := ret[0].(resource.Buffer)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBuffer indicates an expected call of CreateBuffer.
func (mr *MockDeviceMockRecorder) CreateBuffer(allocator, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuffer", reflect.TypeOf((*MockDevice)(nil).CreateBuffer), allocator, o)
}

// CreateFence mocks base method.
func (m *MockDevice) CreateFence(allocator cgoalloc.Allocator, o *resource.FenceOptions) (resource.Fence, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFence", allocator, o)
	ret0, _ := ret[0].(resource.Fence)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFence indicates an expected call of CreateFence.
func (mr *MockDeviceMockRecorder) CreateFence(allocator, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFence", reflect.TypeOf((*MockDevice)(nil).CreateFence), allocator, o)
}

// CreateImageView mocks base method.
func (m *MockDevice) CreateImageView(allocator cgoalloc.Allocator, o *resource.ImageViewOptions) (resource.ImageView, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageView", allocator, o)
	ret0, _ := ret[0].(resource.ImageView)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateImageView indicates an expected call of CreateImageView.
func (mr *MockDeviceMockRecorder) CreateImageView(allocator, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageView", reflect.TypeOf((*MockDevice)(nil).CreateImageView), allocator, o)
}

// CreateSemaphore mocks base method.
func (m *MockDevice) CreateSemaphore(allocator cgoalloc.Allocator, o *resource.SemaphoreOptions) (resource.Semaphore, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSemaphore", allocator, o)
	ret0, _ := ret[0].(resource.Semaphore)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSemaphore indicates an expected call of CreateSemaphore.
func (mr *MockDeviceMockRecorder) CreateSemaphore(allocator, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSemaphore", reflect.TypeOf((*MockDevice)(nil).CreateSemaphore), allocator, o)
}

// CreateShaderModule mocks base method.
func (m *MockDevice) CreateShaderModule(allocator cgoalloc.Allocator, o *resource.ShaderModuleOptions) (resource.ShaderModule, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShaderModule", allocator, o)
	ret0, _ := ret[0].(resource.ShaderModule)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateShaderModule indicates an expected call of CreateShaderModule.
func (mr *MockDeviceMockRecorder) CreateShaderModule(allocator, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShaderModule", reflect.TypeOf((*MockDevice)(nil).CreateShaderModule), allocator, o)
}

// Destroy mocks base method.
func (m *MockDevice) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDeviceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDevice)(nil).Destroy))
}

// GetQueue mocks base method.
func (m *MockDevice) GetQueue(queueFamilyIndex, queueIndex int) (resource.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueue", queueFamilyIndex, queueIndex)
	ret0, _ := ret[0].(resource.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueue indicates an expected call of GetQueue.
func (mr *MockDeviceMockRecorder) GetQueue(queueFamilyIndex, queueIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue", reflect.TypeOf((*MockDevice)(nil).GetQueue), queueFamilyIndex, queueIndex)
}

// Handle mocks base method.
func (m *MockDevice) Handle() loader.VkDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkDevice)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDeviceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDevice)(nil).Handle))
}

// Loader mocks base method.
func (m *MockDevice) Loader() loader.Loader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Loader")
	ret0, _ := ret[0].(loader.Loader)
	return ret0
}

// Loader indicates an expected call of Loader.
func (mr *MockDeviceMockRecorder) Loader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loader", reflect.TypeOf((*MockDevice)(nil).Loader))
}

// ResetFences mocks base method.
func (m *MockDevice) ResetFences(allocator cgoalloc.Allocator, fences []resource.Fence) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetFences", allocator, fences)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetFences indicates an expected call of ResetFences.
func (mr *MockDeviceMockRecorder) ResetFences(allocator, fences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFences", reflect.TypeOf((*MockDevice)(nil).ResetFences), allocator, fences)
}

// WaitForFences mocks base method.
func (m *MockDevice) WaitForFences(allocator cgoalloc.Allocator, waitForAll bool, timeout time.Duration, fences []resource.Fence) (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForFences", allocator, waitForAll, timeout, fences)
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForFences indicates an expected call of WaitForFences.
func (mr *MockDeviceMockRecorder) WaitForFences(allocator, waitForAll, timeout, fences interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForFences", reflect.TypeOf((*MockDevice)(nil).WaitForFences), allocator, waitForAll, timeout, fences)
}

// WaitForIdle mocks base method.
func (m *MockDevice) WaitForIdle() (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForIdle")
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForIdle indicates an expected call of WaitForIdle.
func (mr *MockDeviceMockRecorder) WaitForIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForIdle", reflect.TypeOf((*MockDevice)(nil).WaitForIdle))
}

// MockFence is a mock of Fence interface.
type MockFence struct {
	ctrl     *gomock.Controller
	recorder *MockFenceMockRecorder
}

// MockFenceMockRecorder is the mock recorder for MockFence.
type MockFenceMockRecorder struct {
	mock *MockFence
}

// NewMockFence creates a new mock instance.
func NewMockFence(ctrl *gomock.Controller) *MockFence {
	mock := &MockFence{ctrl: ctrl}
	mock.recorder = &MockFenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFence) EXPECT() *MockFenceMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockFence) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockFenceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockFence)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockFence) Handle() loader.VkFence {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkFence)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockFenceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockFence)(nil).Handle))
}

// MockImage is a mock of Image interface.
type MockImage struct {
	ctrl     *gomock.Controller
	recorder *MockImageMockRecorder
}

// MockImageMockRecorder is the mock recorder for MockImage.
type MockImageMockRecorder struct {
	mock *MockImage
}

// NewMockImage creates a new mock instance.
func NewMockImage(ctrl *gomock.Controller) *MockImage {
	mock := &MockImage{ctrl: ctrl}
	mock.recorder = &MockImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImage) EXPECT() *MockImageMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockImage) Handle() loader.VkImage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkImage)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockImageMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockImage)(nil).Handle))
}

// MockImageView is a mock of ImageView interface.
type MockImageView struct {
	ctrl     *gomock.Controller
	recorder *MockImageViewMockRecorder
}

// MockImageViewMockRecorder is the mock recorder for MockImageView.
type MockImageViewMockRecorder struct {
	mock *MockImageView
}

// NewMockImageView creates a new mock instance.
func NewMockImageView(ctrl *gomock.Controller) *MockImageView {
	mock := &MockImageView{ctrl: ctrl}
	mock.recorder = &MockImageViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageView) EXPECT() *MockImageViewMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockImageView) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockImageViewMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockImageView)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockImageView) Handle() loader.VkImageView {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkImageView)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockImageViewMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockImageView)(nil).Handle))
}

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockInstance) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockInstanceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockInstance)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockInstance) Handle() loader.VkInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkInstance)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockInstanceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockInstance)(nil).Handle))
}

// Loader mocks base method.
func (m *MockInstance) Loader() loader.Loader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Loader")
	ret0, _ := ret[0].(loader.Loader)
	return ret0
}

// Loader indicates an expected call of Loader.
func (mr *MockInstanceMockRecorder) Loader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loader", reflect.TypeOf((*MockInstance)(nil).Loader))
}

// PhysicalDevices mocks base method.
func (m *MockInstance) PhysicalDevices(allocator cgoalloc.Allocator) ([]resource.PhysicalDevice, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalDevices", allocator)
	ret0, _ := ret[0].([]resource.PhysicalDevice)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PhysicalDevices indicates an expected call of PhysicalDevices.
func (mr *MockInstanceMockRecorder) PhysicalDevices(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalDevices", reflect.TypeOf((*MockInstance)(nil).PhysicalDevices), allocator)
}

// MockPhysicalDevice is a mock of PhysicalDevice interface.
type MockPhysicalDevice struct {
	ctrl     *gomock.Controller
	recorder *MockPhysicalDeviceMockRecorder
}

// MockPhysicalDeviceMockRecorder is the mock recorder for MockPhysicalDevice.
type MockPhysicalDeviceMockRecorder struct {
	mock *MockPhysicalDevice
}

// NewMockPhysicalDevice creates a new mock instance.
func NewMockPhysicalDevice(ctrl *gomock.Controller) *MockPhysicalDevice {
	mock := &MockPhysicalDevice{ctrl: ctrl}
	mock.recorder = &MockPhysicalDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhysicalDevice) EXPECT() *MockPhysicalDeviceMockRecorder {
	return m.recorder
}

// AvailableExtensions mocks base method.
func (m *MockPhysicalDevice) AvailableExtensions(allocator cgoalloc.Allocator) (map[string]*core.ExtensionProperties, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableExtensions", allocator)
	ret0, _ := ret[0].(map[string]*core.ExtensionProperties)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableExtensions indicates an expected call of AvailableExtensions.
func (mr *MockPhysicalDeviceMockRecorder) AvailableExtensions(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableExtensions", reflect.TypeOf((*MockPhysicalDevice)(nil).AvailableExtensions), allocator)
}

// CreateDevice mocks base method.
func (m *MockPhysicalDevice) CreateDevice(allocator cgoalloc.Allocator, options *resource.DeviceOptions) (resource.Device, loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", allocator, options)
	ret0, _ := ret[0].(resource.Device)
	ret1, _ := ret[1].(loader.VkResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockPhysicalDeviceMockRecorder) CreateDevice(allocator, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockPhysicalDevice)(nil).CreateDevice), allocator, options)
}

// Features mocks base method.
func (m *MockPhysicalDevice) Features(allocator cgoalloc.Allocator) (*core.PhysicalDeviceFeatures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features", allocator)
	ret0, _ := ret[0].(*core.PhysicalDeviceFeatures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Features indicates an expected call of Features.
func (mr *MockPhysicalDeviceMockRecorder) Features(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockPhysicalDevice)(nil).Features), allocator)
}

// Handle mocks base method.
func (m *MockPhysicalDevice) Handle() loader.VkPhysicalDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkPhysicalDevice)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockPhysicalDeviceMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockPhysicalDevice)(nil).Handle))
}

// MemoryProperties mocks base method.
func (m *MockPhysicalDevice) MemoryProperties(allocator cgoalloc.Allocator) *resource.PhysicalDeviceMemoryProperties {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryProperties", allocator)
	ret0, _ := ret[0].(*resource.PhysicalDeviceMemoryProperties)
	return ret0
}

// MemoryProperties indicates an expected call of MemoryProperties.
func (mr *MockPhysicalDeviceMockRecorder) MemoryProperties(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryProperties", reflect.TypeOf((*MockPhysicalDevice)(nil).MemoryProperties), allocator)
}

// Properties mocks base method.
func (m *MockPhysicalDevice) Properties(allocator cgoalloc.Allocator) (*core.PhysicalDeviceProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties", allocator)
	ret0, _ := ret[0].(*core.PhysicalDeviceProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Properties indicates an expected call of Properties.
func (mr *MockPhysicalDeviceMockRecorder) Properties(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties", reflect.TypeOf((*MockPhysicalDevice)(nil).Properties), allocator)
}

// QueueFamilyProperties mocks base method.
func (m *MockPhysicalDevice) QueueFamilyProperties(allocator cgoalloc.Allocator) ([]*core.QueueFamily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueFamilyProperties", allocator)
	ret0, _ := ret[0].([]*core.QueueFamily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueFamilyProperties indicates an expected call of QueueFamilyProperties.
func (mr *MockPhysicalDeviceMockRecorder) QueueFamilyProperties(allocator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueFamilyProperties", reflect.TypeOf((*MockPhysicalDevice)(nil).QueueFamilyProperties), allocator)
}

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockQueue) Handle() loader.VkQueue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkQueue)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockQueueMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockQueue)(nil).Handle))
}

// Loader mocks base method.
func (m *MockQueue) Loader() loader.Loader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Loader")
	ret0, _ := ret[0].(loader.Loader)
	return ret0
}

// Loader indicates an expected call of Loader.
func (mr *MockQueueMockRecorder) Loader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loader", reflect.TypeOf((*MockQueue)(nil).Loader))
}

// WaitForIdle mocks base method.
func (m *MockQueue) WaitForIdle() (loader.VkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForIdle")
	ret0, _ := ret[0].(loader.VkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForIdle indicates an expected call of WaitForIdle.
func (mr *MockQueueMockRecorder) WaitForIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForIdle", reflect.TypeOf((*MockQueue)(nil).WaitForIdle))
}

// MockSemaphore is a mock of Semaphore interface.
type MockSemaphore struct {
	ctrl     *gomock.Controller
	recorder *MockSemaphoreMockRecorder
}

// MockSemaphoreMockRecorder is the mock recorder for MockSemaphore.
type MockSemaphoreMockRecorder struct {
	mock *MockSemaphore
}

// NewMockSemaphore creates a new mock instance.
func NewMockSemaphore(ctrl *gomock.Controller) *MockSemaphore {
	mock := &MockSemaphore{ctrl: ctrl}
	mock.recorder = &MockSemaphoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSemaphore) EXPECT() *MockSemaphoreMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockSemaphore) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSemaphoreMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSemaphore)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockSemaphore) Handle() loader.VkSemaphore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkSemaphore)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockSemaphoreMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockSemaphore)(nil).Handle))
}

// MockShaderModule is a mock of ShaderModule interface.
type MockShaderModule struct {
	ctrl     *gomock.Controller
	recorder *MockShaderModuleMockRecorder
}

// MockShaderModuleMockRecorder is the mock recorder for MockShaderModule.
type MockShaderModuleMockRecorder struct {
	mock *MockShaderModule
}

// NewMockShaderModule creates a new mock instance.
func NewMockShaderModule(ctrl *gomock.Controller) *MockShaderModule {
	mock := &MockShaderModule{ctrl: ctrl}
	mock.recorder = &MockShaderModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShaderModule) EXPECT() *MockShaderModuleMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockShaderModule) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockShaderModuleMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockShaderModule)(nil).Destroy))
}

// Handle mocks base method.
func (m *MockShaderModule) Handle() loader.VkShaderModule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(loader.VkShaderModule)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockShaderModuleMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockShaderModule)(nil).Handle))
}
